# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.2.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-19 02:52+0000\n"
"PO-Revision-Date: 2019-04-27 07:30+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2021\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/98399/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:4
msgid "Assembling pipelines with `mlab`"
msgstr "`mlab` を使用したパイプラインの組み立て"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:7
msgid ""
"The plotting functions reviewed above explore only a small fraction of the "
"visualization possibilities of Mayavi. The full power of Mayavi can only be "
"unleashed through the control of the pipeline itself. As described in the "
":ref:`an-overview-of-mayavi` section, a visualization in Mayavi is created "
"by loading the data in Mayavi with `data source` object, optionally "
"transforming the data through :ref:`filters`, and visualizing it with "
":ref:`modules`. The mlab functions build complex pipelines for you in one "
"function, making the right choice of sources, filters, and modules, but they"
" cannot explore all the possible combinations."
msgstr ""
"上でレビューしたプロット関数は，Mayaviの視覚化の可能性のほんの一部を検討しています．Mayaviの力は，パイプライン自体の制御を通じてのみ発揮されます．"
" :ref:`an-overview-of-mayavi` セクションで説明されているように，Mayaviのビジュアライゼーションは，  `data "
"source` オブジェクトを使用してMayaviのデータをロードし， :ref:`filters` を使用してオプションでデータを変換し， "
":ref:`modules` "
"を使用してビジュアライゼーションします．mlab関数は，1つの関数で複雑なパイプラインを構築し，ソース，フィルタ，モジュールを適切に選択しますが，可能なすべての組み合わせを調べることはできません．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:18
msgid ""
"Mlab provides a sub-module `pipeline` which contains functions to populate "
"the pipeline easily from scripts. This module is accessible in `mlab`: "
"`mlab.pipeline`, or can be imported from `mayavi.tools.pipeline`."
msgstr ""
"Mlabはスクリプトからパイプラインを容易に生成する関数を含むサブモジュール  `pipeline` を提供します．このモジュールは `mlab` : "
"`mayavi.pipeline` でアクセスできます．または `mayavi.tools.pipeline` からインポートできます．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:23
msgid ""
"When using an `mlab` plotting function, a pipeline is created: first a "
"source is created from `numpy` arrays, then modules, and possibly filters, "
"are added. The resulting pipeline can be seen for instance with the "
"`mlab.show_pipeline` command. This information can be used to create the "
"very same pipeline directly using the `pipeline` scripting module, as the "
"names of the functions required to create each step of the pipeline are "
"directly linked to the default names of the objects created by `mlab` on the"
" pipeline. As an example, let us create a visualization using :func:`surf`::"
msgstr ""
"`mlab` プロット関数を使用すると，パイプラインが作成されます．最初に `numpy` "
"配列からソースが作成され，次にモジュール，場合によってはフィルタが追加されます．結果のパイプラインは，例えば `mlab.show_pipeline` "
"コマンドを使用して見ることができます．パイプラインの各ステップを作成するために必要な関数の名前は，パイプライン上の `mlab` "
"によって作成されたオブジェクトのデフォルト名に直接リンクされているので，この情報を使用して，  `pipeline` "
"スクリプトモジュールを使用して，まったく同じパイプラインを直接作成することができます．例として， :func:`surf` "
"を使用した視覚化を作成します::"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:39
msgid "The following pipeline is created::"
msgstr "次のパイプラインが作成されます．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:47
msgid "The same pipeline can be created using the following code::"
msgstr "次のコードを使用して，同じパイプラインを作成できます．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:57
msgid "Data sources"
msgstr "データソース"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:61
msgid ""
"The `mlab.pipeline` module contains functions for creating various data "
"sources from arrays. They are fully documented in details in the :ref:`mlab-"
"pipeline-reference`. We give a small summary of the possibilities here."
msgstr ""
"`mlab.pipeline` モジュールには，配列からさまざまなデータソースを作成するための関数が含まれています．詳細については "
":ref:`mlab-pipeline-reference` に完全に文書化されています．ここでは，その可能性について簡単に説明します．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:66
msgid ""
"Mayavi distinguishes sources with **scalar data**, and sources with **vector"
" data**, but more important, it has different functions to create sets of "
"**unconnected points**, with data attached to them, or **connected data "
"points** describing continuously varying quantities that can be interpolated"
" between data points, often called `fields` in physics or engineering."
msgstr ""
"Mayaviは **scalar data** を持つソースと **vector data** を持つソースを区別しますが，より重要なのは， "
"**unconnected points** のセットを作成してデータをアタッチする機能と， **connected data points** "
"を作成してデータポイント間で補間できる連続的に変化する量を記述する機能です．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "Unconnected sources"
msgstr "接続されていないソース"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:77
msgid ":func:`scalar_scatter` (creates a :ref:`poly_data`)"
msgstr ":func:`scalar_scatter` (creates a :ref:`poly_data` を作成)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:82
msgid ":func:`vector_scatter` (creates an :ref:`poly_data`)"
msgstr ":func:`vector_scatter` (creates an :ref:`poly_data`)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "implicitly-connected sources"
msgstr "暗黙的に接続されたソース"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:91
msgid ":func:`scalar_field` (creates an :ref:`image_data`)"
msgstr ":func:`scalar_field` (creates an :ref:`image_data`)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:96
msgid ":func:`vector_field` (creates an :ref:`image_data`)"
msgstr ":func:`vector_field` (creates an :ref:`image_data`)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:101
msgid ":func:`array2d_source` (creates an :ref:`image_data`)"
msgstr ":func:`array2d_source` (creates an :ref:`image_data`)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "Explicitly-connected sources"
msgstr "明示的に接続されたソース"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:110
msgid ":func:`line_source` (creates an :ref:`poly_data`)"
msgstr ":func:`line_source` (creates an :ref:`poly_data`)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:115
msgid ":func:`triangular_mesh_source` (creates an :ref:`poly_data`)"
msgstr ":func:`triangular_mesh_source` (creates an :ref:`poly_data`)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:120
msgid ""
"All the `mlab.pipline` source factories are functions that take numpy arrays"
" and return the Mayavi source object that was added to the pipeline. "
"However, the implicitly-connected sources require well-shaped arrays as "
"arguments: the data is supposed to lie on a regular, orthogonal, grid of the"
" same shape as the shape of the input array, in other words, the array "
"describes an image, possibly 3 dimensional."
msgstr ""
"すべての `mlab.pipline` "
"のソースファクトリは，numpy配列を取り，パイプラインに追加されたMayaviソースオブジェクトを返す関数です．ただし，暗黙に接続されたソースは引数として整形式の配列を必要とします．つまり，データは入力配列の形状と同じ形状の規則的な直交グリッド上に存在することになります．つまり，配列は3次元のイメージを表します．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:129
msgid ""
"More complicated data structures can be created, such as irregular grids or "
"non-orthogonal grid. See :ref:`the section on data structures <data-"
"structures-used-by-mayavi>`."
msgstr ""
"不規則格子または非直交格子のような，より複雑なデータ構造を作成することができる．関連項目 :ref:`the section on data "
"structures <data-structures-used-by-mayavi>` ．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:135
msgid "Modules and filters"
msgstr "モジュールとフィルタ"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:137
msgid ""
"For each Mayavi module or filter (see :ref:`modules` and :ref:`filters`), "
"there is a corresponding `mlab.pipeline` function. The name of this function"
" is created by replacing the alternating capitals in the module or filter "
"name by underscores. Thus `ScalarCutPlane` corresponds to "
"`scalar_cut_plane`."
msgstr ""
"各Mayaviモジュールまたはフィルタ( :ref:`modules` および :ref:`filters` )には，対応する "
"`mlab.pipeline` "
"関数．この関数の名前は，モジュールまたはフィルタ名の大文字と小文字が交互に入れ替わることによって作成されます．したがって， "
"`ScalarCutPlane` は `scalar_cut_plane` に相当します．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:143
msgid ""
"In general, the `mlab.pipeline` module and filter factory functions simply "
"create and connect the corresponding object. However they can also contain "
"addition logic, exposed as keyword arguments. For instance they allow to set"
" up easily a colormap, or to specify the color of the module, when relevant."
" In accordance with the goal of the `mlab` interface to make frequent "
"operations simple, they use the keyword arguments to choose the properties "
"of the created object to suit the requirements. It can be thus easier to use"
" the keyword arguments, when available, than to set the attributes of the "
"objects created. For more information, please check out the docstrings. "
"Full, detailed, usage examples are given in the next subsection."
msgstr ""
"一般的には `mlab.pipeline` "
"モジュールとフィルタファクトリー関数は，対応するオブジェクトを作成して接続するだけです．ただし，キーワード引数として公開される追加ロジックを含めることもできます．たとえば，必要に応じて，簡単にカラーマップを設定したり，モジュールの色を指定したりできます．頻繁な操作を簡単にするための"
" `mlab` "
"インタフェースの目的に従って，キーワード引数を使用して，作成されたオブジェクトのプロパティを要件に合うように選択します．したがって，作成されたオブジェクトの属性を設定するよりも，キーワード引数を使用する方が簡単です．詳細については，docstringsを参照してください．完全で詳細な使用例については，次のサブセクションで説明します．"
