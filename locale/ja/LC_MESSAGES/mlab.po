# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.4.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-13 00:39+0000\n"
"PO-Revision-Date: 2019-04-27 07:28+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2021\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/98399/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../mayavi/docs/source/mayavi/mlab.rst:4
msgid "``mlab``: Python scripting for 3D plotting"
msgstr "``mlab``: 3Dプロット用のPythonスクリプト"

#: ../../mayavi/docs/source/mayavi/mlab.rst-1
msgid "Section summary"
msgstr "セクションの概要"

#: ../../mayavi/docs/source/mayavi/mlab.rst:8
msgid ""
"This section describes the `mlab` API, for use of Mayavi as a simple "
"plotting in scripts or interactive sessions. This is the main entry point "
"for people interested in doing 3D plotting à la Matlab or IDL in Python. If "
"you are interested in a list of all the functions exposed in mlab, see the "
":ref:`mlab-reference`."
msgstr ""
"このセクションでは，スクリプトやインタラクティブセッションでMayaviを単純なプロットとして使用するための `mlab` "
"APIについて説明します．これは，PythonでMatlabやIDLのような3Dプロットを行うことに関心のある人にとっての主要なエントリー・ポイントです．mlabで公開されているすべての関数のリストに興味があるなら，"
" :ref:`mlab-reference` を見てください．"

#: ../../mayavi/docs/source/mayavi/mlab.rst:16
msgid ""
"The :mod:`mayavi.mlab` module, that we call mlab, provides an easy way to "
"visualize data in a script or from an interactive prompt with one-liners as "
"done in the matplotlib_ ``pylab`` interface but with an emphasis on 3D "
"visualization using Mayavi2. This allows users to perform quick 3D "
"visualization while being able to use Mayavi's powerful features."
msgstr ""
":mod:`mayavi.mlab` と呼ばれるmlabモジュールを使用すると， matplotlib_ ``pylab`` "
"インタフェースで実行されるように，1行でスクリプトやインタラクティブプロンプトから簡単にデータを視覚化することができます．ただし，Mayavi2を使用した3D視覚化に重点が置かれています．これにより，Mayaviの強力な機能を使用しながらすばやく3D視覚化を実行できます．"

#: ../../mayavi/docs/source/mayavi/mlab.rst:23
msgid ""
"Mayavi's mlab is designed to be used in a manner well-suited to scripting "
"and does not present a fully object-oriented API. It is can be used "
"interactively with IPython_."
msgstr ""
"Mayaviのmlabは，スクリプトに適した方法で使用するように設計されており，完全にオブジェクト指向のAPIを提供しているわけではありません．"

#: ../../mayavi/docs/source/mayavi/mlab.rst:29
msgid ""
"When using IPython with mlab, as in the following examples, IPython must be "
"invoked with the ``--gui=qt`` command line option like this::"
msgstr ""
"次の例のように，mlabでIPythonを使用する場合，IPythonは次のように ``--gui=qt`` "
"コマンドラインオプションで起動する必要があります．"

#: ../../mayavi/docs/source/mayavi/mlab.rst:34
msgid ""
"On recent versions of IPython, this can be turned on from within IPython "
"itself by::"
msgstr "IPythonの最近のバージョンでは，次のようにしてIPython自体からオンにできます．"

#: ../../mayavi/docs/source/mayavi/mlab.rst:39
msgid "If the following exception is raised::"
msgstr "次の例外が発生した場合:"

#: ../../mayavi/docs/source/mayavi/mlab.rst:43
msgid ""
"This is the result of incompatible setups between PyQt and PySide. The "
"solution is to run ``QT_API=pyqt ETS_TOOLKIT=qt4 ipython``. More details can"
" be found at the `ipython documentation page`_."
msgstr ""
"これは，PyQtとPySideの間で互換性のない設定が行われた結果です．解決策は ``QT_API=pyqt ETS_TOOLKIT=qt4 "
"ipython`` を実行することです．詳細は `ipython documentation page`_ を参照してください．"

#: ../../mayavi/docs/source/mayavi/mlab.rst:47
msgid ""
"If for some reason Mayavi fails with the Qt backend, you can also try using "
"the wxPython backend by doing::"
msgstr "何らかの理由でMayaviがQtバックエンドで失敗した場合は，次のようにしてwxPythonバックエンドを使用してみることもできます．"

#: ../../mayavi/docs/source/mayavi/mlab.rst:53
msgid ""
"For more details on using mlab and running scripts, read the section "
":ref:`running-mlab-scripts`"
msgstr "mlabの使用とスクリプトの実行の詳細については，以下の章 :ref:`running-mlab-scripts` を読んでください．"

#: ../../mayavi/docs/source/mayavi/mlab.rst:62
msgid ""
"In this section, we first introduce simple plotting functions, to create 3D "
"objects as representations of `numpy` arrays. Then we explain (1) how "
"properties such as color or glyph size can be modified or used to represent "
"data; (2) how the visualization created through `mlab` can be modified "
"interactively with dialogs, (3) how scripts and animations can be ran. "
"Finally, we expose a more advanced use of `mlab` in which full visualization"
" pipeline are built in scripts, and we give some detailed examples of "
"applying these tools to visualizing volumetric scalar and vector data."
msgstr ""
"このセクションでは，最初に `numpy` 配列の表現として3Dオブジェクトを作成する簡単なプロット関数を紹介します．次に， (1) "
"色やグリフサイズなどのプロパティを変更したり，データを表すために使用したりする方法について説明します．;(2) `mlab` "
"で作成したビジュアル化をダイアログでインタラクティブに変更する方法， (3) "
"スクリプトとアニメーションを実行する方法．最後に，完全な可視化パイプラインがスクリプトに組み込まれた `mlab` "
"のより高度な使用法を公開し，これらのツールをボリュームスカラーとベクトルデータの可視化に適用する詳細な例を提供します．"

#: ../../mayavi/docs/source/mayavi/mlab.rst:74
msgid "Section contents"
msgstr "セクションの内容"

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:4
msgid "A demo"
msgstr "デモ"

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:6
msgid ""
"To get you started, here is a pretty example showing a spherical harmonic as"
" a surface::"
msgstr "まず，球面調和関数をサーフェスとして表示する例を示します．"

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:24
msgid ""
"Bulk of the code in the above example is to create the data.  One line "
"suffices to visualize it.  This produces the following visualization:"
msgstr "上記の例のコードの大部分は，データを作成するためのものです．それを可視化するには1行で十分です．これにより，次の表示が生成されます．"

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:30
msgid ""
"The visualization is created by the single function :func:`mesh` in the "
"above."
msgstr "視覚化は，上記の :func:`mesh` という単一の関数によって作成されます．"

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:32
msgid ""
"Several examples of this kind are provided with mlab (see `test_contour3d`, "
"`test_points3d`, `test_plot3d_anim` etc.).  The above demo is available as "
"`test_mesh`.  Under IPython these may be found by tab completing on "
"`mlab.test`.  You can also inspect the source in IPython via the handy "
"`mlab.test_contour3d??`."
msgstr ""
"mlab( `test_contour3d`, `test_points3d`, `test_plot3d_anim` "
"などを参照してください．)には，この種の例がいくつか用意されています．上記のデモは `mlab.test` "
"として入手できます．IPythonでは，`mlabでタブを補完することで，これらを見つけることができます．また，便利な "
"`mlab.test_contour3d??` を使ってIPythonのソースを調べることもできます．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:4
msgid "3D Plotting functions for numpy arrays"
msgstr "numpy配列の3Dプロット関数"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:6
msgid ""
"Visualization can be created in `mlab` by a set of functions operating on "
"numpy arrays."
msgstr "numpy配列上で動作する関数のセットによって， `mlab` 内に視覚化を作成することができます．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:9
msgid ""
"The mlab plotting functions take numpy arrays as input, describing the "
"``x``, ``y``, and ``z`` coordinates of the data. They build full-blown "
"visualizations: they create the data source, filters if necessary, and add "
"the visualization modules. Their behavior, and thus the visualization "
"created, can be fine-tuned through keyword arguments, similarly to pylab. In"
" addition, they all return the visualization module created, thus "
"visualization can also be modified by changing the attributes of this "
"module."
msgstr ""
"mlabプロット関数は，データの  ``x``, ``y``,  ``z`` "
"座標を記述するために，多数の配列を入力として受け取ります．データソースの作成，必要に応じたフィルタリング，ビジュアライゼーションモジュールの追加など，本格的なビジュアライゼーションを構築します．これらの関数の振る舞い，そしてその結果作成される視覚化は，pylabと同様に，キーワード引数によって微調整することができます．さらに，これらはすべて，作成されたビジュアル化モジュールを返すため，このモジュールの属性を変更することによってビジュアル化を変更することもできます．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:20
msgid ""
"In this section, we only list the different functions. Each function is "
"described in detail in the :ref:`mlab-reference`, at the end of the user "
"guide, with figures and examples. Please follow the links."
msgstr ""
"このセクションでは，異なる関数のみをリストします．各関数の詳細については，ユーザガイドの最後にある :ref:`mlab-reference` "
"を参照してください．リンクをたどってください．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:26
msgid "0D and 1D data"
msgstr "0D/1Dデータ"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:35
msgid "|points3d|"
msgstr "|points3d|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:51
msgid "points3d"
msgstr "points3d"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:35
msgid ""
":func:`points3d` |hack| Plots glyphs (like points) at the position of the "
"supplied data, described by ``x``, ``y``, ``z`` numpy arrays of the same "
"shape."
msgstr ""
":func:`points3d` |hack| 与えられたデータの位置にグリフ(同点)をプロットします．グリフは ``x``, ``y``, ``z``"
" で記述された同じ形のnumpy配列です．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
msgid "<br>"
msgstr "<br>"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:41
msgid "|plot3d|"
msgstr "|plot3d|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:48
msgid "plot3d"
msgstr "plot3d"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:41
msgid ""
":func:`plot3d` |hack| Plots line between the supplied data, described by "
"``x``, ``y``, ``z`` 1D numpy arrays of the same length."
msgstr ""
":func:`plot3d` |hack| 与えられたデータの間に線を引いて， ``x``, ``y``, ``z`` と同じ長さの1D "
"numpy配列で記述します．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:55
msgid "2D data"
msgstr "2Dデータ"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:59
msgid "|imshow|"
msgstr "|imshow|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:127
msgid "imshow"
msgstr "imshow"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:59
msgid ":func:`imshow` |hack| View a 2D array as an image."
msgstr ":func:`imshow` |hack| 2D配列をイメージとして表示します．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:63
msgid "|surf|"
msgstr "|surf|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:136
msgid "surf"
msgstr "surf"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:63
msgid ""
":func:`surf` |hack| View a 2D array as a carpet plot, with the z axis "
"representation through elevation the value of the array points."
msgstr ":func:`surf` |hack| 2D配列をカーペットプロットとして表示し，配列ポイントの値をz軸で表します．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:69
msgid "|contour_surf|"
msgstr "|contour_surf|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:130
msgid "contour_surf"
msgstr "contour_surf"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:69
msgid ""
":func:`contour_surf` |hack| View a 2D array as line contours, elevated "
"according to the value of the array points."
msgstr ":func:`contour_surf` |hack| 2D配列を線の輪郭として表示し，配列の点の値に応じて高くします．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:74
msgid "|mesh|"
msgstr "|mesh|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:139
msgid "mesh"
msgstr "mesh"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:74
msgid ""
":func:`mesh` |hack| Plot a surface described by three 2D arrays, ``x``, "
"``y``, ``z`` giving the coordinates of the data points as a grid. |hack| "
"Unlike :func:`surf`, the surface is defined by its ``x``, ``y`` and ``z`` "
"coordinates with no privileged direction. More complex surfaces can be "
"created."
msgstr ""
":func:`mesh` |hack| 3つの2D配列, ``x``, ``y``, ``z`` "
"で表されるサーフェスをプロットし，データポイントの座標をグリッドとして与えます． |hack|  :func:`surf`,  とは異なり，サーフェスは"
" ``x``, ``y``, ``z`` 座標で定義され，特別な方向性はありません．より複雑なサーフェスを作成できます．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:84
msgid "|barchart|"
msgstr "|barchart|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:142
msgid "barchart"
msgstr "barchart"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:84
msgid ""
":func:`barchart` |hack| Plot an array ``s``, or a set of points with "
"explicit coordinates arrays, ``x``, ``y`` and ``z``, as a bar chart, eg for "
"histograms. |hack| This function is very versatile and will accept 2D or 3D "
"arrays, but also clouds of points, to position the bars."
msgstr ""
":func:`barchart` |hack| "
"配列``s`,または明示的な座標配列``x',``y''と``z''を持つ点の集合を棒グラフとしてプロットします．|hack|この関数は非常に汎用性が高く，2Dまたは3D配列だけでなく，点群を使用してバーを配置することもできます．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:94
msgid "|triangular_mesh|"
msgstr "|triangular_mesh|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:133
msgid "triangular_mesh"
msgstr "triangular_mesh"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:94
msgid ""
":func:`triangular_mesh` |hack| Plot a triangular mesh, fully specified by "
"``x``, ``y`` and ``z`` coordinates of its vertices, and the (n, 3) array of "
"the indices of the triangles."
msgstr ""
":func:`triangular_mesh` |hack| 三角形メッシュをプロットします．このメッシュは，頂点の ``x``, ``y``, "
"``z`` 座標，および三角形のインデックスの (n, 3) 配列で完全に指定されます．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst-1
msgid "Vertical scale of  :func:`surf` and :func:`contour_surf`"
msgstr ":func:`surf` と :func:`contour_surf` の鉛直スケール"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:105
msgid ""
":func:`surf` and :func:`contour_surf` can be used as 3D representation of 2D"
" data. By default the z-axis is supposed to be in the same units as the x "
"and y axis, but it can be auto-scaled to give a 2/3 aspect ratio. This "
"behavior can be controlled by specifying the \"warp_scale='auto'\"."
msgstr ""
":func:`surf` および :func:`contour_surf` "
"は，2Dデータの3D表現として使用できます．既定では，Z軸はX軸およびY軸と同じ単位であることが想定されていますが，2/3のアスペクト比になるように自動スケールすることもできます．この動作は，"
" \"warp_scale='auto'\" を指定することで制御できます．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst-1
msgid "From data points to surfaces."
msgstr "データポイントからサーフェスへ．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:113
msgid ""
"Knowing the positions of data points is not enough to define a surface, "
"connectivity information is also required. With the functions :func:`surf` "
"and :func:`mesh`, this connectivity information is implicitly extracted from"
" the shape of the input arrays: neighboring data points in the 2D input "
"arrays are connected, and the data lies on a grid. With the function "
":func:`triangular_mesh`, connectivity is explicitly specified. Quite often, "
"the connectivity is not regular, but is not known in advance either. The "
"data points lie on a surface, and we want to plot the surface implicitly "
"defined. The `delaunay2d` filter does the required nearest-neighbor "
"matching, and interpolation, as shown in the "
"(:ref:`example_surface_from_irregular_data`)."
msgstr ""
"データ点の位置を知るだけではサーフェスを定義することはできません．接続情報も必要です． :func:`surf` および :func:`mesh` "
"関数を使用すると，この接続情報は入力配列の形状から暗黙的に抽出されます．つまり，2D入力配列内の隣接するデータポイントが接続され，データはグリッド上にあります．"
" :func:`triangular_mesh` "
"関数を使用すると，接続性が明示的に指定されます．接続性が定期的でないことはよくありますが，事前にもわかりません．データ点はサーフェス上にあり，暗黙的に定義されたサーフェスをプロットします．("
" :ref:`example_surface_from_irregular_data` "
")に示されているように，`delaunay2d`フィルタは，必要な最近接マッチングと補間を行います．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:146
msgid "3D data"
msgstr "3Dデータ"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:150
msgid "|contour3d|"
msgstr "|contour3d|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:182
msgid "contour3d"
msgstr "contour3d"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:150
msgid ""
":func:`contour3d` |hack| Plot iso-surfaces of volumetric data defined as a "
"3D array."
msgstr ":func:`contour3d` |hack| 3D配列として定義されたボリュームデータの等値面をプロットします．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:155
msgid "|quiver3d|"
msgstr "|quiver3d|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:185
msgid "quiver3d"
msgstr "quiver3d"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:155
msgid ""
":func:`quiver3d` |hack| Plot arrows to represent vectors at data points. The"
" ``x``, ``y``, ``z`` position are specified by numpy arrays, as well as the "
"``u``, ``v``, ``w`` components of the vectors."
msgstr ""
":func:`quiver3d` |hack| データポイントのベクトルを表す矢印をプロットします． ``x``, ``y``, ``z`` "
"の位置は，ベクトルの ``u``, ``v``, ``w`` 成分と同様に，多数の配列によって指定される．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:162
msgid "|flow|"
msgstr "|flow|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:188
msgid "flow"
msgstr "flow"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:162
msgid ""
":func:`flow` |hack| Plot a trajectory of particles along a vector field "
"described by three 3D arrays giving the ``u``, ``v``, ``w`` components on a "
"grid."
msgstr ""
":func:`flow` |hack| 3つの3D配列で記述されたベクトルフィールドに沿って粒子の軌跡をプロットし，グリッド上にe ``u``, "
"``v``, ``w`` 成分を与える．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:168
msgid "|slice|"
msgstr "|slice|"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:191
msgid "slice"
msgstr "slice"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:168
msgid ""
":func:`volume_slice` |hack| Plots an interactive image plane sliced through "
"volumetric data."
msgstr ":func:`volume_slice` |hack| ボリュームデータをスライスしたインタラクティブなイメージプレーンをプロットします．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst-1
msgid "Structured or unstructured data"
msgstr "構造化データまたは非構造化データ"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:177
msgid ""
":func:`contour3d`, :func:`volume_slice` and :func:`flow` require ordered "
"data (to be able to interpolate between the points), whereas "
":func:`quiver3d` works with any set of points. The required structure is "
"detailed in the functions' documentation."
msgstr ""
":func:`contour3d`, :func:`volume_slice` と :func:`flow` "
"は順序付けされたデータ(点と点の間を補間することができます)を必要としますが， :func:`quiver3d` "
"は任意の点のセットで動作します．必要な構造体の詳細については，関数のドキュメントを参照してください．"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:197
msgid ""
"Many richer visualizations can be created by assembling data sources filters"
" and modules. See the :ref:`controlling-the-pipeline-with-mlab-scripts` and "
"the :ref:`mlab-case-studies` sections."
msgstr ""
"データソースのフィルタとモジュールを組み合わせることで，より高度な視覚化を実現できます． :ref:`controlling-the-pipeline-"
"with-mlab-scripts` および :ref:`mlab-case-studies` のセクションを参照してください．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:2
msgid "Changing the looks of the visual objects created"
msgstr "作成したビジュアルオブジェクトの外観を変更する"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:5
msgid "Adding color or size variations"
msgstr "色やサイズのバリエーションを追加する"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "Color"
msgstr "Color"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:8
msgid ""
"The color of the objects created by a plotting function can be specified "
"explicitly using the 'color' keyword argument of the function. This color is"
" then applied uniformly to all the objects created."
msgstr ""
"プロット関数によって作成されたオブジェクトの色は，関数の 'color' "
"キーワード引数を使用して明示的に指定できます．このカラーは，作成されるすべてのオブジェクトに均一に適用されます．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:12
msgid ""
"If you want to vary the color across your visualization, you need to specify"
" scalar information for each data point. Some functions try to guess this "
"information: these scalars default to the norm of the vectors, for functions"
" with vectors, or to the z elevation for functions where it is meaningful, "
"such as :func:`surf` or :func:`barchart`."
msgstr ""
"ビジュアル化全体でカラーを変更する場合は，データポイントごとにスカラー情報を指定する必要があります．関数の中には，この情報を推測しようとするものがあります．これらのスカラーは，ベクトルを持つ関数の場合はベクトルのノルムを，意味のある関数の場合はz仰角をデフォルトとします．"
" :func:`surf` や :func:`barchart` などです．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:18
msgid ""
"This scalar information is converted into colors using the colormap, or also"
" called LUT, for Look Up Table. The list of possible colormaps is::"
msgstr ""
"このスカラー情報は，ルックアップテーブルのカラーマップまたはLUTを使用してカラーに変換されます．可能なコロンマップのリストは次のとおりです．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:34
msgid ""
"The easiest way to choose the colormap, most adapted to your visualization "
"is to use the GUI (as described in the next paragraph). The dialog to set "
"the colormap can be found in the `Colors and legends` node."
msgstr ""
"視覚化に最も適したカラーマップを選択する最も簡単な方法は，GUIを使用することです(次項記載)．カラーマップを設定するダイアログは， `Colors "
"and legends` ノードにあります．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:38
msgid ""
"To use a custom-defined colormap, for the time being, you need to write "
"specific code, as show in :ref:`example_custom_colormap`."
msgstr ""
"カスタム定義のカラーマップを使用するには，当分の間， :ref:`example_custom_colormap` "
"に示すように，特定のコードを記述する必要があります．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "Size of the glyph"
msgstr "字形のサイズ"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:42
msgid ""
"The scalar information can also be displayed in many different ways. For "
"instance it can be used to adjust the size of glyphs positioned at the data "
"points."
msgstr "スカラー情報は，さまざまな方法で表示することもできます．例えば，データポイントに配置された字形のサイズを調整するために使用できます．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:46
msgid ""
"**A caveat: Clamping: relative or absolute scaling** Given six points "
"positioned on a line with interpoint spacing 1::"
msgstr "**注意:クランプ:相対スケーリングまたは絶対スケーリング** ポイント間隔1のライン上に6つのポイントが配置されている場合:"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:53
msgid "If we represent a scalar varying from 0.5 to 1 on this dataset::"
msgstr "このデータセットで0.5から1までのスカラーを表す場合は，次のようになります．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:57
msgid ""
"We represent the dataset as spheres, using :func:`points3d`, and the scalar "
"is mapped to diameter of the spheres::"
msgstr ":func:`points3d` を使ってデータセットを球体として表現し，スカラーを球体の直径にマッピングします．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:63
msgid ""
"By default the diameter of the spheres is not 'clamped', in other words, the"
" smallest value of the scalar data is represented as a null diameter, and "
"the largest is proportional to inter-point distance. The scaling is only "
"relative, as can be seen on the resulting figure:"
msgstr ""
"デフォルトでは，球体の直径は 'clamped' "
"ではありません．つまり，スカラーデータの最小値はNull直径として表され，最大値はポイント間の距離に比例します．スケーリングは相対的なものにすぎません．結果の図を参照してください．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:71
msgid ""
"This behavior gives visible points for all datasets, but may not be desired "
"if the scalar represents the size of the glyphs in the same unit as the "
"positions specified."
msgstr ""
"この動作により，すべてのデータセットに可視ポイントが与えられますが，スカラーが指定された位置と同じ単位でグリフのサイズを表す場合には望ましくないことがあります．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:75
msgid ""
"In this case, you shoud turn auto-scaling off by specifying the desired "
"scale factor::"
msgstr "この場合，希望のスケール係数を指定して，自動スケールをオフにする必要があります．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:84
msgid ""
"In earlier versions of Mayavi (up to 3.1.0 included), the glyphs are not "
"auto-scaled, and as a result the visualization can seem empty due to the "
"glyphs being very small. In addition the minimum diameter of the glyphs is "
"clamped to zero, and thus the glyph are not scaled absolutely, unless you "
"specify::"
msgstr ""
"以前のバージョンのMayavi(最大3.1 "
".0を含む)では，グリフは自動スケールされず，その結果，グリフが非常に小さいため，表示が空に見えることがあります．また，記号の最小直径は0に固定されるため，次のように指定しない限り，記号は絶対的に尺度変更されません．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "More representations of the attached scalars or vectors"
msgstr "付加されたスカラーまたはベクトルのより多くの表現"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:93
msgid ""
"There are many more ways to represent the scalar or vector information "
"attached to the data. For instance, scalar data can be 'warped' into a "
"displacement, e.g. using a `WarpScalar` filter, or the norm of scalar data "
"can be extracted to a scalar component that can be visualized using iso-"
"surfaces with the `ExtractVectorNorm` filter."
msgstr ""
"データにアタッチされたスカラーまたはベクトル情報を表す方法は他にもたくさんあります．例えば，スカラーデータを，例えば， `WarpScalar` "
"フィルタを用いて，変位を `歪める` ことができます．あるいはスカラーデータのノルムを， `ExtractVectorNorm` "
"フィルタを用いた等表面を用いて可視化することができるスカラー成分を抽出することができます．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "Displaying more than one quantity"
msgstr "複数の数量を表示する"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:100
msgid ""
"You may want to display color related to one scalar quantity while using a "
"second for the iso-contours, or the elevation. This is possible but requires"
" a bit of work: see :ref:`example_atomic_orbital`."
msgstr ""
"iso-"
"contoursまたはelevationを使用しながら，1つのスカラー量に関連するカラーを表示することができます．これは可能ですが，少し作業が必要です"
"  :ref:`example_atomic_orbital` を見てください．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:104
msgid ""
"If you simply want to display points with a size given by one quantity, and "
"a color by a second, you can use a simple trick: add the size information "
"using the norm of vectors, add the color information using scalars, create a"
" :func:`quiver3d` plot choosing the glyphs to symmetric glyphs, and use "
"scalars to represent the color::"
msgstr ""
"単に1つの量で指定されたサイズの点を表示し，1秒ごとに色を表示する場合は，ベクトルのノルムを使用してサイズ情報を追加し，スカラーを使用して色情報を追加し，"
" :func:`quiver3d` を作成して，対称グリフを選択し，スカラーを使用して色を表現します．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:119
msgid "Changing the scale and position of objects"
msgstr "オブジェクトの尺度と位置を変更する"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:121
msgid ""
"Each mlab function takes an `extent` keyword argument, that allows to set "
"its (x, y, z) extents. This give both control on the scaling in the "
"different directions and the displacement of the center. Beware that when "
"you are using this functionality, it can be useful to pass the same extents "
"to other modules visualizing the same data. If you don't, they will not "
"share the same displacement and scale."
msgstr ""
"各mlab関数は， (x, y, z)  "
"の範囲を設定することができるキーワード引数を取ります．これにより，異なる方向のスケーリングと中心のディスプレイスメントの両方を制御できます．この機能を使用する場合は，同じデータを表示する他のモジュールに同じエクステントを渡すと便利です．そうしないと，ディスプレイスメントとスケールは共有されません．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:128
msgid ""
"The :func:`surf`, :func:`contour_surf`, and :func:`barchart` functions, "
"which display 2D arrays by converting the values in height, also take a "
"`warp_scale` parameter, to control the vertical scaling."
msgstr ""
"高さの値を変換して2D配列を表示する :func:`surf`, :func:`contour_surf`, および :func:`barchart` "
"関数も，垂直スケーリングを制御するために `warp_scale` パラメータを取ります．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:135
msgid "Changing object properties interactively"
msgstr "オブジェクトのプロパティをインタラクティブに変更する"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:137
msgid ""
"Mayavi, and thus mlab, allows you to interactively modify your "
"visualization."
msgstr "Mayavi，つまりmlabを使用すると，表示をインタラクティブに変更できます．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:140
msgid ""
"The Mayavi pipeline tree can be displayed by clicking on the mayavi icon in "
"the figure's toolbar, or by using :func:`show_pipeline` mlab command. One "
"can now change the visualization using this dialog by double-clicking on "
"each object to edit its properties, as described in other parts of this "
"manual, or add new modules or filters by using this icons on the pipeline, "
"or through the right-click menus on the objects in the pipeline."
msgstr ""
"Mayaviパイプラインツリーを表示するには，フィギュアのツールバーにあるmayaviアイコンをクリックするか， "
":func:`show_pipeline` "
"mlabコマンドを使用します．このマニュアルの他の部分で説明しているように，このダイアログを使用して各オブジェクトをダブルクリックしてそのプロパティを編集することで表示を変更したり，パイプライン上のこのアイコンを使用するか，またはパイプライン内のオブジェクトを右クリックして表示されるメニューを使用して，新しいモジュールまたはフィルタを追加できます．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst-1
msgid "The record feature"
msgstr "レコード機能"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:155
msgid ""
"A **very useful feature** of this dialog can be found by pressing the red "
"round button of the toolbar of the pipeline view. This opens up a recorder "
"that tracks the changes made interactively to the visualization via the "
"dialogs, and generates valid lines of Python code. To find out about "
"navigating through a program in the pipeline, see "
":ref:`organisation_mayavi_visualisations`."
msgstr ""
"このダイアログの **非常に便利な機能** "
"は，パイプラインビューのツールバーにある赤い丸ボタンを押すと表示されます．これにより，ダイアログを介してビジュアル化に対してインタラクティブに行われた変更を追跡するレコーダが開き，Pythonコードの有効な行が生成されます．パイプラインのプログラムをナビゲートする方法については，"
" :ref:`organisation_mayavi_visualisations` を参照してください．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:162
msgid ""
"In addition, for every object returned by a mlab function, "
"``this_object.edit_traits()`` brings up a dialog that can be used to "
"interactively edit the object's properties. If the dialog doesn't show up "
"when you enter this command, please see :ref:`running-mlab-scripts`."
msgstr ""
"さらに，mlab関数が返すすべてのオブジェクトに対して， ``this_object.edit_traits()`` "
"と入力すると，オブジェクトのプロパティをインタラクティブに編集するためのダイアログが表示されます．このコマンドを入力してもダイアログが表示されない場合は，"
" :ref:`running-mlab-scripts` を参照してください．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst-1
msgid "Using ``mlab`` with the full Envisage UI"
msgstr "Envisage UIで ``mlab`` を使う"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:170
msgid ""
"Sometimes it is convenient to write an mlab script but still use the full "
"envisage application so you can click on the menus and use other modules "
"etc.  To do this you may do the following before you create an mlab figure::"
msgstr ""
"mlabスクリプトを作成しても，メニューをクリックして他のモジュールを使用できるように完全な予測アプリケーションを使用すると便利な場合があります．これを行うには，mlabの図を作成する前に次の操作を実行します．"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:180
msgid ""
"This will give you the full-fledged UI instead of the default simple window."
msgstr "これにより，デフォルトの単純なウィンドウではなく，完全なUIが得られます．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:3
msgid "Figures, legends, camera and decorations"
msgstr "図，凡例，カメラ，デコレーション"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:6
msgid "Handling several figures"
msgstr "複数の図を処理する"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:8
msgid ""
"All mlab functions operate on the current scene, that we also call "
":func:`figure`, for compatibility with matlab and pylab. The different "
"figures are indexed by key that can be an integer or a string. A call to the"
" :func:`figure` function giving a key will either return the corresponding "
"figure, if it exists, or create a new one. The current figure can be "
"retrieved with the :func:`gcf` function. It can be refreshed using the "
":func:`draw` function, saved to a picture file using :func:`savefig` and "
"cleared using :func:`clf`."
msgstr ""
"すべてのmlab関数は，matlabとpylabとの互換性を保つために， "
":func:`figure`とも呼ぶ現在のシーンで動作します．異なる図は，整数または文字列のキーによってインデックスが付けられます． "
":func:`figure` 関数を呼び出してキーを指定すると，対応する図が存在する場合はそれを返すか，新しい図を作成します．現在の図は， "
":func:`gcf` 関数で検索できます．これは:func:`draw`関数を使ってリフレッシュでき， :func:`savefig` "
"を使って画像ファイルに保存し， :func:`clf` を使って消去できます．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:19
msgid "Figure decorations"
msgstr "図のデコレーション"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:21
msgid ""
"Axes can be added around a visualization object with the :func:`axes` "
"function, and the labels can be set using the :func:`xlabel`, :func:`ylabel`"
" and :func:`zlabel` functions. Similarly, :func:`outline` creates an outline"
" around an object. :func:`title` adds a title to the figure."
msgstr ""
"軸は :func:`axes` 関数を使って可視化オブジェクトの周りに追加でき，ラベルは :func:`xlabel`, :func:`ylabel` "
":func:`zlabel` 関数を使って設定できます．同様に， :func:`outline` はオブジェクトの周りにアウトラインを作成します． "
":func:`title` は図形にタイトルを追加します．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:26
msgid ""
"Color bars can be used to reflect the color maps used to display values "
"(LUT, or lookup tables, in VTK parlance). :func:`colorbar` creates a color "
"bar for the last object created, trying to guess whether to use the vector "
"data or the scalar data color maps. The :func:`scalarbar` and "
":func:`vectorbar` function scan be used to create color bars specifically "
"for scalar or vector data."
msgstr ""
"カラーバーは，値の表示に使用されるカラーマップを反映するために使用できます(VTK用語でのLUTまたはルックアップテーブル)． "
":func:`colorbar` "
"は，最後に作成されたオブジェクトのカラーバーを作成し，ベクトルデータとスカラデータのカラーマップのどちらを使用するかを推測します． "
":func:`scalarbar` および :func:`vectorbar` "
"関数スキャンを使用して，スカラーまたはベクトルデータ専用のカラーバーを作成します．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:33
msgid ""
"A small *xyz* triad can be added to the figure using "
":func:`orientation_axes`."
msgstr "小さな *xyz* 座標系を図形に追加するには， :func:`orientation_axes` を使用します．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:36
msgid ""
"The :func:`orientation_axes` was named `orientationaxes` before release 3.2."
msgstr ":func:`orientation_axes` はリリース3.2以前は `orientationaxes` という名前でした．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:40
msgid "Moving the camera"
msgstr "カメラを移動する"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:42
msgid ""
"The position and direction of the camera can be set using the :func:`view` "
"function. They are described in terms of Euler angles and distance to a "
"focal point. The :func:`view` function tries to guess the right roll angle "
"of the camera for a pleasing view, but it sometimes fails. The :func:`roll` "
"explicitly sets the roll angle of the camera (this can be achieve "
"interactively in the scene by pressing down the control key, while dragging "
"the mouse, see :ref:`interaction-with-the-scene`)."
msgstr ""
"カメラの位置と方向は， :func:`view` 関数を使用して設定できます．オイラー角と焦点までの距離で記述した． :func:`view` "
"関数は，ビューを見やすくするためにカメラの右ロール角を推測しようとしますが，失敗することがあります． :func:`roll` "
"は，カメラのロール角度を明示的に設定します(これは，コントロールキーを押しながらマウスをドラッグすることで，シーン内でインタラクティブに行うことができます．"
" :ref:`interaction-with-the-scene` を参照してください．)．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:50
msgid ""
"The :func:`view` and :func:`roll` functions return the current values of the"
" different angles and distances they take as arguments. As a result, the "
"view point obtained interactively can be stored and reset using::"
msgstr ""
":func:`view` と :func:`roll` "
"関数は，引数として取る角度と距離の現在値を返します．その結果，対話的に取得した視点は，以下を使用して保存およびリセットできます．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst-1
msgid "Rotating the camera around itself"
msgstr "カメラの回転"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:64
msgid ""
"You can also rotate the camera around itself using the `roll`, `yaw` and "
"`pitch` methods of the camera object. This moves the focal point::"
msgstr ""
"また，カメラオブジェクトの `roll`，`yaw` ，`pitch` "
"メソッドを使用して，カメラを自分自身の周りで回転させることもできます．これにより，焦点が移動します．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:71
msgid ""
"Unlike the :func:`view` and :func:`roll` function, the angles are "
"incremental, and not absolute."
msgstr ":func:`view` および :func:`roll` 関数とは異なり，角度は増分であり，絶対角度ではありません．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst-1
msgid "Modifying zoom and view angle"
msgstr "ズームとビュー角度を修正する"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:76
msgid ""
"The camera is entirely defined by its position, its focal point, and its "
"view angle (attributes 'position', 'focal_point', 'view_angle'). The camera "
"method 'zoom' changes the view angle incrementally by the specify ratio, "
"where as the method 'dolly' translates the camera along its axis while "
"keeping the focal point constant. The :func:`move` function can also be "
"useful in these regards."
msgstr ""
"カメラは，その位置，焦点，ビュー角度( 'position' ,  'focal_point' , 'view_angle' "
"属性)によって完全に定義されます．カメラを使用する方法 'zoom' では，指定した比率の分だけビュー角度が変化します．この方法 'dolly' "
"では，焦点を一定に保ちながら，カメラが軸に沿って移動します． :func:`move` 関数もこれらの点で有用です．"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:83
msgid "Camera parallel scale"
msgstr "カメラの平行スケール"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:85
msgid ""
"In addition to the information returned and set by mlab.view and mlab.roll, "
"a last parameter is needed to fully define the view point: the parallel "
"scale of the camera, that control its view angle. It can be read (or set) "
"with the following code::"
msgstr ""
"mlab.view と mlab.roll "
"によって返され設定される情報に加えて，ビューポイントを完全に定義するには，最後のパラメータはビュー角度を制御するカメラの平行スケールです．次のコードで読み取る(または設定する)ことができます．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:4
msgid "Running mlab scripts"
msgstr "mlabスクリプトの実行"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:6
msgid ""
"Mlab, like the rest of Mayavi, is an interactive application. If you are not"
" already in an interactive environment (see next paragraph), to interact "
"with the figures or the rest of the drawing elements, you need to use the "
":func:`show` function. For instance, if you are writing a script, you need "
"to call :func:`show` each time you want to display one or more figures and "
"allow the user to interact with them."
msgstr ""
"Mlabは他のMayavi同様，インタラクティブなアプリケーションです．インタラクティブ環境(次の段落を参照)に入っていない場合は， "
":func:`show` "
"関数を使用して，図形やその他の図形要素を操作する必要があります．例えば，スクリプトを作成している場合，1つまたは複数の図形を表示し，ユーザがそれらを操作できるようにするには，その都度"
" :func:`show` を呼び出す必要があります．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:14
msgid "Using mlab interactively"
msgstr "mlabを対話的に使用する"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:16
msgid ""
"Using IPython_, mlab instructions can be run interactively, or in scripts "
"using IPython_'s ``%run`` command::"
msgstr ""
"IPython_ を使用すると， mlab 命令をインタラクティブに実行できます．また， IPython_'s ``%run`` "
"コマンドを使用してスクリプト内で実行することもできます．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:21
msgid ""
"You need to start IPython_ with the `--gui=qt` option. In this environment, "
"the plotting commands are interactive: they have an immediate effect on the "
"figure, alleviating the need to use the :func:`show` function."
msgstr ""
"`--gui=qt` オプションを指定して IPython_ "
"を起動する必要があります．この環境では，プロットコマンドはインタラクティブです．これらのコマンドは図形に即座に影響を与え， :func:`show` "
"関数を使用する必要性を軽減します．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:28
msgid ""
"Mlab can also be used interactively in the Python shell of the mayavi2 "
"application, or in any interactive Python shell of wxPython-based "
"application (such as other Envisage-based applications, or SPE, Stani's "
"Python Editor)."
msgstr ""
"mlabは，mayavi2アプリケーションのPythonシェル，またはwxPythonベースのアプリケーション(他のEnvisageベースのアプリケーションやSPEなど，Stani氏のPython"
" Editor)の任意のインタラクティブPythonシェルで，インタラクティブに使用することもできます．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:34
msgid "Using together with Matplotlib"
msgstr "Matplotlibとの併用"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:36
msgid ""
"If you want to use Matplotlib's interactive plotting with Mayavi's mlab in "
"IPython you should:"
msgstr "IPythonでMatplotlibの対話型プロットをMayaviのmlabで使用する場合は，次の操作を実行します．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:39
msgid "start IPython with::"
msgstr "次のコマンドでIPythonを起動します．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:43
msgid "alternatively, start IPython with the `--gui=qt` option::"
msgstr "もしくは， `--gui=qt` オプションを指定してIPythonを起動します．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:47
msgid ""
"and **before** importing any matplotlib modules, enter the following Python "
"commands::"
msgstr "およびmatplotlibモジュールをインポートする **前** に，次のPythonコマンドを入力します．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:54
msgid "one could also use the ``--pylab`` option to IPython as follows::"
msgstr "以下のようにIPythonに対して ``--pylab`` オプションを使うこともできます．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:60
msgid ""
"If you want matplotlib and mlab to work together by default in IPython, you "
"can change you default matplotlib backend, by editing the "
"`~/.matplotlib/matplotlibrc` to add the following line::"
msgstr ""
"デフォルトでIPythonでmatplotlibとmlabを一緒に動作させるには，デフォルトのmatplotlibバックエンドを変更します． "
"`~/matplotlib/matplotlibrc` に次の行を追加します．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:66
msgid ""
"If for some reason, the Qt backend does not work, you can use the wx "
"backend.  To do this you may do::"
msgstr "何らかの理由でQtバックエンドが動作しない場合は，wxバックエンドを使用します．これを行うには，次の操作を行います．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:72
msgid ""
"Note that as far as Mayavi is concerned, it chooses the appropriate toolkit "
"using the ``ETS_TOOLKIT`` environment variable.  If this is not set, the "
"supported toolkits are tried in a version-dependent order until one "
"succeeds.  With recent releases of traitsui_, the default is Qt.  The "
"possible options for ``ETS_TOOLKIT`` are:"
msgstr ""
"Mayaviに関する限り， ``ETS_TOOLKIT`` "
"環境変数を使用して適切なツールキットを選択します．これが設定されていない場合，サポートされているツールキットは，成功するまでバージョン依存の順序で試行されます．"
" traitsui_ の最近のリリースでは，デフォルトはQtです． ``ETS_TOOLKIT`` のオプションは以下のとおりです．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:78
msgid "`qt4`: to use the Qt backend (either PySide or PyQt4),"
msgstr "`qt4`: Qtバックエンドを使う場合(PySideまたはPyQt4)，"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:79
msgid "`wx`: to use wxPython,"
msgstr "`wx`: wxPythonを使うには"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:80
msgid "`null`: to use no UI toolkit."
msgstr "`null`:UI ツールキットを使用しない．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst-1
msgid "Capturing mlab plots to integrate in pylab"
msgstr "pylabに組み込むためのmlabプロットのキャプチャ"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:86
msgid ""
"Starting from Mayavi version 3.4.0, the mlab :func:`screenshot` can be used "
"to take a screenshot of the current figure, to integrate in a matplotlib "
"plot."
msgstr ""
"Mayaviバージョン3.4 "
".0以降，mlab:func:`screenshot`を使用して現在のフィギュアのスクリーンショットを撮り，matplotlibプロットに統合できます．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:91
msgid "In scripts"
msgstr "スクリプト内"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:93
msgid ""
"Mlab commands can be written to a file, to form a script. This script can be"
" loaded in the Mayavi application using the *File->Open file* menu entry, "
"and executed using the *File->Refresh code* menu entry or by pressing "
"``Control-r``.  It can also be executed during the start of the Mayavi "
"application using the ``-x`` command line switch."
msgstr ""
"mlabコマンドをファイルに書き込み，スクリプトを作成することができます．このスクリプトをMayaviアプリケーションにロードするには， "
"*File->Open file* メニューエントリを使用し， *File->Refresh code* メニューエントリを使用するか，または  "
"``Control-r`` キーを押します．また， ``-x`` "
"コマンドラインスイッチを使用して，Mayaviアプリケーションの起動中に実行することもできます．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:99
msgid ""
"As mentioned above, when running outside of an interactive environment, for "
"instance with `python myscript.py`, you need to call the :func:`show` "
"function (as shown in the demo_ above) to pause your script and have the "
"user interact with the figure."
msgstr ""
"前述したように，インタラクティブ環境の外で実行する場合は，たとえば `python myscript.py` "
"を使用します．スクリプトを一時停止し，ユーザが図を操作できるようにするには， :func:`show` "
"関数(上のデモに示されているように)を呼び出す必要があります．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:107
msgid ""
"You can also use :func:`show` to decorate a function, and have it run in the"
" event-loop, which gives you more flexibility::"
msgstr ""
"次のように :func:`show` を使用して関数を修飾し，event-loopで実行させることもできます．これにより，柔軟性が増します．"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:117
msgid ""
"With this decorator, each time the `image` function is called, `mlab` makes "
"sure an interactive environment is running before executing the `image` "
"function. If an interactive environment is not running, `mlab` will start "
"one and the image function will not return until it is closed."
msgstr ""
"このデコレータにより，  `image` 関数が呼び出されるたびに，  `mlab` は， `image` "
"関数を実行する前に対話環境が実行されていることを確認します．対話型環境が実行されていない場合は， `mlab` "
"が起動し，イメージ関数は閉じられるまで戻りません．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:5
msgid "Animating the data"
msgstr "データのアニメート"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:7
msgid ""
"Often it isn't sufficient to just plot the data.  You may also want to "
"change the data of the plot and update the plot without having to recreate "
"the entire visualization, for instance to do animations, or in an "
"interactive application. Indeed, recreating the entire visualization is very"
" inefficient and leads to very jerky looking animations. To do this, mlab "
"provides a very convenient way to change the data of an existing mlab "
"visualization.  Consider a very simple example.  The "
"`mlab.test_simple_surf_anim` function has this code::"
msgstr ""
"多くの場合，データをプロットするだけでは不十分です．また，アニメーションを実行したり，インタラクティブアプリケーションで表示全体を再作成しなくても，プロットのデータを変更してプロットを更新できます．実際，ビジュアライゼーション全体を再現するのは非常に非効率的で，非常にぎくしゃくしたアニメーションになります．これを行うために，mlabは既存のmlab可視化のデータを変更する非常に便利な方法を提供します．非常に簡単な例を考えてみましょう．`mlab.test_simple_surf_anim`"
" 関数のコードは次の通りです．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:24
msgid ""
"The first two lines define a simple plane and view that.  The next three "
"lines animate that data by changing the scalars producing a plane that "
"rotates about the origin.  The key here is that the `s` object above has a "
"special attribute called `mlab_source`.  This sub-object allows us to "
"manipulate the points and scalars.  If we wanted to change the `x` values we"
" could set that too by::"
msgstr ""
"最初の2つの線分は単純な平面を定義し，それを表示します．次の3行は，原点を中心に回転する平面を生成するスカラを変更することによって，そのデータをアニメートします．ここで重要なのは，上記の"
" `s` オブジェクトが `mlab_source` "
"という特別な属性を持っていることです．このサブオブジェクトを使用すると，ポイントとスカラーを操作できます． `x` "
"の値を変更したい場合は，以下のように設定します．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:33
msgid ""
"The only thing to keep in mind here is that the shape of `x` should not be "
"changed."
msgstr "ここで注意しなければならないのは， `x` の形を変えてはならないということだけです．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:36
msgid ""
"Note that many of the examples discussed here may not appear to be animated "
"at all and you may just see the final state of the animation. If you save a "
"screenshot of the image at each stage of the animation, you would get the "
"correct result.  However, you will not get the visual effect on screen.  See"
" the section :ref:`animating_a_visualization` to learn more on the use of "
"the `@animate` decorator (:func:`mayavi.mlab.animate`) to achieve this. We "
"show a small example here, where we rewrite the above to animate nicely::"
msgstr ""
"ここで説明する例の多くは，まったくアニメートされていないように見え，アニメーションの最終的な状態を確認できる場合があります．アニメーションの各段階でイメージのスクリーンショットを保存すると，正しい結果が得られます．ただし，画面上での視覚効果は得られません．"
" `@animate` デコレータ (:func:`mayavi.mlab.animate`) を使ってこれを実現する方法については， "
":ref:`animating_a_visualization` "
"の節を見てください．ここでは，アニメーションを適切に作成するために上記を書き直した小さな例を示します．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:61
msgid ""
"In the above, note that we wrap the iteration in a function which is a "
"generator and decorate it with the `@mlab.animate` decorator."
msgstr ""
"上記では，ジェネレーターである関数に繰り返しをラップし，それを `@mlab.animate` デコレータで装飾していることに注意してください．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:64
msgid ""
"If multiple values have to be changed, you can use the `set` method of the "
"`mlab_source` to set them as shown in the more complicated example below::"
msgstr ""
"複数の値を変更する必要がある場合は，  `mlab_source` の `set` メソッドを使用して，以下のより複雑な例のように値を設定できます．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:89
msgid ""
"Notice the use of the `set` method above. With this method, the "
"visualization is recomputed only once.  In this case, the shape of the new "
"arrays has not changed, only their values have.  If the shape of the array "
"changes then one should use the `reset` method as shown below::"
msgstr ""
"上記の `set` "
"メソッドの使用に注意してください．この方法では，表示は1回だけ再計算されます．この場合，新しい配列の形は変更されず，値だけが変更されます．配列の形状を変化させる場合は，次に示すように"
" `reset` メソッドを使用する必要があります．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:106
msgid ""
"Many standard examples for animating data are provided with mlab.  Try the "
"examples with the name `mlab.test_<name>_anim`, i.e. where the name ends "
"with an `_anim` to see how these work and run."
msgstr ""
"mlabには，データをアニメートするための標準的なサンプルが多数用意されています． `mlab.test_<name>_anim` "
"という名前のサンプルを試してみてください．例えば，名前の最後に `_anim` を付けて，これらがどのように動作するかを確認します．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:114
msgid ""
"It is important to remember distinction between `set` and `reset`. Use `set`"
" or directly set the attributes (`x`, `y`, `scalars` etc.) when you are not "
"changing the shape of the data but only the values. Use `reset` when the "
"arrays are changing shape and size.  Reset usually regenerates all the data "
"and can be inefficient when compared to `set` or directly setting the "
"traits."
msgstr ""
"`set` と `reset` の区別を覚えておくことが重要です．データの形を変更せずに値だけを変更する場合は， `set` "
"を使用するか，属性を直接設定します( `x`, `y`, `scalars` など)．配列の形や大きさが変化している場合は `reset` "
"を使用してください．通常，resetはすべてのデータを再生成するので， `set` やtraitを直接設定する場合に比べて効率が悪い場合があります．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:123
msgid ""
"When creating a Mayavi pipeline, as explained in the following subsection, "
"instead of using ready-made plotting function, the `mlab_source` attribute "
"is created only on sources created via `mlab`. Pipeline created entirely "
"using `mlab` will present this attribute."
msgstr ""
"Mayaviパイプラインを作成する場合，次のサブセクションで説明するように，既製のプロット関数を使用する代わりに， `mlab_source` "
"アトリビュートは `mlab` を使用して作成されたソース上にのみ作成されます． `mlab` "
"を使用して完全に作成されたパイプラインは，この属性を表示します．"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:131
msgid ""
"If you are animating several plot objects, each time you modify the data "
"with there `mlab_source` attribute, Mayavi will trigger a refresh of the "
"scene. This operation might take time, and thus slow your animation. In this"
" case, the tip :ref:`acceleration_mayavi_scripts` may come in handy."
msgstr ""
"複数のプロットオブジェクトをアニメートする場合， `mlab_source` "
"アトリビュートを使用してデータを変更するたびに，Mayaviはシーンのリフレッシュをトリガします．この操作には時間がかかる場合があるため，アニメーションが遅くなります．この場合，"
" :ref:`acceleration_mayavi_scripts` が役に立つでしょう．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:4
msgid "Assembling pipelines with `mlab`"
msgstr "`mlab` によるパイプラインの組み立て"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:7
msgid ""
"The plotting functions reviewed above explore only a small fraction of the "
"visualization possibilities of Mayavi. The full power of Mayavi can only be "
"unleashed through the control of the pipeline itself. As described in the "
":ref:`an-overview-of-mayavi` section, a visualization in Mayavi is created "
"by loading the data in Mayavi with `data source` object, optionally "
"transforming the data through :ref:`filters`, and visualizing it with "
":ref:`modules`. The mlab functions build complex pipelines for you in one "
"function, making the right choice of sources, filters, and modules, but they"
" cannot explore all the possible combinations."
msgstr ""
"上でレビューしたプロット関数は，Mayaviの視覚化の可能性のほんの一部です．Mayavi の力は，パイプライン自体の制御を通じてのみ発揮されます． "
":ref:`an-overview-of-mayavi` セクションで説明されているように，Mayaviのビジュアライゼーションは，  `data "
"source` オブジェクトを使用してMayaviのデータをロードし， :ref:`filters` を使用してオプションでデータを変換し， "
":ref:`modules` "
"を使用してビジュアライゼーションします．mlab関数は，1つの関数で複雑なパイプラインを構築し，ソース，フィルタ，モジュールを適切に選択しますが，可能なすべての組み合わせを調べることはできません．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:18
msgid ""
"Mlab provides a sub-module `pipeline` which contains functions to populate "
"the pipeline easily from scripts. This module is accessible in `mlab`: "
"`mlab.pipeline`, or can be imported from `mayavi.tools.pipeline`."
msgstr ""
"Mlabは，スクリプトからパイプラインを容易に生成する関数を含むサブモジュール `pipeline` を提供します．このモジュールは `mlab`: "
"`mlab.pipeline` でアクセスできます．または `mayavi.tools.pipeline` からインポートできます．ツール．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:23
msgid ""
"When using an `mlab` plotting function, a pipeline is created: first a "
"source is created from `numpy` arrays, then modules, and possibly filters, "
"are added. The resulting pipeline can be seen for instance with the "
"`mlab.show_pipeline` command. This information can be used to create the "
"very same pipeline directly using the `pipeline` scripting module, as the "
"names of the functions required to create each step of the pipeline are "
"directly linked to the default names of the objects created by `mlab` on the"
" pipeline. As an example, let us create a visualization using :func:`surf`::"
msgstr ""
"`mlab` プロット関数を使用すると，パイプラインが作成されます．最初に `numpy` "
"配列からソースが作成され，次にモジュール，場合によってはフィルタが追加されます．結果のパイプラインは，例えば `mlab.show_pipeline` "
"で見ることができます．パイプラインの各ステップを作成するために必要な関数の名前は，パイプライン上の `mlab` "
"によって作成されたオブジェクトのデフォルト名に直接リンクされているので，この情報を使用して，  `pipeline` "
"スクリプトモジュールを使用して，まったく同じパイプラインを直接作成することができます．例として， :func:`surf` を示します．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:39
msgid "The following pipeline is created::"
msgstr "次のパイプラインが作成されます．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:47
msgid "The same pipeline can be created using the following code::"
msgstr "次のコードを使用して，同じパイプラインを作成できます．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:57
msgid "Data sources"
msgstr "データソース"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:61
msgid ""
"The `mlab.pipeline` module contains functions for creating various data "
"sources from arrays. They are fully documented in details in the :ref:`mlab-"
"pipeline-reference`. We give a small summary of the possibilities here."
msgstr ""
"`mlab.pipeline` モジュールには，配列からさまざまなデータソースを作成するための関数が含まれています．詳細については， "
":ref:`mlab-pipeline-reference` に完全に文書化されています．ここでは，その可能性について簡単に説明します．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:66
msgid ""
"Mayavi distinguishes sources with **scalar data**, and sources with **vector"
" data**, but more important, it has different functions to create sets of "
"**unconnected points**, with data attached to them, or **connected data "
"points** describing continuously varying quantities that can be interpolated"
" between data points, often called `fields` in physics or engineering."
msgstr ""
"Mayaviは， **スカラーデータ** を持つソースと **ベクトルデータ** を持つソースを区別しますが，より重要なのは， "
"**接続されていないポイント** のセットを作成してデータをアタッチする機能と， **接続されたデータポイント** "
"を作成してデータポイント間で補間できる連続的に変化する量を記述する機能です．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "Unconnected sources"
msgstr "接続されていないソース"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:77
msgid ":func:`scalar_scatter` (creates a :ref:`poly_data`)"
msgstr ":func:`scalar_scatter` ( :ref:`poly_data` を作成)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:82
msgid ":func:`vector_scatter` (creates an :ref:`poly_data`)"
msgstr ":func:`vector_scatter` ( :ref:`poly_data` を作成)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "implicitly-connected sources"
msgstr "暗黙的に接続されたソース"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:91
msgid ":func:`scalar_field` (creates an :ref:`image_data`)"
msgstr ":func:`scalar_field` ( :ref:`image_data` を作成します)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:96
msgid ":func:`vector_field` (creates an :ref:`image_data`)"
msgstr ":func:`vector_field` (  :ref:`image_data` を作成します)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:101
msgid ":func:`array2d_source` (creates an :ref:`image_data`)"
msgstr ":func:`array2d_source` ( :ref:`image_data` を作成します)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "Explicitly-connected sources"
msgstr "明示的に接続されたソース"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:110
msgid ":func:`line_source` (creates an :ref:`poly_data`)"
msgstr ":func:`line_source` ( :ref:`poly_data` を作成)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:115
msgid ":func:`triangular_mesh_source` (creates an :ref:`poly_data`)"
msgstr ":func:`triangle_mesh_source` ( :ref:`poly_data` を作成)"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:120
msgid ""
"All the `mlab.pipline` source factories are functions that take numpy arrays"
" and return the Mayavi source object that was added to the pipeline. "
"However, the implicitly-connected sources require well-shaped arrays as "
"arguments: the data is supposed to lie on a regular, orthogonal, grid of the"
" same shape as the shape of the input array, in other words, the array "
"describes an image, possibly 3 dimensional."
msgstr ""
"すべての `mlab.pipline` "
"のソースファクトリは，numpy配列を取り，パイプラインに追加されたMayaviソースオブジェクトを返す関数です．ただし，暗黙に接続されたソースは引数として整形式の配列を必要とします．つまり，データは入力配列の形状と同じ形状の規則的な直交グリッド上に存在することになります．つまり，配列は3次元のイメージを表します．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:129
msgid ""
"More complicated data structures can be created, such as irregular grids or "
"non-orthogonal grid. See :ref:`the section on data structures <data-"
"structures-used-by-mayavi>`."
msgstr ""
"不規則格子または非直交格子のような，より複雑なデータ構造を作成することができる．関連項目 :ref:`the section on data "
"structures <data-structures-used-by-mayavi>` ．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:135
msgid "Modules and filters"
msgstr "モジュールとフィルタ"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:137
msgid ""
"For each Mayavi module or filter (see :ref:`modules` and :ref:`filters`), "
"there is a corresponding `mlab.pipeline` function. The name of this function"
" is created by replacing the alternating capitals in the module or filter "
"name by underscores. Thus `ScalarCutPlane` corresponds to "
"`scalar_cut_plane`."
msgstr ""
"各Mayaviモジュールまたはフィルタ( :ref:`modules` および :ref:`filters` )には，対応する "
"`mlab.pipeline` "
"関数．この関数の名前は，モジュールまたはフィルタ名の大文字と小文字が交互に入れ替わることによって作成されます．したがって， "
"`ScalarCutPlane` は `scalar_cut_plane` に相当します．"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:143
msgid ""
"In general, the `mlab.pipeline` module and filter factory functions simply "
"create and connect the corresponding object. However they can also contain "
"addition logic, exposed as keyword arguments. For instance they allow to set"
" up easily a colormap, or to specify the color of the module, when relevant."
" In accordance with the goal of the `mlab` interface to make frequent "
"operations simple, they use the keyword arguments to choose the properties "
"of the created object to suit the requirements. It can be thus easier to use"
" the keyword arguments, when available, than to set the attributes of the "
"objects created. For more information, please check out the docstrings. "
"Full, detailed, usage examples are given in the next subsection."
msgstr ""
"一般的には `mlab.pipeline` "
"モジュールとフィルタファクトリー関数は，対応するオブジェクトを作成して接続するだけです．ただし，キーワード引数として公開される追加ロジックを含めることもできます．たとえば，必要に応じて，簡単にカラーマップを設定したり，モジュールの色を指定したりできます．頻繁な操作を簡単にするための"
" `mlab` "
"インタフェースの目的に従って，キーワード引数を使用して，作成されたオブジェクトのプロパティを要件に合うように選択します．したがって，作成されたオブジェクトの属性を設定するよりも，キーワード引数を使用する方が簡単です．詳細については，docstringsを参照してください．完全で詳細な使用例については，次のサブセクションで説明します．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:4
msgid "Case studies of some visualizations"
msgstr "視覚化の事例"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:7
msgid "Visualizing volumetric scalar data"
msgstr "ボリュームスカラーデータの視覚化"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:11
msgid ""
"There are three main ways of visualizing a 3D scalar field. Given the "
"following field::"
msgstr "3Dスカラーフィールドを可視化するには，主に3つの方法があります．次のフィールドを指定します．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Iso-Surfaces"
msgstr "等値面"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:21
msgid ""
"To display iso surfaces of the field, the simplest solution is simply to use"
" the ``mlab`` :func:`contour3d` function::"
msgstr "フィールドの等値面を表示する最も簡単な方法は ``mlab``  :func:`contour3d` 関数を使用することです．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:26
msgid "|volumetric_contour3d|"
msgstr "|volumetric_contour3d|"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:121
msgid "volumetric_contour3d"
msgstr "volumetric_contour3d"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:28
msgid ""
"The problem with this method is that the outer iso-surfaces tend to hide "
"inner ones. As a result, quite often only one iso-surface can be visible."
msgstr "この方法の問題は，外側の等値面が内側の等値面を隠す傾向があることです．その結果，1つの等値面しか表示されないことがよくあります．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Volume rendering"
msgstr "ボリュームレンダリング"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:34
msgid ""
"Volume rendering is an advanced technique in which each voxel is given a "
"partly transparent color. This can be achieved with `mlab.pipeline` using "
"the :func:`scalar_field` source, and the `volume` module::"
msgstr ""
"ボリュームレンダリングは，各ボクセルに部分的に透明なカラーを与える高度なテクニックです．これは `mlab.pipeline` で実現できます． "
":func:`scalar_field` ソースと `volume` モジュールを使用します．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:41
msgid "|volumetric_volume|"
msgstr "|volumetric_volume|"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:123
msgid "volumetric_volume"
msgstr "volumetric_volume"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:43
msgid ""
"For such a visualization, tweaking the opacity transfer function is critical"
" to achieve a good effect. Typically, it can be useful to limit the lower "
"and upper values to the 20 and 80 percentiles of the data, in order to have "
"a reasonable fraction of the volume transparent::"
msgstr ""
"このような視覚化では，良好な効果を得るために不透明度の転送関数を微調整することが重要です．通常，ボリュームの透過性を適切な割合にするには，下限値と上限値をデータの80パーセンタイルと20パーセンタイルに制限すると便利です．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:51
msgid "|volumetric_volume_tweaked|"
msgstr "|volumetric_volume_tweaked|"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:125
msgid "volumetric_volume_tweaked"
msgstr "volumetric_volume_tweaked"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:53
msgid ""
"It is useful to open the module's dialog (eg through the pipeline interface,"
" or using it's `edit_traits()` method) and tweak the color transfer function"
" to render the transparent low-intensity regions of the image. **For this "
"module, the LUT as defined in the** `Colors and legends` **node are not "
"used.**"
msgstr ""
"モジュールのダイアログボックス(例えば，パイプラインインターフェースを使ったり， `edit_traits()` "
"メソッドを使ったりします．)を開き，カラー転送関数を調整してイメージの透明で低強度の領域をレンダリングすると便利です． **このモジュール** "
"では，** `Colors and Legends` ** ノードで定義されているLUTは使用されません．**"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:59
msgid ""
"The limitations of volume rendering is that, while it is often very pretty, "
"it can be difficult to analyze the details of the field with it."
msgstr "ボリュームレンダリングの限界は，多くの場合非常にきれいですが，それを使用してフィールドの詳細を分析することが難しいことです．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Cut planes"
msgstr "切断面"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:66
msgid ""
"While less impressive, cut planes are a very informative way of visualizing "
"the details of a scalar field::"
msgstr "あまり印象的ではありませんが，断面はスカラーフィールドの詳細を視覚化するための非常に有益な方法です．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:79
msgid ""
"Image plane widgets can also being created from NumPy arrays using the "
"``mlab`` :func:`volume_slice` function::"
msgstr ""
"イメージプレーンウィジェットは， ``mlab`` :func:`volume_slice` 関数を使用してNumPy配列から作成することもできます．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:84
msgid "|volumetric_cut_plane|"
msgstr "|volumetric_cut_plane|"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:127
msgid "volumetric_cut_plane"
msgstr "volumetric_cut_plane"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:86
msgid ""
"The image plane widget can only be used on regular-spaced data, as created "
"by `mlab.pipeline.scalar_field`, but it is very fast. It should thus be "
"prefered to the scalar cut plane, when possible."
msgstr ""
"イメージプレーンウィジェットは， `mlab.pipeline.scalar_field` "
"によって作成された正規の間隔のデータでのみ使用できます．したがって，可能な場合はスカラー切断面を優先する必要があります．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:90
msgid ""
"Clicking and dragging the cut plane is an excellent way of exploring the "
"field."
msgstr "切断面をクリックしてドラッグすると，フィールドを効率的に表示できます．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "A combination of techniques"
msgstr "技術の組み合わせ"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:94
msgid ""
"Finally, it can be interesting to combine cut planes with iso-surfaces and "
"thresholding to give a view of the peak areas using the iso-surfaces, "
"visualize the details of the field with the cut plane, and the global mass "
"with a large iso-surface::"
msgstr ""
"最後に，切断面を等値面と組み合わせて，等値面を使用してピーク領域のビューを表示したり，切断面を使用してフィールドの詳細を視覚化したり，等値面が大きいグローバル質量を表示したりすることもできます．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:108
msgid "|volumetric_combination|"
msgstr "|volumetric_combination|"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:129
msgid "volumetric_combination"
msgstr "volumetric_combination"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:111
msgid ""
"In the above example, we have used the pipeline syntax of mayavi instead of "
"using :func:`contour3d` and :func:`volume_slice` in order to use a single "
"scalar field as data source."
msgstr ""
"上記の例では，データソースとして単一のスカラーフィールドを使用するために， :func:`contour3d` と "
":func:`volume_slice` の代わりにmayaviのパイプライン構文を使用しています．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:115
msgid ""
"In some cases, though not in our example, it might be usable to insert a "
"threshold filter before the cut plane, eg:to remove area with values below "
"'s.min()+0.1*s.ptp()'. In this case, the cut plane needs to be implemented "
"with `mlab.pipeline.scalar_cut_plane` as the data looses its structure after"
" thresholding."
msgstr ""
"この例では使用しませんが，場合によっては，切断面の前にしきい値フィルタを挿入して，たとえば，の値より小さい領域を削除することができます． "
"'s.min()+0.1*s.ptp()' となります．この場合，切断面は `mlab.pipeline.scalar_cut_plane` "
"で実装する必要があります．しきい値を設定した後でデータの構造体が失われた場合に使用されます．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:132
msgid "Visualizing a vector field"
msgstr "ベクトルフィールドの視覚化"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:140
msgid ""
"A vector field, i.e., vectors continuously defined in a volume, can be "
"difficult to visualize, as it contains a lot of information. Let us explore "
"different visualizations for the velocity field of a multi-axis convection "
"cell [1]_, in hydrodynamics, as defined by its components sampled on a grid,"
" `u`, `v`, `w`::"
msgstr ""
"ベクトルフィールド，すなわちボリューム内で連続的に定義されたベクトルは，多くの情報を含んでいるため，視覚化が困難な場合があります．グリッド , `u`,"
" `v`, `w` でサンプリングされた構成要素によって定義される，流体力学における多軸対流セル [1]_, "
"の速度場について，異なる可視化を検討します．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Quiver"
msgstr "Quiver"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:156
msgid ""
"The simplest visualization of a set of vectors, is using the `mlab` function"
" `quiver3d`::"
msgstr "ベクトルの集合を最も簡単に視覚化するには， `mlab` 関数 `quiver3d` を使用します．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:164
msgid ""
"The main limitation of this visualization is that it positions an arrow for "
"each sampling point on the grid. As a result the visualization is very busy."
msgstr ""
"この視覚化の主な制限は，グリッド上のサンプリングポイントごとに矢印を配置することです．その結果，ビジュアライゼーションは非常にビジーになります．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Masking vectors"
msgstr "マスクベクトル"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:169
msgid ""
"We can use the fact that we are visualizing a vector field, and not just a "
"bunch of vectors, to reduce the amount of arrows displayed. For this we need"
" to build a `vector_field` source, and apply to it the `vectors` module, "
"with some masking parameters (here we keep only one point out of 20)::"
msgstr ""
"表示される矢印の数を減らすために，ベクトルの束だけでなく，ベクトルフィールドを視覚化しているということを利用できます．このためには， "
"`vector_field` ソースを構築し，いくつかのマスキングパラメータ(ここでは，私たちは20のうちの一つの点だけをとっておく)を使用して "
"`vectors` モジュールを適用する必要があります．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "A cut plane"
msgstr "切断面"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:181
msgid ""
"If we are interested in displaying the vectors along a cut, we can use a cut"
" plane. In particular, we can inspect interactively the vector field by "
"moving the cut plane along: clicking on it and dragging it can give a very "
"clear understanding of the vector field::"
msgstr ""
"カットに沿ってベクトルを表示する場合は，カット平面を使用できます．特に，切断面を移動してベクトルフィールドをインタラクティブに検査できます．ベクトルフィールドをクリックしてドラッグすると，ベクトルフィールドを非常に明確に理解できます．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Iso-Surfaces of the magnitude"
msgstr "大きさの等値面"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:191
msgid ""
"An important parameter of the vector field is its magnitude. It can be "
"interesting to display iso-surfaces of the normal of the vectors. For this "
"we can create a scalar field from the vector field using the "
"ExtractVectorNorm filter, and use the Iso-Surface module on it. When working"
" interactively, a good understanding of the magnitude of the field can be "
"gained by changing the values of the contours in the object's property "
"dialog. ::"
msgstr ""
"ベクトルフィールドの重要なパラメータは，その大きさです．ベクトルの法線のアイソサーフェスを表示すると，面白いことがあります．このために，ExtractVectorNormフィルタを使用してベクトルフィールドからスカラフィールドを作成し，その上でIso-"
"Surfaceモジュールを使用します．インタラクティブに作業する場合，オブジェクトのプロパティダイアログで輪郭の値を変更すると，フィールドの大きさを十分に理解できます．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "The Flow, or the field lines"
msgstr "フローまたはフィールドライン"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:205
msgid ""
"For certain vector fields, the line of flow along the field can have an "
"interesting meaning. For instance this can be interpreted as a trajectory in"
" hydrodynamics, or field lines in electro-magnetism. We can display the flow"
" lines originating for a certain seed surface using the `streamline` module,"
" or the mlab :func:`flow` function, which relies on `streamline` "
"internally::"
msgstr ""
"特定のベクトルフィールドでは，フィールドに沿ったフローラインに興味深い意味があります．たとえば，これは流体力学の軌跡，あるいは電磁界の磁力線として解釈することができる．"
" `streamline` モジュール，または mlab :func:`flow` "
"関数を使用して，特定のシードサーフェスで生成されたフローラインを表示できます．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:221
msgid ""
"Giving a meaningful visualization of a vector field is a hard task, and one "
"must use all the tools at hand to illustrate his purposes. It is important "
"to choose the message conveyed. No one visualization will tell all about a "
"vector field. Here is an example of a visualization made by combining the "
"different tools above::"
msgstr ""
"ベクトルフィールドを意味のある形で視覚化するのは困難な作業であり，手元にあるすべてのツールを使用して目的を説明する必要があります．伝えるメッセージを選ぶことが大切です．ベクトルフィールドのすべてを視覚化することはできません．上のさまざまなツールを組み合わせて作成したビジュアライゼーションの例を次に示します．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:257
msgid ""
"Although most of this section has been centered on snippets of code to "
"create visualization objects, it is important to remember that Mayavi is an "
"interactive program, and that the properties of these objects can be "
"modified interactively, as described in :ref:`mlab-changing-objects-"
"interactively`. It is often impossible to choose the best parameters for a "
"visualization before hand. Colors, contour values, colormap, view angle, "
"etc... should be chosen interactively. If reproducibiles are required, the "
"chosen values can be added in the original script."
msgstr ""
"このセクションの大部分は，ビジュアル化オブジェクトを作成するためのコードの断片に集中していますが，Mayaviはインタラクティブなプログラムであり，これらのオブジェクトのプロパティはインタラクティブに変更できることを覚えておくことが重要です．"
" :ref:`mlab-changing-objects-interactively` "
"を参照．視覚化に最適なパラメータを事前に選択することは，多くの場合不可能です．カラー，輪郭値，カラーマップ，ビュー角度など．対話的に選択する必要があります．再現性が必要な場合は，選択した値を元のスクリプトに追加できます．"

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:267
msgid ""
"Moreover, the `mlab` functions expose only a small fraction of the "
"possibilities of the visualization objects. The dialogs expose more of these"
" functionalities, that are entirely controlled by the attributes of the "
"objects returned by the mlab functions. These objects are very rich, as they"
" are built from VTK objects. It can be hard to find the right attribute to "
"modify when exploring them, or in the VTK documentation, thus the easiest "
"way is to modify them interactively using the pipeline view dialog and use "
"the :ref:`record feature <record_feature>` to find out the corresponding "
"lines of code. See :ref:`organisation_mayavi_visualisations` to understand "
"better the link between the lines of code generated by the record feature "
"and `mlab`. ."
msgstr ""
"さらに，  `mlab` "
"関数は，可視化オブジェクトの可能性のほんの一部しか公開しません．ダイアログには，mlab関数によって返されるオブジェクトの属性によって完全に制御される，これらの機能の多くが表示されます．これらのオブジェクトはVTKオブジェクトから作成されているため，非常に豊富です．これらのファイルを表示しているときや，VTKのドキュメントでは，修正すべき適切な属性を見つけるのが難しいかもしれません．ですから，パイプラインビューダイアログを使って対話的に変更し，"
" :ref:`record feature <record_feature>` を使って対応するコード行を見つけるのが最も簡単な方法です． "
":ref:`organisation_mayavi_visualisations` を参照して，レコード機能によって生成されたコード行と `mlab` "
"の間のリンクをよりよく理解してください．."

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:284
msgid ""
"Toussaint, V.; Carriere, P. & Raynal, F. A numerical Eulerian approach to "
"mixing by chaotic advection Phys. Fluids, 1995, 7, 2587"
msgstr ""
"Toussaint, V.; Carriere, P. & Raynal, F. A numerical Eulerian approach to "
"mixing by chaotic advection Phys. Fluids, 1995, 7, 2587"
