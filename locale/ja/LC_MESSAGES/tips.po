# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.3.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-07 06:50+0000\n"
"PO-Revision-Date: 2019-04-27 07:30+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/98399/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../mayavi/docs/source/mayavi/tips.rst:2
msgid "Tips and Tricks"
msgstr "ヒントとコツ"

#: ../../mayavi/docs/source/mayavi/tips.rst:4
msgid ""
"Below are a few tips and tricks that you may find useful when you use "
"Mayavi2."
msgstr "ここでは，Mayavi2を使用する際に役立つヒントをいくつか紹介します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:10
msgid "Using Mayavi in Jupyter notebooks"
msgstr "JupyterノートブックでのMayaviの利用"

#: ../../mayavi/docs/source/mayavi/tips.rst:12
msgid ""
"There are three different ways in which one can embed Mayavi visualizations "
"in a Jupyter notebook.  The best way is to use the ``'ipy'`` backend (which "
"is the default).  This backend was first introduced in Mayavi 4.7.0.  This "
"backend requires that the ipywidgets_ and ipyevents_ packages be installed."
"  It behaves almost exactly like a normal Mayavi UI window and supports any "
"Mayavi/VTK visualization and is fully interactive.  This backend relies on "
"VTK's off screen support and depending on how your VTK is configured may "
"require a windowing system.  This option is essentially performs server-side"
" rendering of the visualization."
msgstr ""
"JupyterノートブックにMayaviの可視化を埋め込むには3つの方法があります．最善の方法は，(これがデフォルトです．)バックエンドを使用することである．このバックエンドはMayavi"
" 4.7 .0で初めて導入されました．このバックエンドを使用するには， ipywidgets_ と ipyevents_ "
"packagesをインストールする必要があります．通常のMayavi "
"UIウィンドウとほとんど同じように動作し，Mayavi/VTKの表示をサポートし，完全にインタラクティブです．このバックエンドはVTKのオフスクリーンサポートに依存しており，VTKの設定方法によってはウィンドウシステムが必要になることがあります．このオプションは，基本的に可視化のサーバーサイドレンダリングを実行します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:26
msgid ""
"The other very powerful backend is the ``'itk'`` backend which uses a "
"client-side approach (renders on your browser using WebGL) and does not rely"
" on VTK's offscreen support.  This requires that the itkwidgets_ package be "
"installed.  This is probably the most convenient backend if your primary "
"usage is for a web-based notebook. This feature was first introduced in "
"Mayavi-4.8.0."
msgstr ""
"もう一つの非常に強力なバックエンドは ``'itk'`` バックエンドで，クライアントサイドのアプローチ (WebGL "
"を使用してブラウザ上でレンダリングします) を使用し，VTK のオフスクリーンサポートには依存しません． このためには itkwidgets_ "
"パッケージがインストールされている必要があります．ウェブベースのノートブックが主な用途であれば，おそらくこれが最も便利なバックエンドでしょう．この機能はMayavi-4.8.0で初めて導入されました．"

#: ../../mayavi/docs/source/mayavi/tips.rst:35
msgid ""
"A simple example notebook demonstrating the notebook interface is available "
"here: "
"https://github.com/enthought/mayavi/blob/main/examples/mayavi/mayavi_jupyter.ipynb"
msgstr ""
"ノートブックインターフェースを示す簡単なサンプルノートブックは，こちらで入手できます: "
"https://github.com/enthought/mayavi/blob/main/examples/mayavi/mayavi_jupyter.ipynb"

#: ../../mayavi/docs/source/mayavi/tips.rst:38
msgid ""
"There are two other backends, the simplest one is the ``'png'`` backend "
"which produces images that can be embedded in the notebook. These are static"
" and not interactive and this too uses server-side rendering."
msgstr ""
"他にも2つのバックエンドがあり，最も単純なものは，ノートブックに埋め込むことができるイメージを生成する ``'png'`` "
"バックエンドです．これらは静的でインタラクティブではなく，これもサーバーサイドレンダリングを使用しています．"

#: ../../mayavi/docs/source/mayavi/tips.rst:43
msgid ""
"There is also an ``'x3d'`` backend which displays X3D_ elements on the "
"notebook.  The X3D output produces a fully interactive 3D scene, however, "
"this will not support VTK's interactive widgets.  It does not support "
"transparency and other advanced visualizations either.  For information on "
"how to interact with the X3D scene, see here: "
"http://www.x3dom.org/documentation/interaction/"
msgstr ""
"また，ノートブック上に X3D_ 要素を表示する ``'x3d'`` "
"バックエンドも用意されています．X3D出力では完全にインタラクティブな3次元シーンが生成されますが，VTKのインタラクティブウィジェットはサポートされません．透明度やその他の高度な視覚化もサポートしていません．X3Dシーンの操作方法については，"
" http://www.x3dom.org/documentation/interaction/ を参照してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:50
msgid ""
"For the X3D backend, Mayavi ships with some javascript files that can be "
"installed as::"
msgstr ""
"X3Dバックエンドのために，Mayaviはいくつかのjavascriptファイルを同梱しており，以下のようにインストールすることができます::"

#: ../../mayavi/docs/source/mayavi/tips.rst:55
msgid ""
"This will install the x3dom Javascript and CSS files locally.  Note that you"
" do not need to \"enable\" the extension or anything after you run the "
"above.  For more instructions and options see the `Installation of Jupyter "
"Extensions`_.  Doing this allows one to view X3D files without a network "
"connection."
msgstr ""
"これにより，x3dom JavascriptおよびCSSファイルがローカルにインストールされます．上記のコマンドを実行した後は，拡張機能などを "
"\"enable\" にする必要はありません．詳細な手順とオプションについては， `Installation of Jupyter "
"Extensions`_ を参照してください．これにより，ネットワーク接続なしでX3Dファイルを表示できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:63
msgid "To view Mayavi visualizations on the notebook one should first do::"
msgstr "ノートブックでMayaviの視覚化を表示するには，まず次の操作を行います．"

#: ../../mayavi/docs/source/mayavi/tips.rst:68
msgid "Subequently, one may simply do::"
msgstr "当然のことながら，次のようにします．"

#: ../../mayavi/docs/source/mayavi/tips.rst:73
msgid ""
"When the ``init_notebook`` method is called it configures the Mayavi objects"
" so they can be rendered on the Jupyter notebook."
msgstr ""
"``init_notebook`` メソッドを呼び出すと，MayaviオブジェクトがJupyterノートブック上でレンダリングできるように設定されます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:78
msgid ""
"One can call ``init_notebook`` multiple times if one wishes to change the "
"backend between ``ipy``, ``itk``, ``png``, and ``x3d`` for some reason."
msgstr ""
"何らかの理由で ``ipy`` ， ``itk`` ， ``png`` ， ``x3d`` の間のバックエンドを変更したい場合， "
"``init_notebook`` を複数回呼び出すことができます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:82
msgid "There are several optional arguments to ``init_notebook``."
msgstr "``init_notebook`` にはオプションの引数がいくつかあります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:84
msgid ""
"The first is the backend which defaults to ``'ipy'``, and can also be set to"
" ``'itk'``, ``'x3d'`` or ``'png'``."
msgstr ""
"1つはバックエンドで，デフォルトは ``'ipy'`` で， ``'itk'`` ， ``'x3d'`` または ``'png'`` "
"に設定することもできます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:86
msgid ""
"One can set the pixel width and height of the figure to create (as integers)"
" (for example ``mlab.init_notebook('x3d', 800, 800)``). This only applies to"
" the ``x3d`` backend.  For the ``ipy`` backend this can be set when creating"
" a new ``figure`` with the ``size`` keyword argument."
msgstr ""
"図形のピクセル幅と高さを設定して，(整数として)(例 ``mlab.init_notebook('x3d', 800, "
"800)``)を作成できます．これは ``x3d`` バックエンドにのみ適用されます． ``ipy`` バックエンドでは， ``size`` "
"キーワード引数を使用して新しい ``figure`` を作成するときに設定できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:91
msgid ""
"The last keyword argument ``local`` defaults to ``True``. When "
"``local=True`` it uses javascript files that are distributed along with "
"Mayavi otherwise will require an internet connection to use the x3dom files "
"online.  If for some reason the installation of the jupyter nbextension is "
"not working, using ``local=False`` with an internet connection should work "
"on a modern browser that supports WebGL."
msgstr ""
"最後のキーワード引数 ``local`` のデフォルトは ``True`` です． ``local=True`` "
"がJavascriptファイルを使用している場合は，Mayaviとともに配布されます．それ以外の場合は，x3domファイルをオンラインで使用するためにインターネット接続が必要になります．何らかの理由でjupyter"
" nbextensionのインストールが動作しない場合，インターネット接続で ``local=False`` "
"を使うことは，WebGLをサポートしている最近のブラウザで動作するはずです．"

#: ../../mayavi/docs/source/mayavi/tips.rst:99
msgid ""
"The X3D data is embedded in the notebook and can be shared but if the scenes"
" have a lot of polygons, these files can be large.  With the PNG backend, "
"the PNG's are also embedded and these are smaller files.  The PNG backend "
"relies on offscreen rendering working correctly on your platform."
msgstr ""
"X3Dデータはノートブックに埋め込まれており，共有することができますが，シーンに多数のポリゴンがある場合は，これらのファイルのサイズが大きくなることがあります．PNGバックエンドでは，PNGも埋め込まれており，これらはより小さなファイルです．PNGバックエンドは，ご使用のプラットフォームで正しく動作するオフスクリーンレンダリングに依存します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:112
msgid "Off screen rendering"
msgstr "オフスクリーンレンダリング"

#: ../../mayavi/docs/source/mayavi/tips.rst:115
msgid "Avoiding the rendering window"
msgstr "レンダリングウィンドウを使用しない"

#: ../../mayavi/docs/source/mayavi/tips.rst:117
msgid ""
"Often you write Mayavi scripts to render a whole batch of images to make an "
"animation or so and find that each time you save an image, Mayavi \"raises\""
" the window to make it the active window thus disrupting your work.  This is"
" needed since VTK internally grabs the window to make a picture.  Occluding "
"the window will also produce either blank or incorrect images."
msgstr ""
"多くの場合，Mayaviスクリプトを記述してバッチ全体のイメージをレンダーし，アニメーションなどを作成すると，イメージを保存するたびに，Mayaviがウィンドウを"
" \"raises\" "
"してアクティブウィンドウにし，作業を中断させることがわかります．これは，VTKが内部的にウィンドウをつかんで画像を作成するために必要です．ウィンドウを非表示にすると，空白または不正なイメージが生成されます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:124
msgid ""
"If you already have a Python script, say ``script.py`` that sets up your "
"visualization that you run likes so::"
msgstr "すでにPythonスクリプトを持っている場合は， ``script.py`` と言って，実行するビジュアル化を設定します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:129
msgid ""
"Then it is very easy to have this script run offscreen.  Simply run it like "
"so::"
msgstr "そうすれば，このスクリプトを画面外で実行することが非常に簡単になります．次のように実行します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:134
msgid ""
"This will run the script in an offscreen, standalone window.  On Linux, this"
" works best with VTK-5.2 and above.  For more details on the command line "
"arguments supported by the ``mayavi2`` application, see the :ref:`command-"
"line-arguments` section."
msgstr ""
"スクリプトは，オフスクリーンのスタンドアロンウィンドウで実行されます．Linuxでは，VTK-5.2以上で最適に動作します． ``mayavi2`` "
"アプリケーションがサポートするコマンドライン引数の詳細については， :ref:`command-line-arguments` "
"セクションを参照してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:139
msgid "When using ``mlab`` you will want to do this::"
msgstr "``mlab`` を使用する場合は，次のようにします．"

#: ../../mayavi/docs/source/mayavi/tips.rst:143
msgid ""
"before you create a figure and it will use an offscreen window for the "
"rendering."
msgstr "をクリックすると，レンダリングにオフスクリーンウィンドウが使用されます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:146
msgid ""
"Another option for offscreen rendering would be to click on the scene and "
"set the \"Off screen rendering\" option on.  Or from a script::"
msgstr ""
"オフスクリーンレンダリングの別のオプションは，シーンをクリックして \"Off screen rendering\" "
"オプションをオンに設定することです．または，スクリプトから"

#: ../../mayavi/docs/source/mayavi/tips.rst:151
msgid ""
"This will stop raising the window.  However, this may not be enough. Please "
"see below on the situation on different platforms."
msgstr "これにより，ウィンドウの上昇が停止します．しかし，これでは十分ではないかもしれません．各プラットホームの状況は下記参照．"

#: ../../mayavi/docs/source/mayavi/tips.rst:155
msgid "Platform Summary"
msgstr "プラットフォームの概要"

#: ../../mayavi/docs/source/mayavi/tips.rst:157
msgid ""
"**Windows**: If you are using win32 then off screen rendering should work "
"well out of the box.  All you will need to do is what is given above."
msgstr ""
"**Windows**: win32を使用している場合，初期状態ではオフスクリーンレンダリングが適切に機能します．必要な作業は，上記の内容のみです．"

#: ../../mayavi/docs/source/mayavi/tips.rst:160
msgid ""
"**Linux and the Mac**: there are several options to get this working "
"correctly and some major issues to consider:"
msgstr "**Linux と Mac**: これを正しく動作させるにはいくつかのオプションがあり，考慮すべき重要な問題がいくつかあります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:163
msgid ""
"If you have VTK-5.2 the offscreen rendering option should let you generate "
"the pictures without worrying about occluding the window. However, you will "
"need VTK-5.2 to get this working properly.  There are also situations when "
"this does not always work -- try it and if you get blank windows, you have a"
" problem.  For example::"
msgstr ""
"VTK-5.2を使用している場合は，オフスクリーンレンダリングオプションを使用すれば，ウィンドウを隠すことなく画像を生成できます．ただし，これを正しく動作させるには，VTK-5.2が必要です．また，これが常に動作するとは限らない場合もあります．これを試してみて，空白のウィンドウが表示された場合は，問題が発生します．次に例を示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:174
msgid ""
"If this produces a clean image (even if you switch desktops or cover any "
"windows produced), you should be golden.  If not you should consider either "
"using a virtual framebuffer or building VTK with Mesa + OSMesa to give you a"
" pure software rendering approach."
msgstr ""
"クリーンなイメージ(デスクトップを切り替えたり，作成されたウィンドウをカバーしたりしても)が生成される場合は，金色になります．そうでない場合は，仮想フレームバッファを使用するか，Mesa+OSMesaを使ってVTKを構築し，純粋なソフトウェアレンダリング手法を提供することを検討してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:182
msgid "Rendering using the virtual framebuffer"
msgstr "仮想フレームバッファを使用したレンダリング"

#: ../../mayavi/docs/source/mayavi/tips.rst:184
msgid ""
"VTK uses openGL for all its rendering. Under any conventional Unix "
"(including Linux), you need an Xserver running to open a GL context "
"(especially if you want hardware acceleration). This might be a problem when"
" rendering on a headless server. As mentioned in the above paragraph, on a "
"desktop, using the default server may also be a problem as it interferes "
"with your ongoing work."
msgstr ""
"VTKでは，すべてのレンダリングにopenGLが使用されます．従来のUnix(Linuxを含む)では，GLコンテキストを開くためにXserverを実行する必要があります(特にハードウェアアクセラレーションが必要な場合)．これは，ヘッドレスサーバでレンダリングする場合に問題になる可能性があります．前の段落で述べたように，デスクトップでは，既定のサーバーを使用すると進行中の作業の妨げになるため，問題になることがあります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:191
msgid ""
"A good workaround is to use the virtual framebuffer X server for X11 like "
"so:"
msgstr "回避策としては，次のようにX11用の仮想フレームバッファXサーバを使用します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:194
msgid ""
"Make sure you have the ``Xvfb`` package installed.  For example under Debian"
" and derivatives this is called the ``xvfb`` package."
msgstr ""
"``Xvfb`` パッケージがインストールされていることを確認します．例えばDebianとその派生版では，これは ``xvfb`` "
"パッケージと呼ばれます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:197
msgid "Create the virtual framebuffer X server like so::"
msgstr "次のように仮想フレームバッファXサーバを作成します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:201
msgid ""
"This creates the display \":1\" and creates a screen of size 1280x1024 with "
"24 bpp (the 24bpp is important).  For more options check your ``Xvfb`` man "
"page."
msgstr ""
"これにより，ディスプレイ \":1\" "
"が作成され，1280x1024，24bppの画面が作成されます(24bppは重要です．)．その他のオプションについては， ``Xvfb`` "
"のマニュアルページを参照してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:205
msgid "Export display to :1 like so (on bash)::"
msgstr "次のように表示を(bashでの)1のようにエクスポートします"

#: ../../mayavi/docs/source/mayavi/tips.rst:209
msgid ""
"Now run your Mayavi script.  It should run uninterrupted on this X server "
"and produce your saved images."
msgstr "Mayaviスクリプトを実行します．このXサーバ上で中断なく実行され，保存されたイメージが生成されます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:212
msgid "This probably will have to be fine tuned to suit your taste."
msgstr "これはおそらく，あなたの好みに合わせて微調整する必要があります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:214
msgid ""
"If you want to do this in python. You can use `pyvirtualdisplay "
"<https://pypi.org/project/PyVirtualDisplay/>`_ ::"
msgstr ""
"Pythonでこれを行いたい場合は， `pyvirtualdisplay "
"<https://pypi.org/project/PyVirtualDisplay/>`_ が使えます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:221
msgid ""
"Many Linux systems (including Ubuntu and Debian) ship with a helper script "
"`xvfb-run` for running headless. The following command can run a Python "
"script with Mayavi2 visualizations headless::"
msgstr ""
"多くのLinuxシステム(UbuntuおよびDebianを含む)には，ヘッドレスで動作するためのヘルパースクリプト `xvfb-run` "
"が付属しています．次のコマンドは，PythonスクリプトをMayavi2ビジュアライゼーションでヘッドレスで実行できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:227
msgid ""
"Beware that you shouldn't call `mlab.show` or start the mainloop in the "
"script, elsewhere the script will run endlessly, waiting for interaction in "
"a hidden window."
msgstr ""
"`mlab.show` "
"を呼び出したり，スクリプトの中でメインループを起動したりしないように注意してください．そうしないと，スクリプトは無限に実行され，隠れたウィンドウでの対話を待ちます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:233
msgid ""
"If you want to use Mayavi without the envisage UI or even a traits UI (i.e. "
"with a pure TVTK window) and do off screen rendering with Python scripts you"
" may be interested in the :ref:`example_offscreen`. This simple example "
"shows how you can use Mayavi without using Envisage or the Mayavi envisage "
"application and still do off screen rendering."
msgstr ""
"envisage UIまたはtrait "
"UIさえも持たないMayavi(すなわち純粋なTVTKウィンドウで)を使用し，Pythonスクリプトを使用して画面外のレンダリングを実行する場合， "
":ref:`example_offscreen` に興味を持つかもしれません．この単純な例では，EnvisageまたはMayavi "
"envisageアプリケーションを使用せずにMayaviを使用し，画面外のレンダリングを実行する方法を示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:240
msgid ""
"If you are using mlab, outside of the Mayavi2 application, simply set::"
msgstr "Maya2アプリケーション以外でmlabを使用している場合は，次のように設定します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:246
msgid "Using VTK with Mesa for pure software rendering"
msgstr "MesaでVTKを使用して純粋なソフトウェアレンダリングを行う"

#: ../../mayavi/docs/source/mayavi/tips.rst:248
msgid ""
"Sometimes you might want to run Mayavi/VTK completely headless on a machine "
"with no X server at all and are interested in pure offscreen rendering (for "
"example for usage on the Sage_ notebook interface).  In these cases one "
"could use Mesa's OSMesa library to render offscreen. The downside is that "
"you will not get any hardware acceleration in this case.  Here are brief "
"instructions on how to build VTK to do this."
msgstr ""
"場合によっては，XサーバがまったくないマシンでMayavi/VTKを完全にヘッドレスで実行し，純粋なオフスクリーンレンダリング( Sage_ "
"ノートブックインターフェイスでの使用例)に関心があることもあります．このような場合，MesaのOSMesaライブラリを使ってオフスクリーンでレンダリングすることができる．欠点は，この場合はハードウェアアクセラレーションを使用できないことです．ここでは，これを行うためのVTKのビルド方法を簡単に説明します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:255
msgid ""
"Build a recent version of mesa.  7.0.4 (as of this time) should work as "
"would 7.2.  We assume you download MesaLib-7.0.4.tar.bz2."
msgstr ""
"最近のバージョンのmesaを作成します． 7.0.4 (現時点で)は7.2と同じように動作するはずです． "
"MesaLib-7.0.4.tar.bz2をダウンロードしていると仮定します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:258
msgid ""
"Untar, and change directory to the new directory created. We call this "
"directory ``$MESA`` henceforth."
msgstr "Untarを実行し，作成した新しいディレクトリに移動します．以降，このディレクトリを ``$MESA`` と呼びます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:261
msgid ""
"Run ``make configs/linux-x86``,  change file as per your configuration. Run "
"``make`` to see list of options.  Note: 7.2 has a ``./configure`` script "
"that you can run."
msgstr ""
"``make configs/linux-x86`` を実行し，設定に従ってファイルを変更します． ``make`` "
"を実行してオプションのリストを表示します．注: 7.2には，実行可能な ``./configure`` スクリプトがあります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:265
msgid "Get VTK-5.2 or later (CVS will also work).."
msgstr "VTK-5.2以降を入手してください(CVSも動作します)．"

#: ../../mayavi/docs/source/mayavi/tips.rst:267
msgid "Run ``ccmake path/to/VTK``."
msgstr "``ccmake path/to/VTK`` を実行します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:269
msgid "Now select advanced options 't'."
msgstr "次に，詳細オプション 't' を選択します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:271
msgid "Set ``VTK_OPENGL_HAS_OSMESA ON``"
msgstr "``VTK_OPENGL_HAS_OSMESA ON`` を設定します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:273
msgid "Configure: press 'c'"
msgstr "設定: 'c' を押します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:275
msgid "Set the ``OSMESA_INCLUDE_DIR`` to the ``$MESA/include dir``"
msgstr "``OSMESA_INCLUDE_DIR`` を ``$MESA/include dir`` に設定します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:277
msgid "Set ``OSMESA_LIBRARY`` to ``$MESA/lib/libOSMesa.so``"
msgstr "``OSMESA_LIBRARY`` を ``$MESA/lib/libOSMesa.so`` に設定します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:279
msgid ""
"Similarly set the ``OPENGL_INCLUDE_DIR``, "
"``OPENGL_gl_LIBRARY=$MESA/lib/libGL.so``, ``OPENGL_glu_LIBRARY``, and "
"``OPENGL_xmesa_INCLUDE_DIR``."
msgstr ""
"同様に ``OPENGL_INCLUDE_DIR`` ， ``OPENGL_gl_LIBRARY=$MESA/lib/libGL.so`` ， "
"``OPENGL_glu_LIBRARY`` ， ``OPENGL_xmesa_INCLUDE_DIR`` を設定します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:283
msgid ""
"Set ``VTK_USE_OFFSCREEN`` to ``ON`` if you want offscreen all the time, this"
" will never produce an actual mapped VTK window since the default value of "
"the render window's offscreen rendering ivar will be set to True in this "
"case."
msgstr ""
"常にオフスクリーンにする場合は ``VTK_USE_OFFSCREEN`` を ``ON`` "
"に設定してください．この場合，レンダーウィンドウのオフスクリーンレンダリングのivarのデフォルト値がTrueに設定されるため，実際にマッピングされたVTKウィンドウが生成されることはありません．"

#: ../../mayavi/docs/source/mayavi/tips.rst:288
msgid "Any other settings like ``VTK_USE_GL2PS, USE_RPATH`` etc."
msgstr "``VTK_USE_GL2PS, USE_RPATH`` などのその他の設定．"

#: ../../mayavi/docs/source/mayavi/tips.rst:290
msgid "Configure again (press 'c') and then generate 'g'."
msgstr "再度( 'c' を押す)を設定し， 'g' を生成してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:293
msgid ""
"Note that if you do not want to use ``ccmake`` and would like to do this "
"from the command line you may also do (for example)::"
msgstr "``ccmake`` を使いたくなくて，コマンドラインからこれを行いたいなら，以下のようにしても良いことに注意してください(例えば)"

#: ../../mayavi/docs/source/mayavi/tips.rst:312
msgid ""
"Run ``make`` and wait till VTK has built.  Let us say the build is in "
"``$VTK_BUILD``."
msgstr "``make`` を実行し，VTKがビルドされるまで待ちます．ビルドが ``$VTK_BUILD``にあるとします．"

#: ../../mayavi/docs/source/mayavi/tips.rst:315
msgid ""
"Now install VTK or set the ``PYTHONPATH`` and ``LD_LIBRARY_PATH`` suitably."
"  Also ensure that ``LD_LIBRARY_PATH`` points to ``$MESA/lib`` (if the mesa "
"libs are not installed on the system) this ensures that VTK links to the "
"right GL libs.  For example::"
msgstr ""
"ここでVTKをインストールするか， ``PYTHONPATH`` と ``LD_LIBRARY_PATH`` を適切に設定します．また， "
"``LD_LIBRARY_PATH`` が ``$MESA/lib`` "
"(システムにmesaライブラリがインストールされていない場合)を指していることを確認します．これにより，VTKが正しいGLライブラリにリンクされていることが保証されます．次に例を示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:323
msgid "Now, you should be all set."
msgstr "これで準備は完了です．"

#: ../../mayavi/docs/source/mayavi/tips.rst:325
msgid ""
"Once this is done you should be able to run mlab examples offscreen. This "
"will work without an X display even."
msgstr "これが完了すると，mlabの例を画面外で実行できるようになります．これはX表示なしでも動作します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:328
msgid ""
"With such a VTK built and running, one could simply build and install "
"mayavi2.  To use it in a Sage notebook for example you'd want to set "
"``ETS_TOOLKIT='null'`` and set ``mlab.options.offscreen = True``.  Thats it."
"  Everything should now work offscreen."
msgstr ""
"このようなVTKをビルドして実行すれば，簡単にmayavi2をビルドしてインストールすることができます．たとえばSageノートで使用するには， "
"``ETS_TOOLKIT='null'`` と ``mlab.options.offscreen = True`` "
"を設定します．これで，すべてが画面外で機能するようになります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:333
msgid ""
"Note that if you set ``VTK_USE_OFFSCREEN`` to ``ON`` then you'll by default "
"only get offscreen contexts.  If you do want a UI you will want to "
"explicitly set the render window's ``off_screen_rendering`` ivar to "
"``False`` to force a mapped window.  For this reason if you might need to "
"popup a full UI, it might be better to *not set* ``VTK_USE_OFFSCREEN=ON``."
msgstr ""
"``VTK_USE_OFFSCREEN`` を ``ON`` "
"に設定した場合，デフォルトではオフスクリーンコンテキストのみを取得することに注意してください．UIが必要な場合は，マッピングされたウィンドウを強制的に表示するために，レンダウィンドウの``off_screen_rendering``"
" のivarを明示的に ``False`` に設定します．このため，完全なUIをポップアップ表示する必要がある場合は， "
"``VTK_USE_OFFSCREEN=ON`` を設定しない方がよい場合があります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:347
msgid "Extending Mayavi with customizations"
msgstr "カスタマイズによるMayaviの拡張"

#: ../../mayavi/docs/source/mayavi/tips.rst:349
msgid ""
"A developer may wish to customize Mayavi by adding new sources, filters or "
"modules.  These can be done by writing the respective filters and exposing "
"them via a ``user_mayavi.py`` or a ``site_mayavi.py`` as described in "
"`Customizing Mayavi2`_.   A more flexible and reusable mechanism for doing "
"this is to create a full fledged Mayavi contrib package in the following "
"manner."
msgstr ""
"開発者は，新しいソース，フィルタ，またはモジュールを追加してMayaviをカスタマイズできます．これらは， `Customizing Mayavi2`_"
" で記述されているように，それぞれのフィルタを書いて ``user_mayavi.py`` や ``site_mayavi.py`` "
"経由で公開することで実現できます．これを行うためのより柔軟で再利用可能なメカニズムは，以下の方法で本格的なMayavi "
"contribパッケージを作ることです．"

#: ../../mayavi/docs/source/mayavi/tips.rst:356
msgid ""
"Create a Python package, let's call it ``mv_iitb`` (for IIT Bombay specific "
"extensions/customizations).  The directory structure of this package can be "
"something like so::"
msgstr ""
"Pythonパッケージを作成します．これを ``mv_iitb`` (IIT "
"Bombay固有の拡張/カスタマイズ用)とします．このパッケージのディレクトリ構造は次のようになります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:372
msgid ""
"The two key points to note in the above are the fact that ``mv_iitb`` is a "
"proper Python package (notice the ``__init__.py``) and the "
"``user_mayavi.py`` is the file that adds whatever new "
"sources/filters/modules etc. to Mayavi.  The other part of the structure is "
"really up to the developer.  At the moment these packages can add new "
"sources, filters, modules and contribute any Envisage plugins that the "
"``mayavi2`` application will load."
msgstr ""
"上記で注目すべき2つのポイントは， ``mv_iitb`` が適切なPythonパッケージ( ``__init__.py`` "
"に注目してください)であり， ``user_mayavi.py`` "
"がMayaviに新しいソース/フィルタ/モジュールなどを追加するファイルであるという事実です．構造の他の部分は開発者次第です．現時点では，これらのパッケージは新しいソース，フィルタ，モジュールを追加でき，"
" ``mayavi2`` アプリケーションがロードするEnvisageプラグインを提供できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:380
msgid ""
"This package should then be installed somewhere on ``sys.path``. Once this "
"is done, users can find these packages and enable them from the "
"Tools->Preferences (the UI will automatically detect the package).  The "
"``user_mayavi.py`` of each selected package will then be imported next time "
"Mayavi is started, note that this will be usable even from ``mlab``."
msgstr ""
"このパッケージは ``sys.path`` のどこかにインストールされるべきです．これが終わったら，ユーザはこれらのパッケージを見つけて， "
"Tools->Preferences (UIがパッケージを自動的に検出します．)からそれらを有効にすることができます．選択した各パッケージの "
"``user_mayavi.py`` は，Mayaviの次回起動時にインポートされます．これは ``mlab`` からでも使用できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:387
msgid ""
"Any number of such packages may be created and distributed.  If they are "
"installed, users can choose to enable them.  Internally, the list of "
"selected packages is stored as the ``mayavi.contrib_packages`` preference "
"option.  The following code shows how this may be accessed from a Python "
"script::"
msgstr ""
"このようなパッケージは，いくつでも作成して配布できます．これらがインストールされている場合，ユーザーはこれらを有効にすることができます．内部的には，選択されたパッケージの一覧は"
" ``mayavi.contrib_packages`` "
"設定オプションとして格納されます．次のコードは，Pythonスクリプトからこれにアクセスする方法を示しています．"

#: ../../mayavi/docs/source/mayavi/tips.rst:398
msgid ""
"For more details on how best to write ``user_mayavi.py`` files and what you "
"can do in them, please refer to the `examples/mayavi/user_mayavi.py`_ "
"example.  Please pay particular attention to the warnings in that file.  It "
"is a very good idea to ensure that the ``user_mayavi.py`` does not implement"
" any sources/modules/filters and only registers the metadata.  This will "
"avoid issues with circular imports."
msgstr ""
"``user_mayavi.py`` ファイルを書く最善の方法とそれらで何ができるかの詳細については， "
"`examples/mayavi/user_mayavi.py`_ の例を参照してください．そのファイルの警告には特に注意してください． "
"``user_mayavi.py`` "
"がソース/モジュール/フィルタを実装せず，メタデータのみを登録することを保証することは非常に良い考えです．これにより，循環インポートの問題を回避できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:411
msgid "Customizing Mayavi2"
msgstr "Mayavi2のカスタマイズ"

#: ../../mayavi/docs/source/mayavi/tips.rst:413
msgid "There are three ways a user can customize Mayavi:"
msgstr "Mayaviをカスタマイズするには，次の3つの方法があります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:415
msgid ""
"Via Mayavi contributions installed on the system.  This may be done by "
"enabling any found contributions from the Tools->Preferences menu on the "
"Mayavi component, look for the \"contribution settings\". Any selected "
"contributions will be imported the next time Mayavi starts.  For more "
"details see the `Extending Mayavi with customizations`_ section."
msgstr ""
"システムにインストールされているMayaviコントリビューションにより．これを行うには，Mayaviコンポーネントの "
"Tools->Preferences \"contribution settings\" "
"メニューから検索結果を有効にします．選択したコントリビューションは，Mayaviの次回起動時にインポートされます．詳細については， `Extending"
" Mayavi with customizations`_ セクションを参照してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:422
msgid ""
"At a global, system wide level via a ``site_mayavi.py``.  This file is to be"
" placed anywhere on ``sys.path``."
msgstr ""
"``site_mayavi.py`` を経由したグローバルなシステムレベルで，このファイルは ``sys.path`` のどこにでも置くことができます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:425
msgid ""
"At a local, user level.  This is achieved by placing a ``user_mayavi.py`` in"
" the users ``~/.mayavi2/`` directory.  If a ``~/.mayavi2/user_mayavi.py`` is"
" found, the directory is placed in ``sys.path``."
msgstr ""
"ローカルのユーザーレベル．これは ``user_mayavi.py`` をusers  ``~/.mayavi2/`` "
"ディレクトリに置くことで達成されます． ``~/.mayavi2/user_mayavi.py`` が見つかった場合，ディレクトリは "
"``sys.path`` に配置されます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:430
msgid ""
"The files are similar in their content.  Two things may be done in this "
"file:"
msgstr "ファイルの内容は似ています．このファイルでは，次の2つのことを行うことができます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:433
msgid ""
"Registering new sources, modules or filters in the Mayavi registry "
"(``mayavi.core.registry.registry``).  This is done by registering metadata "
"for the new class in the registry.  See ``examples/mayavi/user_mayavi.py`` "
"to see an example."
msgstr ""
"新しいソース，モジュール，またはフィルタをMayaviレジストリに登録します( ``mayavi.core.registry.registry`` "
")．これを行うには，新しいクラスのメタデータをレジストリに登録します．例については， "
"``examples/mayavi/user_mayavi.py`` を参照してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:438
msgid ""
"Adding additional envisage plugins to the mayavi2 application. This is done "
"by defining a function called ``get_plugins()`` that returns a list of "
"plugins that you wish to add to the mayavi2 application."
msgstr ""
"mayavi2アプリケーションにenvenageプラグインを追加します．これは，mayavi2アプリケーションに追加するプラグインのリストを返す "
"``get_plugins()`` という関数を定義することによって行います．"

#: ../../mayavi/docs/source/mayavi/tips.rst:444
msgid ""
"The ``examples/mayavi/user_mayavi.py`` example documents and shows how this "
"can be done.  To see it, copy the file to the ``~/.mayavi2`` directory.  If "
"you are unsure where ``~`` is on your platform, just run the example and it "
"should print out the directory."
msgstr ""
"``examples/mayavi/user_mayavi.py`` "
"の例はこれがどのように行われるかを記述し，示します．このファイルを表示するには，ファイルを ``~/.mayavi2`` "
"ディレクトリにコピーします．ご使用のプラットフォームで ``~`` がどこにあるかわからない場合は，サンプルを実行するとディレクトリが出力されます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:451
msgid ""
"In the ``user_mayavi.py`` or ``site_mayavi.py``, avoid Mayavi imports like  "
"``from mayavi.modules.outline import Outline`` etc. This is because "
"``user_mayavi`` is imported at a time when many of the imports are not "
"complete and this will cause hard-to-debug circular import problems.  The "
"``registry`` is given only metadata mostly in the form of strings and this "
"will cause no problem.  Therefore to define new modules, we strongly "
"recommend that the modules be defined in another module or be defined in a "
"factory function as done in the example ``user_mayavi.py`` provided."
msgstr ""
"``user_mayavi.py`` や ``site_mayavi.py`` では， ``from mayavi.modules.outline "
"import Outline`` などのMayaviインポートを避けてください．これは， ``user_mayavi`` "
"がインポートの多くが完了していない時期にインポートされるため，デバッグが困難な循環インポートの問題が発生するためです． ``registry`` "
"には，ほとんどが文字列形式のメタデータのみが与えられますが，これは問題になりません．したがって，新しいモジュールを定義するには，別のモジュールで定義するか，提供されているサンプル"
" ``user_mayavi.py`` のようにファクトリ関数で定義することを強くお勧めします．"

#: ../../mayavi/docs/source/mayavi/tips.rst:463
msgid "Scripting Mayavi without using Envisage"
msgstr "Envisageを使用しないMayaviのスクリプティング"

#: ../../mayavi/docs/source/mayavi/tips.rst:465
msgid ""
"The :ref:`example_standalone` demonstrates how one can use the core Mayavi "
"API without using Envisage.  This is useful when you want to minimize "
"dependencies.  :ref:`example_offscreen` demonstrates how to use Mayavi "
"without the envisage UI or even a traits UI (i.e. with a pure TVTK window) "
"and do off screen rendering."
msgstr ""
":ref:`example_standalone` "
"はEnvisageを使わずにMayaviのコアAPIを使う方法を示しています．これは，依存関係を最小化する場合に便利です． "
":ref:`example_offscreen` "
"は，想定されるUIや特性UI(すなわち純粋なTVTKウィンドウで)を使用せずにMayaviを使用する方法と，画面に表示されないレンダリングを実行する方法を示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:472
msgid "Computing in a thread"
msgstr "スレッドでの計算"

#: ../../mayavi/docs/source/mayavi/tips.rst:474
msgid ""
":ref:`example_compute_in_thread` demonstrates how to visualize a 2D numpy "
"array and visualize it as image data using a few modules.  It also shows how"
" one can do a computation in another thread and update the Mayavi pipeline "
"once the computation is done.  This allows a user to interact with  the user"
" interface when the computation is performed in another thread."
msgstr ""
":ref:`example_compute_in_thread` は2D "
"numpy配列を可視化する方法と，いくつかのモジュールを使って画像データとして可視化する方法をデモしています．また，別のスレッドで計算を実行し，計算が完了したらMayaviパイプラインを更新する方法も示します．これにより，計算が別のスレッドで実行されるときに，ユーザーがユーザーインタフェースと対話できるようになります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:483
msgid "Polling a file and auto-updating Mayavi"
msgstr "ファイルをポーリングしてMayaviを自動更新する"

#: ../../mayavi/docs/source/mayavi/tips.rst:485
msgid ""
"Sometimes you have a separate computational process that generates data "
"suitable for visualization.  You'd like Mayavi to visualize the data but "
"automatically update the data when the data file is updated by the "
"computation.  This is easily achieved by polling the data file and checking "
"if it has been modified.  The :ref:`example_poll_file` demonstrates this.  "
"To see it in action will require that you edit the scalar data in the "
"``examples/data/heart.vtk`` data file."
msgstr ""
"視覚化に適したデータを生成する別の計算プロセスがある場合もあります．Mayaviにデータを視覚化させたいが，計算によってデータファイルが更新されたときに自動的にデータを更新したい．これは，データファイルをポーリングし，変更されているかどうかを確認することで簡単に実現できます．"
" :ref:`example_poll_file` はこれを実証しています．動作を確認するには， ``examples/data/heart.vtk``"
" データファイルのスカラーデータを編集する必要があります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:495
msgid "Serving Mayavi on the network"
msgstr "ネットワーク上でのMayaviの提供"

#: ../../mayavi/docs/source/mayavi/tips.rst:499
msgid ""
"Say you have a little visualization script and you'd like to run some kind "
"of server where you can script the running Mayavi UI from a TCP/UDP "
"connection.  It turns out there is a simple way to do this  if you have "
"Twisted_ installed.  Here is a trivial example::"
msgstr ""
"小さなビジュアル化スクリプトがあり，TCP/UDP接続から実行中のMayavi UIをスクリプト化できるサーバを実行したいとします． Twisted_ "
"がインストールされていれば，これを行う簡単な方法があることがわかります．簡単な例を次に示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:509
msgid ""
"There is no need to call ``mlab.show()`` in the above.  The TCP server will "
"listen on port 8007 by default in the above (this can be changed with "
"suitable arguments to :func:`serve_tcp`).  Any data sent to the server is "
"simply exec'd, meaning you can do pretty much anything you want.  The names "
"``engine``, ``scene``, ``camera`` and ``mlab`` are all available and can be "
"scripted with Python code.  For example after running the above you can do "
"this::"
msgstr ""
"上記で ``mlab.show()`` を呼ぶ必要はありません．上記の例では，TCPサーバはデフォルトでポート8007で受信します(これは， "
":func:`serve_tcp` "
"に適切な引数を指定して変更できます．)．サーバーに送信されるデータはどれも単純にexecされるため，ほとんど何でもできるのです． ``engine`` "
"， ``scene`` ， ``camera`` ，および ``mlab`` "
"という名前はすべて使用可能で，Pythonコードでスクリプト化できます．たとえば，上記のコマンドを実行した後，次のように実行できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:526
msgid ""
"The nice thing about this is that you do not loose any interactivity of the "
"application and can continue to use its UI as before, any network commands "
"will be simply run on top of this.  To serve on a UDP port use the "
":func:`serve_udp` function.  For more details on the ``server`` module "
"please look at the source code -- it is thoroughly documented."
msgstr ""
"これの良いところは，アプリケーションの対話性を失うことなく，以前と同じようにUIを使い続けることができ，ネットワーク・コマンドはこの上で単純に実行されることです．UDPポートでサービスするには"
" :func:`serve_udp` 機能を使います． ``server`` モジュールの詳細については，ソースコードを参照してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:533
msgid ""
"While this is very powerful it is also a huge security hole since the remote"
" user can do pretty much anything they want once connected to the server."
msgstr "これは非常に強力ですが，リモートユーザはサーバに接続すればほとんど何でもできるので，大きなセキュリティホールにもなります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:541
msgid "TCP server: the `serve_tcp` function"
msgstr "TCPサーバ: `serve_tcp` 関数"

#: ../../mayavi/docs/source/mayavi/tips.rst:553
msgid "UDP server: the `serve_udp` function"
msgstr "UDPサーバ: `serve_udp` 関数"

#: ../../mayavi/docs/source/mayavi/tips.rst:567
msgid "Animating a timeseries"
msgstr "時系列のアニメーション"

#: ../../mayavi/docs/source/mayavi/tips.rst:569
msgid ""
"If a file that mayavi can load has the form ``some_name[0-9]*.ext``, then it"
" is treated as part of a timeseries.  For example let us say you have the "
"following files:"
msgstr ""
"mayaviがロードできるファイルの形式が ``some_name[0-9]*.ext`` "
"である場合，それはタイムスライスの一部として扱われます．たとえば，次のファイルがあるとします．"

#: ../../mayavi/docs/source/mayavi/tips.rst:578
msgid ""
"If one loads the file using Mayavi, a slider will show up on the file reader"
" object which can be used to choose an appropriate timestep. There are also "
"buttons to automatically change the timestep. To do this, select the play "
"checkbox.  This can also be done programmatically as follows::"
msgstr ""
"Mayaviを使用してファイルをロードすると，ファイルリーダオブジェクトにスライダが表示され，これを使用して適切なタイムステップを選択できます．タイムステップを自動的に変更するボタンもあります．これを行うには，再生チェックボックスをオンにします．これは，次のようにプログラムで実行することもできます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:588
msgid ""
"Selecting the \"loop\" checkbox will loop over the files continuously. If "
"you have multiple files that are part of a timeseries, you can choose the "
"\"sync timestep\" option.  This will sync all the timesteps of the other "
"files that have the same number of timesteps as the current reader. The "
"\"Rescan files\" button will rescan the files on the disc to find newer ones"
" that are part of the timeseries."
msgstr ""
"\"loop\" チェックボックスを選択すると，ファイルが連続的にループします．タイムスケールの一部である複数のファイルがある場合は， \"sync "
"timestep\" "
"オプションを選択できます．これにより，現在のリーダーと同じタイムステップ数を持つ他のファイルのすべてのタイムステップが同期されます． \"Rescan "
"files\" ボタンをクリックすると，ディスク上のファイルが再スキャンされ，タイムスケールに含まれる新しいファイルが検索されます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:599
msgid "Animating a visualization"
msgstr "ビジュアル化のアニメーション化"

#: ../../mayavi/docs/source/mayavi/tips.rst:603
msgid ""
"Often users like to animate visualization without affecting the interactive "
"capabilities of the view.  For example you may want to rotate the camera "
"continuously, take a snapshot while continuing to interact with the Mayavi "
"UI.  To do this one can use the very convenient :func:`animate` decorator "
"provided with Mayavi.  Here is a simple example::"
msgstr ""
"多くの場合，ユーザはビューのインタラクティブ機能に影響を与えずにビジュアル化をアニメートします．たとえば，カメラを連続的に回転させながら，Mayavi "
"UIとの対話を続けながらスナップショットを撮るとします．これを行うには，Mayaviに用意されている非常に便利な :func:`animate` "
"デコレータを使用できます．簡単な例を次に示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:621
msgid ""
"Notice the use of ``yield`` in the above, this is *very* crucial to this "
"working.  This example will continuously rotate the camera without affecting"
" the UI's interactivity.  It also pops up a little UI that lets you start "
"and stop the animation and change the time interval between calls to your "
"function.  For more specialized use you can pass arguments to the "
"decorator::"
msgstr ""
"上記の ``yield`` の使用に注意してください，これはこの動作に *とても* "
"重要です．この例では，UIのインタラクティブ性に影響を与えずに，カメラを連続的に回転させます．また，アニメーションの開始と停止，および関数の呼び出し間隔の変更を行うための小さなUIも表示されます．より専門的に使用するために，引数をデコレータに渡すことができます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:635
msgid ""
"If you don't want to import all of ``mlab``, the animate decorator is "
"available from::"
msgstr "すべての ``mlab`` をインポートしたくない場合は，animateデコレータを次の場所から利用できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:640
msgid ""
"Note that to start the event loop, *i.e.* to get the animation running, you "
"will need to call :func:`show` if you do not already have a GUI environment "
"running."
msgstr ""
"イベントループを開始する， *つまり* アニメーションを実行するには，GUI環境をまだ実行していない場合に :func:`show` "
"を呼び出す必要があることに注意してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:644
msgid "Here is another example illustrating the use of the decorator::"
msgstr "次にデコレータの使用例を示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:662
msgid ""
"For more details check the documentation of the :func:`animate` decorator "
"available in the :ref:`mlab-reference`. For an example using it, alongside "
"with the `visual` handy for object-movement animation, see "
":ref:`example_mlab_visual`."
msgstr ""
"詳細については，  :ref:`mlab-reference` にある :func:`animate` "
"デコレータのドキュメントを参照してください．このデコレータをオブジェクト移動アニメーションに便利な `visual` とともに使用する例については，  "
":ref:`example_mlab_visual` を参照してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:669
msgid ""
"If you want to change the data of an object in an animation, see :ref:`mlab-"
"animating-data`"
msgstr "アニメーション内のオブジェクトのデータを変更する場合は， :ref:`mlab-animating-data` を参照してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:674
msgid "Creating a movie from an animation"
msgstr "アニメーションからのムービーの作成"

#: ../../mayavi/docs/source/mayavi/tips.rst:676
msgid ""
"It is easy to create a movie from either an animation or by playing a "
"timeseries.  To do this on the UI, select the Mayavi Scene and navigate to "
"the Movie tab and select the record checkbox.  After this, if one animates a"
" timestep via the \"play\" checkbox referred to in "
":ref:`animating_a_timeseries`, then a stack of images will be created in the"
" directory specified in the movie UI.  This will also happen if one runs an "
"animation as discussed in :ref:`animating_a_visualization`."
msgstr ""
"ムービーは，アニメーションまたはタイムスケールを再生して簡単に作成できます．UI上でこれを行うには，Mayavi "
"Sceneを選択し，Movieタブに移動してrecordチェックボックスを選択します．この後， "
":ref:`animating_a_timeseries` で参照されている \"play\" "
"チェックボックスを使用してタイムステップをアニメートすると，ムービーUIで指定されているディレクトリにイメージのスタックが作成されます．これは， "
":ref:`animating_a_visualization` で説明されているようにアニメーションを実行する場合にも発生します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:684
msgid "This can also be scripted with mlab for example as follows::"
msgstr "たとえば，次のようにmlabを使用してスクリプトを作成することもできます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:691
msgid ""
"This will create a set of images, one for each step of the animation. The "
"``movie_maker`` instance is available on each created scene."
msgstr ""
"これにより，アニメーションの各ステップに1つずつ，イメージのセットが作成されます． ``movie_maker`` "
"インスタンスは，作成した各シーンで使用できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:696
msgid "Animating a series of images"
msgstr "一連のイメージをアニメートする"

#: ../../mayavi/docs/source/mayavi/tips.rst:698
msgid ""
"Let's say you have a stack of PNG or JPEG files that are numbered serially "
"that you want to animate on a Mayavi scene.  Here is a simple script (called"
" ``img_movie.py``)::"
msgstr ""
"Mayaviシーンでアニメートする一連の番号付きPNGまたはJPEGファイルがあるとします．簡単なスクリプトを次に示します( "
"``img_movie.py`` と呼ばれています)．"

#: ../../mayavi/docs/source/mayavi/tips.rst:716
msgid ""
"The ``Timer`` class lets you call a function without blocking the running "
"user interface.  The first argument is the time after which the function is "
"to be called again in milliseconds.  The ``animate`` function is a generator"
" and changes the timestep of the source.  This script will animate the stack"
" of images 10 times.  The script animates the first data source by default."
"  This may be changed easily."
msgstr ""
"``Timer`` "
"クラスを使用すると，実行中のユーザインターフェイスをブロックせずに関数を呼び出すことができます．最初の引数は，関数がミリ秒単位で再度呼び出される時間です．"
" ``animate`` "
"関数はジェネレータであり，ソースのタイムステップを変更します．このスクリプトは，イメージのスタックを10回アニメートします．スクリプトでは，デフォルトで最初のデータ・ソースがアニメーション化されます．これは簡単に変更できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:723
msgid "To use this script do this::"
msgstr "このスクリプトを使用するには，次の操作を行います．"

#: ../../mayavi/docs/source/mayavi/tips.rst:729
msgid "Making movies from a stack of images"
msgstr "画像のスタックからムービーを作成します"

#: ../../mayavi/docs/source/mayavi/tips.rst:731
msgid ""
"This isn't really related to Mayavi but is a useful trick nonetheless. Let's"
" say you generate a stack of images using Mayavi say of the form "
"``anim%03d.png`` (i.e. ``anim000.png``, ``anim001.png`` and so on), you can "
"make this into a movie.  If you have ``mencoder`` installed try this::"
msgstr ""
"これは実際にはMayaviとは関係ありませんが，便利なトリックです．たとえば， ``anim%03d.png`` ( ``anim000.png`` ，"
" ``anim001.png`` など)という形式のMayaviコマンドを使用してイメージのスタックを生成すると，これをムービーにすることができます． "
"``mencoder`` がインストールされている場合は，次の操作を試してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:740
msgid "If you have ffmpeg installed you may try this::"
msgstr "ffmpegがインストールされている場合は，以下を試してみてください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:749
msgid "Scripting from the command line"
msgstr "コマンドラインからのスクリプティング"

#: ../../mayavi/docs/source/mayavi/tips.rst:751
msgid ""
"The Mayavi application allows for very powerful :ref:`command-line-"
"arguments` that lets you build a complex visualization from your shell.  "
"What follow is a bunch of simple examples illustrating these."
msgstr ""
"Mayaviアプリケーションでは，シェルから複雑なビジュアライゼーションを構築できる非常に強力な :ref:`command-line-"
"arguments` が可能です．以下に，これらを説明する簡単な例を示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:756
msgid ""
"The following example creates a ``ParametricSurface`` source and then "
"visualizes glyphs on its surface colored red::"
msgstr "次の例では， ``ParametricSurface`` ソースを作成し，サーフェス上の赤のグリフを表示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:764
msgid ""
"Note that ``-s\"string\"`` applies the string on the last object (also "
"available as ``last_obj``), which is the glyph."
msgstr ""
"``-s\"string\"`` はグリフである最後のオブジェクト( ``last_obj`` "
"としても利用可能)に文字列を適用することに注意してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:767
msgid ""
"This example turns off coloring of the glyph and changes the glyph to "
"display::"
msgstr "次の例では，Glyphのカラーリングをオフにし，表示するGlyphを変更します"

#: ../../mayavi/docs/source/mayavi/tips.rst:775
msgid "Note the use of ``last_obj`` in the above."
msgstr "上記の ``last_obj`` の使い方に注意してください．"

#: ../../mayavi/docs/source/mayavi/tips.rst:779
msgid "Texture mapping actors"
msgstr "テクスチャマッピングアクター"

#: ../../mayavi/docs/source/mayavi/tips.rst:781
msgid ""
"Here is a simple example showing how to texture map an iso-surface with the "
"data that ships with the Mayavi sources (the data files are in the examples "
"directory)::"
msgstr ""
"以下は，Mayaviソースに付属するデータ(データファイルはexamplesディレクトリにあります)を使用してアイソサーフェスをテクスチャマッピングする方法を示す簡単な例です．"

#: ../../mayavi/docs/source/mayavi/tips.rst:793
msgid ""
"It should be relatively straightforward to change this example to use a "
"``ParametricSurface`` instead and any other image of your choice. Notice how"
" the texture image (``masonry.jpg``) is set in the last line of the above.  "
"The image reader is the first child of the current scene and we set it as "
"the ``texture_source_object`` of the isosurface actor."
msgstr ""
"代わりに ``ParametricSurface`` "
"とあなたが選んだ他の画像を使うようにこの例を変えるのは比較的簡単であるべきです．上の最後の行で，テクスチャイメージ( ``masonry.jpg`` "
")がどのように設定されているかに注目してください．イメージリーダは現在のシーンの最初の子であり，これをisosurfaceアクターの "
"``texture_source_object`` として設定します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:801
msgid "Shifting data and plotting"
msgstr "データのシフトとプロット"

#: ../../mayavi/docs/source/mayavi/tips.rst:803
msgid ""
"Sometimes you need to shift/transform your input data in space and visualize"
" that in addition to the original data.  This is useful when you'd like to "
"do different things to the same data and see them on the same plot.  This "
"can be done with Mayavi using the ``TransformData`` filter for "
"``StructuredGrid``, ``PolyData`` and ``UnstructuredGrid`` datasets. Here is "
"an example using the ``ParametricSurface`` data source::"
msgstr ""
"入力データを空間でシフト/変換し，元のデータに加えて視覚化する必要がある場合があります．これは，同じデータに対して異なる操作を行い，同じプロットで表示する場合に便利です．これは，"
" ``StructuredGrid`` ， ``PolyData`` および ``UnstructuredGrid`` データセットに対して "
"``TransformData`` フィルタを使用してMayaviで実行できます．``ParametricSurface`` "
"データソースを使用した例を次に示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:816
msgid ""
"If you have an ``ImageData`` dataset then you can change the origin, spacing"
" and extents alone by using the ``ImageChangeInformation`` filter.  Here is "
"a simple example with the standard Mayavi image data::"
msgstr ""
"``ImageData`` データセットがある場合は， ``ImageChangeInformation`` "
"フィルタを使用して，原点，間隔，範囲だけを変更できます．次に，標準のMayaviイメージデータを使用した簡単な例を示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:829
msgid "Using the ``UserDefined`` filter"
msgstr "``UserDefined`` フィルタの使用"

#: ../../mayavi/docs/source/mayavi/tips.rst:831
msgid ""
"The ``UserDefined`` filter in Mayavi lets you wrap around existing VTK "
"filters easily.  Here are a few examples::"
msgstr "Mayaviの``UserDefined`` フィルタを使用すると，既存のVTKフィルタを簡単にラップできます．次に例を示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:843
msgid ""
"This one uses a ``tvtk.GeometryFilter`` to perform extent based clipping of "
"the parametric surface generated.  Note the specification of the ``-f "
"UserDefined:GeometryFilter``.  This data is then cleaned using the "
"``tvtk.CleanPolyData`` filter."
msgstr ""
"この例では， ``tvtk.GeometryFilter`` を使用して，生成されたパラメトリックサーフェイスの範囲ベースのクリッピングを実行します． "
"``-f UserDefined:GeometryFilter`` の仕様に注意してください．このデータは ``tvtk.CleanPolyData``"
" フィルタを使用して消去されます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:848
msgid ""
"Under :ref:`mlab <simple-scripting-with-mlab>`, the `Userdefined` can be "
"used to wrap eg a `GeometryFilter` VTK filter with::"
msgstr ""
":ref:`mlab <simple-scripting-with-mlab>` の下で `Userdefined` を使用すると，例えば "
"`GeometryFilter` VTKフィルタを次のようにラップすることができます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:853
msgid ""
"With :ref:`mlab <simple-scripting-with-mlab>`, the `user_defined` function "
"can either take as a filter argument the name of the VTK filter to be used, "
"or an already-instanciated instance of the filter."
msgstr ""
":ref:`mlab <simple-scripting-with-mlab>` の場合， `user_defined` "
"関数は，使用されるVTKフィルタの名前をフィルタ引数として取ることも，すでにインスタンス化されているフィルタのインスタンスを取ることもできます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:859
msgid ""
"With the `UserDefined` filter, as with most Mayavi filter, the raw TVTK "
"object can be accessed as the `filter` attribute of the Mayavi filter "
"object."
msgstr ""
"`UserDefined` フィルタを使用すると，ほとんどのMayaviフィルタと同様に，生のTVTKオブジェクトにMayaviフィルタオブジェクトの "
"`filter` アトリビュートとしてアクセスできます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:863
msgid ""
"The :ref:`example_image_cursor_filter` gives a full example of using the "
"UserDefined filter. The :ref:`example_tvtk_segmentation` is a full example "
"of building a complex VTK pipeline with a heavy use of the UserDefined "
"filter."
msgstr ""
":ref:`example_image_cursor_filter` は，UserDefinedフィルタを使用する完全な例を提供します． "
":ref:`example_tvtk_segmentation` "
"は，UserDefinedフィルタを多用して複雑なVTKパイプラインを構築する完全な例です．"

#: ../../mayavi/docs/source/mayavi/tips.rst:871
msgid "Sharing the same data between scenes"
msgstr "シーン間での同じデータの共有"

#: ../../mayavi/docs/source/mayavi/tips.rst:873
msgid ""
"If you want to display different views of the same data on different, you "
"will have to create different Mayavi data sources, as a data source can "
"belong on to one scene. However, this does not mean that you need to copy "
"the data, or recreate the source from scratch. The trick is to create a "
"second Mayavi data source pointing to the same underlying VTK dataset, and "
"attach it to another scene (see :ref:`data-structures-used-by-mayavi` for "
"the difference between a Mayavi source and a VTK dataset)."
msgstr ""
"同じデータを異なるビューに表示する場合は，データソースが1つのシーンに属することができるため，異なるMayaviデータソースを作成する必要があります．ただし，データをコピーしたり，ソースを最初から再作成したりする必要はありません．コツは，同じ基本VTKデータセットを指す別のMayaviデータソースを作成し，それを別のシーン(MayaviソースとVTKデータセットの違いについては"
" :ref:`data-structures-used-by-mayavi` を参照してください．)にアタッチすることです．"

#: ../../mayavi/docs/source/mayavi/tips.rst:882
msgid "Using mlab"
msgstr "mlabの使用"

#: ../../mayavi/docs/source/mayavi/tips.rst:884
msgid ""
"Every visualization object returned by :ref:`mlab <simple-scripting-with-"
"mlab>` has a `mlab_source` attribute, which exposes the VTK dataset as "
"`dataset`. In addition, the :ref:`mlab pipeline <controlling-the-pipeline-"
"with-mlab-scripts>` functions for adding modules know how to use raw VTK "
"datasets. Thus exposing the dataset in a new figure can simply by done by "
"feeding the `mlab_source.dataset` attribute of a visualization object "
"created by mlab to an `mlab.pipeline` function::"
msgstr ""
":ref:`mlab <simple-scripting-with-mlab>` から返される全ての可視化オブジェクトは `mlab_source` "
"属性を持ち，これは `dataset` としてVTKデータセットを公開します．加えて，モジュールを追加する :ref:`mlab pipeline "
"<controlling-the-pipeline-with-mlab-scripts>` "
"関数は生のVTKデータセットの使い方を知っています．したがって，新しい図でデータセットを公開するには，mlabによって作成された視覚化オブジェクトの "
"`mlab_source.dataset` 属性を `mlab.pipeline` 関数に渡すだけで済みます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:899
msgid ""
"The above example creates two figures displaying the same data, one with "
"iso-surfaces, and the other with an image plane widget."
msgstr ""
"上の例では，同じデータを表示する2つのフィギュアを作成します．1つはアイソサーフェスを使用し，もう1つはイメージプレーンウィジェットを使用します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:902
msgid ""
"Alternatively, it can be useful to be explicit about the figure that the new"
" module is added onto, rather than using the `mlab` current figure. This is "
"important to make the code easier to read in situations where the current "
"figure is not clear, for instance in an interactive application, rather than"
" a script::"
msgstr ""
"あるいは， `mlab` "
"の現在の図を使用するよりも，新しいモジュールが追加された図について明示することが有用である可能性があります．これは，現在の数字が明確でないスクリプトではなく対話型アプリケーションなどの状況でコードを読みやすくするために重要です．"

#: ../../mayavi/docs/source/mayavi/tips.rst:911
msgid ""
"The :ref:`example_volume_slicer` shows a complex dialog exposing the same "
"data through different views via `mlab.pipeline`."
msgstr ""
":ref:`example_volume_slicer` は， `mlab.pipeline` "
"を介して異なるビューを通して同じデータを公開する複雑なダイアログを示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:915
msgid "Using the core Mayavi API"
msgstr "コアMayavi APIの使用"

#: ../../mayavi/docs/source/mayavi/tips.rst:917
msgid ""
"You can also do this fully explicitly by creating the objects yourself "
"through the Mayavi core api, and adding them to the pipeline, rather than "
"using factories::"
msgstr ""
"また，ファクトリを使用する代わりに，MayaviコアAPIを使用してオブジェクトを自分で作成し，パイプラインに追加することで，これを完全に明示的に行うこともできます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:934
msgid "Changing the interaction with a scene"
msgstr "シーンとのインタラクションの変更"

#: ../../mayavi/docs/source/mayavi/tips.rst:936
msgid ""
"The default 3D interaction with the scene (left click on the background "
"rotates the scene, right click scales, middle click pans) is not suited for "
"every visualization. For instance, in can be interesting to restrict the "
"movement to 2D, e.g. when viewing an object in the 'x' direction. This is "
"done by changing the `interactor_style` of a scene. Here is an example to "
"use Mayavi as a 2D image viewer::"
msgstr ""
"シーンとの既定の3Dインタラクション(背景を左クリックするとシーンが回転し，右クリックするとスケールが回転し，中クリックするとパンが回転します)は，すべての表示に適しているわけではありません．たとえば，inは，オブジェクトを"
" 'x' 方向に見ているときなどに，移動を2Dに制限することができます．これを行うには，シーンの  `interactor_style` "
"を変更します．Mayaviを2Dイメージビューアとして使用する例を次に示します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:951
msgid ""
"Another useful interactor is the 'terrain' interactor, handy to have natural"
" movement in scenes where you want the 'up' vector to be always pointing in "
"the 'z' direction::"
msgstr ""
"もう1つの便利な相互作用子は 'terrain' 相互作用子で， 'up' ベクトルを常に 'z' 方向に向けたいシーンで自然な動きをするのに便利です．"

#: ../../mayavi/docs/source/mayavi/tips.rst:962
msgid ""
"VTK has many different interactors. An easy way to list them is to display "
"the VTK class browser (via the help menu, in the `mayavi2` application) and "
"to search for \"Interactor\". Another option is to tab complete on Ipython, "
"on `tvtk.InteractorStyle`."
msgstr ""
"VTKには多くの異なるインターアクターがあります．これらを一覧表示する簡単な方法は，VTKクラスブラウザを表示し(ヘルプメニューの `mayavi2` "
"アプリケーション)， \"Interactor\" を検索することです．もう1つのオプションは， `tvtk.InteractorStyle` "
"でIpythonをタブ補完することです．"

#: ../../mayavi/docs/source/mayavi/tips.rst:971
msgid "Accelerating a Mayavi script"
msgstr "Mayaviスクリプトの高速化"

#: ../../mayavi/docs/source/mayavi/tips.rst:973
msgid ""
"You've just created a nice Mayavi/mlab script and now want to generate an "
"animation or a series of images.  You realize that it is way too slow "
"rendering the images and takes ages to finish.  There are two simple ways to"
" speed up the rendering.  Let's assume that ``obj`` is any Mayavi pipeline "
"object that has a ``scene`` attribute::"
msgstr ""
"これでMayavi/mlabスクリプトが完成し，アニメーションまたは一連のイメージを生成することができました．イメージのレンダリングに時間がかかりすぎて，完了までに時間がかかることに気付くでしょう．レンダリングを高速化する簡単な方法は2つあります．"
" ``obj`` が ``scene`` 属性を持つMayaviパイプラインオブジェクトであると仮定します．"

#: ../../mayavi/docs/source/mayavi/tips.rst:985
msgid ""
"This will speed things up for complex visualizations sometimes by an order "
"of magnitude."
msgstr "これにより，複雑な視覚化の処理速度が1桁向上することがあります．"

#: ../../mayavi/docs/source/mayavi/tips.rst:988
msgid ""
"While saving the visualization to an image you can speed up the image "
"generation at the cost of loosing out on anti-aliasing by doing the "
"following::"
msgstr "ビジュアライゼーションをイメージに保存するときに，次の操作を行うと，アンチエイリアシングを犠牲にしてイメージ生成を高速化できます．"

#: ../../mayavi/docs/source/mayavi/tips.rst:994
msgid ""
"The default value is typically 8 and the rendered image will be nicely anti-"
"aliased.  Setting it to zero will not produce too much difference in the "
"rendered image but any smooth lines will now appear slightly jagged. "
"However, the rendering will be much faster.  So if this is acceptable (try "
"it) this is a mechanism to speed up the generation of images."
msgstr ""
"既定値は通常8で，レンダリングイメージには適切なアンチエイリアシングが適用されます．0に設定すると，レンダーしたイメージに大きな違いは生じませんが，スムースなラインは少しギザギザに表示されます．ただし，レンダリングははるかに高速になります．したがって，これが許容される場合(試してみてください)，これはイメージの生成を高速化するメカニズムです．"
