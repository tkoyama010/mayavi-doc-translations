# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.2.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-20 01:49+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../mayavi/docs/source/mayavi/api/core_view_objects.rst:3
msgid "Main view and UI objects"
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/core_view_objects.rst:5
msgid "This is an API reference of the views for the main objects. The section :ref:`builing_applications` gives some context on how to use them."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/core_view_objects.rst:12
msgid "Scene UIs: :class:`DecoratedScene` and :class:`MayaviScene`"
msgstr ""

#: ../../mayavi/mayavi/core/ui/mayavi_scene.py:docstring of mayavi.core.ui.mayavi_scene.MayaviScene:1
msgid "Bases: :py:class:`~pyface.base_toolkit.Toolkit.__call__.<locals>.Unimplemented`"
msgstr ""

#: ../../mayavi/mayavi/core/ui/mayavi_scene.py:docstring of mayavi.core.ui.mayavi_scene.MayaviScene:1
msgid "A scene UI, similar to a decorated scene, but with more buttons."
msgstr ""

#: ../../mayavi/mayavi/core/ui/mayavi_scene.py:docstring of mayavi.core.ui.mayavi_scene.MayaviScene.show_engine:1
msgid "Open the engine view corresponding to the engine of the scene."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/core_view_objects.rst:24
msgid ":class:`SceneEditor`"
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/core_view_objects.rst:30
msgid ":class:`MlabSceneModel`"
msgstr ""

#: ../../mayavi/mayavi/tools/mlab_scene_model.py:docstring of mayavi.tools.mlab_scene_model.MlabSceneModel:1
msgid "Bases: :py:class:`~tvtk.pyface.scene_model.SceneModel`"
msgstr ""

#: ../../mayavi/mayavi/tools/mlab_scene_model.py:docstring of mayavi.tools.mlab_scene_model.MlabSceneModel:1
msgid "An container for an mlab model, that can be exposed using a Mayavi scene in a TraitsUI view."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/core_view_objects.rst:36
msgid ":class:`EngineView` and  :class:`EngineRichView`"
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/core_view_objects.rst:38
msgid "These are two objects to be used as views for an engine::"
msgstr ""

#: ../../mayavi/mayavi/core/ui/engine_view.py:docstring of mayavi.core.ui.engine_view.EngineView:1
msgid "Bases: :py:class:`~traits.has_traits.HasTraits`"
msgstr ""

#: ../../mayavi/mayavi/core/ui/engine_view.py:docstring of mayavi.core.ui.engine_view.EngineView:1
msgid "A view displaying the engine's object tree."
msgstr ""

#: ../../mayavi/mayavi/core/ui/engine_rich_view.py:docstring of mayavi.core.ui.engine_rich_view.EngineRichView.default_traits_view:1
#: ../../mayavi/mayavi/core/ui/engine_view.py:docstring of mayavi.core.ui.engine_view.EngineView.default_traits_view:1
msgid "The default traits view of the Engine View."
msgstr ""

#: ../../mayavi/mayavi/core/ui/engine_rich_view.py:docstring of mayavi.core.ui.engine_rich_view.EngineRichView:1
msgid "Bases: :py:class:`~mayavi.core.ui.engine_view.EngineView`"
msgstr ""

#: ../../mayavi/mayavi/core/ui/engine_rich_view.py:docstring of mayavi.core.ui.engine_rich_view.EngineRichView:1
msgid "A view displaying the engine's object tree, alongside with a panel to edit the objects."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/index.rst:3
msgid "Mayavi API reference"
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/pipeline_objects.rst:3
msgid "Pipeline base objects"
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/pipeline_objects.rst:5
msgid "This is an API reference of the base classes of the pipeline objects. Please refer to section :ref:`advanced-use-of-mayavi` for instructions on how to use them."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/pipeline_objects.rst:12
msgid ":class:`Scene`"
msgstr ""

#: ../../mayavi/mayavi/core/module_manager.py:docstring of mayavi.core.module_manager.ModuleManager:1
#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase:1
#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene:1
msgid "Bases: :py:class:`~mayavi.core.base.Base`"
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene:1
msgid "The Mayavi scene class."
msgstr ""

#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.add_child:1
#: ../../mayavi/mayavi/core/module_manager.py:docstring of mayavi.core.module_manager.ModuleManager.add_child:1
#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.add_child:1
#: ../../mayavi/mayavi/core/source.py:docstring of mayavi.core.source.Source.add_child:1
msgid "This method intelligently adds a child to this object in the MayaVi pipeline."
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:1
msgid "Add a picking callback on mouse click."
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:3
msgid "When the mouse button is press, object picking is called, and the given callback is invoked with the resulting pick as an argument."
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:7
msgid "**Keyword arguments**"
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:0
msgid "type"
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:9
msgid "'point', 'cell', or 'world' The picker type used for picking."
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:0
msgid "button"
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:11
msgid "'Left', 'Middle', or 'Right' The mouse button triggering the picking event."
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:0
msgid "remove"
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:13
msgid "boolean If remove is True, the callback is removed from the list of callbacks."
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:17
msgid "**Returns** picker: a tvtk picker"
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:19
msgid "The picker that will be used to do the picking."
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:21
msgid "**Notes**"
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:23
msgid "The callback must accept one argument: the TVTK picker."
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.on_mouse_pick:25
msgid "The same callback can be added multiple times."
msgstr ""

#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.remove:1
msgid "Remove ourselves from the mayavi pipeline."
msgstr ""

#: ../../mayavi/mayavi/core/module_manager.py:docstring of mayavi.core.module_manager.ModuleManager.remove_child:1
#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.remove_child:1
#: ../../mayavi/mayavi/core/source.py:docstring of mayavi.core.source.Source.remove_child:1
msgid "Remove specified child from our children."
msgstr ""

#: ../../mayavi/mayavi/core/module_manager.py:docstring of mayavi.core.module_manager.ModuleManager.start:1
#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.start:1
#: ../../mayavi/mayavi/core/source.py:docstring of mayavi.core.source.Source.start:1
msgid "This is invoked when this object is added to the mayavi pipeline."
msgstr ""

#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.stop:1
#: ../../mayavi/mayavi/core/module_manager.py:docstring of mayavi.core.module_manager.ModuleManager.stop:1
#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.stop:1
#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.stop:1
#: ../../mayavi/mayavi/core/source.py:docstring of mayavi.core.source.Source.stop:1
msgid "Invoked when this object is removed from the mayavi pipeline."
msgstr ""

#: ../../mayavi/mayavi/core/module_manager.py:docstring of mayavi.core.module_manager.ModuleManager.tno_can_add:1
#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.tno_can_add:1
#: ../../mayavi/mayavi/core/source.py:docstring of mayavi.core.source.Source.tno_can_add:1
msgid "Returns whether a given object is droppable on the node."
msgstr ""

#: ../../mayavi/mayavi/core/module_manager.py:docstring of mayavi.core.module_manager.ModuleManager.tno_drop_object:1
#: ../../mayavi/mayavi/core/scene.py:docstring of mayavi.core.scene.Scene.tno_drop_object:1
#: ../../mayavi/mayavi/core/source.py:docstring of mayavi.core.source.Source.tno_drop_object:1
msgid "Returns a droppable version of a specified object."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/pipeline_objects.rst:18
msgid ":class:`Source`"
msgstr ""

#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module:1
#: ../../mayavi/mayavi/core/source.py:docstring of mayavi.core.source.Source:1
msgid "Bases: :py:class:`~mayavi.core.pipeline_base.PipelineBase`"
msgstr ""

#: ../../mayavi/mayavi/core/source.py:docstring of mayavi.core.source.Source:1
msgid "Base class for the sources objects in the pipeline."
msgstr ""

#: ../../mayavi/mayavi/core/source.py:docstring of mayavi.core.source.Source.add_module:1
msgid "Adds a module smartly.  If no ModuleManager instances are children, it first creates a new ModuleManager and then adds the module to it.  If not it adds the module to the first available ModuleManager instance."
msgstr ""

#: ../../mayavi/mayavi/core/source.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:1
msgid "Save our output (by default the first of our outputs) to the specified filename as a VTK file.  Both old style and new style XML files are supported."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/pipeline_objects.rst:24
msgid ":class:`Filter`"
msgstr ""

#: ../../mayavi/mayavi/core/filter.py:docstring of mayavi.core.filter.Filter:1
msgid "Bases: :py:class:`~mayavi.core.source.Source`"
msgstr ""

#: ../../mayavi/mayavi/core/filter.py:docstring of mayavi.core.filter.Filter:1
msgid "Base class for all the Mayavi filters."
msgstr ""

#: ../../mayavi/mayavi/core/filter.py:docstring of mayavi.core.filter.Filter.setup_pipeline:1
msgid "Override this method so that it *creates* its tvtk pipeline."
msgstr ""

#: ../../mayavi/mayavi/core/filter.py:docstring of mayavi.core.filter.Filter.setup_pipeline:4
msgid "This method is invoked when the object is initialized via `__init__`.  Note that at the time this method is called, the tvtk data pipeline will *not* yet be setup.  So upstream data will not be available.  The idea is that you simply create the basic objects and setup those parts of the pipeline not dependent on upstream sources and filters."
msgstr ""

#: ../../mayavi/mayavi/core/filter.py:docstring of mayavi.core.filter.Filter.start:1
#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.start:1
#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.start:1
msgid "This is invoked when this object is added to the mayavi pipeline.  Note that when start is invoked, all the other information for the pipeline should be already set."
msgstr ""

#: ../../mayavi/mayavi/core/filter.py:docstring of mayavi.core.filter.Filter.stop:1
msgid "Invoked when this object is removed from the mayavi pipeline.  This is where you remove your actors from the scene."
msgstr ""

#: ../../mayavi/mayavi/core/filter.py:docstring of mayavi.core.filter.Filter.update_data:1
msgid "Override this method to do what is necessary when upstream data changes."
msgstr ""

#: ../../mayavi/mayavi/core/filter.py:docstring of mayavi.core.filter.Filter.update_data:4
#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.update_data:4
msgid "This method is invoked (automatically) when any of the inputs sends a `data_changed` event."
msgstr ""

#: ../../mayavi/mayavi/core/filter.py:docstring of mayavi.core.filter.Filter.update_pipeline:1
#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.update_pipeline:1
msgid "Override this method so that it *updates* the tvtk pipeline when data upstream is known to have changed."
msgstr ""

#: ../../mayavi/mayavi/core/filter.py:docstring of mayavi.core.filter.Filter.update_pipeline:4
#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.update_pipeline:4
msgid "This method is invoked (automatically) when the input fires a `pipeline_changed` event."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/pipeline_objects.rst:30
msgid ":class:`ModuleManager`"
msgstr ""

#: ../../mayavi/mayavi/core/module_manager.py:docstring of mayavi.core.module_manager.ModuleManager:1
msgid "The module manager node (represented as 'Colors and Legends')."
msgstr ""

#: ../../mayavi/mayavi/core/module_manager.py:docstring of mayavi.core.module_manager.ModuleManager.update:1
msgid "Update any internal data."
msgstr ""

#: ../../mayavi/mayavi/core/module_manager.py:docstring of mayavi.core.module_manager.ModuleManager.update:3
msgid "This is invoked when the source changes or when there are pipeline/data changes upstream."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/pipeline_objects.rst:36
msgid ":class:`Module`"
msgstr ""

#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module:1
msgid "Base class for the Mayavi modules."
msgstr ""

#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.setup_pipeline:1
msgid "Override this method so that it *creates* the tvtk pipeline."
msgstr ""

#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.setup_pipeline:4
msgid "This method is invoked when the object is initialized via `__init__`.  Note that at the time this method is called, the tvtk data pipeline will *not* yet be setup.  So upstream data will not be available.  The idea is that you simply create the basic objects and setup those parts of the pipeline not dependent on upstream sources and filters.  You should also set the `actors` attribute up at this point."
msgstr ""

#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.tno_allows_children:1
msgid "Returns whether chidren of this object are allowed or not."
msgstr ""

#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.tno_get_children:1
msgid "Gets the object's children."
msgstr ""

#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.tno_has_children:1
msgid "Returns whether or not the object has children."
msgstr ""

#: ../../mayavi/mayavi/core/module.py:docstring of mayavi.core.module.Module.update_data:1
msgid "Override this method so that it flushes the vtk pipeline if that is necessary."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/pipeline_objects.rst:43
msgid ":class:`PipelineBase`"
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase:1
msgid "Base class for all the Source, Filters and Modules in the pipeline."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.add_actors:1
msgid "Adds `self.actors` to the scene."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.add_actors:3
msgid "This is typically called when start is invoked.  You should avoid calling this unless you know what you are doing."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.configure_connection:1
msgid "Configure topology for vtk pipeline obj."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.configure_input:1
msgid "Configure the inp using op."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.configure_input_data:1
msgid "Configure the input data for vtk pipeline object obj."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.configure_source_data:1
msgid "Configure the source data for vtk pipeline object obj."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.get_output_dataset:1
msgid "Return the output dataset of this object."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.get_output_object:1
msgid "We assume the old pipeline topology. As such we return the first output."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.has_output_port:1
msgid "We assume the old pipeline topology. As such we assume no output_port exists."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.remove_actors:1
msgid "Removes `self.actors` from the scene."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.remove_actors:3
msgid "This is typically called when stop is invoked.  You should avoid calling this unless you know what you are doing."
msgstr ""

#: ../../mayavi/mayavi/core/pipeline_base.py:docstring of mayavi.core.pipeline_base.PipelineBase.render:1
msgid "Invokes render on the scene, this in turn invokes Render on the VTK pipeline."
msgstr ""

#: ../../mayavi/docs/source/mayavi/api/pipeline_objects.rst:49
msgid ":class:`Engine`"
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine:1
msgid "Bases: :py:class:`~traits.has_traits.HasStrictTraits`"
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine:1
msgid "The Mayavi engine base class."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:1
msgid "Adds a filter to the pipeline at an appropriate point. Adds it to the selected object, or to an object passed as the kwarg `obj`."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:1
msgid "Adds a module to the pipeline at an appropriate point. Adds it to the selected object, or to an object passed through the kwarg `obj`."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.add_scene:1
msgid "Add given `scene` (a `pyface.tvtk.scene.Scene` instance) to the mayavi engine so that mayavi can manage the scene.  This is used when the user creates a scene.  Note that for the `EnvisageEngine` this is automatically taken care of when you create a new scene using the TVTK scene plugin."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:5
#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:8
#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:12
#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.add_scene:8
#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.get_viewer:4
msgid "Parameters:"
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:10
#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.add_scene:10
msgid "scene - `pyface.tvtk.scene.Scene`"
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.add_scene:12
msgid "The scene that needs to be managed from mayavi."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.add_scene:14
msgid "name - `str`"
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.add_scene:15
msgid "The name assigned to the scene.  It tries to determine the name of the scene from the passed scene instance.  If this is not possible it defaults to 'Mayavi Scene'."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:1
msgid "Adds a source to the pipeline. Uses the current scene unless a scene is given in the scene keyword argument."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:1
msgid "Given a scene created from new_scene, this method closes it and removes the scene from the list of scenes we manage."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:7
msgid "scene - `pyface.tvtk.scene.Scene` or an object that holds a reference to a `pyface.tvtk.scene.Scene` in a `scene` attribute."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.dialog_view:1
msgid "Default dialog view for Engine objects."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.get_viewer:1
msgid "Return the viewer associated with a given scene."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.get_viewer:5
msgid "scene - An `mayavi.core.scene.Scene` instance."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:1
msgid "Given a file/file name this loads the visualization."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:1
msgid "Create or manage a new VTK scene window.  If no `viewer` argument is provided, the method creates a new viewer using `self.scene_factory`.  If `self.scene_factory` is `None` then it creates an `ivtk` viewer.  This code requires that the `viewer` has a `scene` attribute/trait that is a `pyface.tvtk.scene.Scene`.  It also works best if the viewer supports `closing` and `activated` events."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:9
msgid "The method returns the created viewer."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:14
msgid "viewer - The viewer object, if None, one is created for you."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:16
msgid "name - The name attribute of the viewer"
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:18
msgid "``**kwargs`` - The extra keyword arguments are passed along to the scene factory."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:1
msgid "Open a file given a filename if possible in either the current scene or the passed `scene`."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.record:1
msgid "This is merely a convenience method to record messages to the script recorder."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:1
msgid "Remove a given `scene` (a `pyface.tvtk.scene.Scene` instance) from the mayavi engine if it is already being managed by mayavi.  Note that for the `EnvisageEngine` this is automatically taken care of when you close a scene started using the TVTK scene plugin."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:12
msgid "The scene that needs to be removed from mayavi."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of apptools.scripting.recordable.recordable.<locals>._wrapper:1
msgid "Given a file or a file name, this saves the current visualization to the file."
msgstr ""

#: ../../mayavi/mayavi/core/engine.py:docstring of mayavi.core.engine.Engine.start:1
msgid "This is called by the plugin when the plugin actually starts."
msgstr ""
