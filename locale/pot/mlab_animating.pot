# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-16 01:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:5
msgid "Animating the data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:7
msgid "Often it isn't sufficient to just plot the data.  You may also want to change the data of the plot and update the plot without having to recreate the entire visualization, for instance to do animations, or in an interactive application. Indeed, recreating the entire visualization is very inefficient and leads to very jerky looking animations. To do this, mlab provides a very convenient way to change the data of an existing mlab visualization.  Consider a very simple example.  The `mlab.test_simple_surf_anim` function has this code::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:24
msgid "The first two lines define a simple plane and view that.  The next three lines animate that data by changing the scalars producing a plane that rotates about the origin.  The key here is that the `s` object above has a special attribute called `mlab_source`.  This sub-object allows us to manipulate the points and scalars.  If we wanted to change the `x` values we could set that too by::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:33
msgid "The only thing to keep in mind here is that the shape of `x` should not be changed."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:36
msgid "Note that many of the examples discussed here may not appear to be animated at all and you may just see the final state of the animation. If you save a screenshot of the image at each stage of the animation, you would get the correct result.  However, you will not get the visual effect on screen.  See the section :ref:`animating_a_visualization` to learn more on the use of the `@animate` decorator (:func:`mayavi.mlab.animate`) to achieve this. We show a small example here, where we rewrite the above to animate nicely::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:61
msgid "In the above, note that we wrap the iteration in a function which is a generator and decorate it with the `@mlab.animate` decorator."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:64
msgid "If multiple values have to be changed, you can use the `set` method of the `mlab_source` to set them as shown in the more complicated example below::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:89
msgid "Notice the use of the `set` method above. With this method, the visualization is recomputed only once.  In this case, the shape of the new arrays has not changed, only their values have.  If the shape of the array changes then one should use the `reset` method as shown below::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:106
msgid "Many standard examples for animating data are provided with mlab.  Try the examples with the name `mlab.test_<name>_anim`, i.e. where the name ends with an `_anim` to see how these work and run."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:114
msgid "It is important to remember distinction between `set` and `reset`. Use `set` or directly set the attributes (`x`, `y`, `scalars` etc.) when you are not changing the shape of the data but only the values. Use `reset` when the arrays are changing shape and size.  Reset usually regenerates all the data and can be inefficient when compared to `set` or directly setting the traits."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:123
msgid "When creating a Mayavi pipeline, as explained in the following subsection, instead of using ready-made plotting function, the `mlab_source` attribute is created only on sources created via `mlab`. Pipeline created entirely using `mlab` will present this attribute."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:131
msgid "If you are animating several plot objects, each time you modify the data with there `mlab_source` attribute, Mayavi will trigger a refresh of the scene. This operation might take time, and thus slow your animation. In this case, the tip :ref:`acceleration_mayavi_scripts` may come in handy."
msgstr ""
