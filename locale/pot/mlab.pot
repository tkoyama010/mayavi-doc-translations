# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.1.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-18 02:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../mayavi/docs/source/mayavi/mlab.rst:4
msgid "``mlab``: Python scripting for 3D plotting"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:None
msgid "Section summary"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:8
msgid "This section describes the `mlab` API, for use of Mayavi as a simple plotting in scripts or interactive sessions. This is the main entry point for people interested in doing 3D plotting Ã  la Matlab or IDL in Python. If you are interested in a list of all the functions exposed in mlab, see the :ref:`mlab-reference`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:16
msgid "The :mod:`mayavi.mlab` module, that we call mlab, provides an easy way to visualize data in a script or from an interactive prompt with one-liners as done in the matplotlib_ ``pylab`` interface but with an emphasis on 3D visualization using Mayavi2. This allows users to perform quick 3D visualization while being able to use Mayavi's powerful features."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:23
msgid "Mayavi's mlab is designed to be used in a manner well-suited to scripting and does not present a fully object-oriented API. It is can be used interactively with IPython_."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:29
msgid "When using IPython with mlab, as in the following examples, IPython must be invoked with the ``--gui=qt`` command line option like this::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:34
msgid "On recent versions of IPython, this can be turned on from within IPython itself by::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:39
msgid "If the following exception is raised::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:43
msgid "This is the result of incompatible setups between PyQt and PySide. The solution is to run ``QT_API=pyqt ETS_TOOLKIT=qt4 ipython``. More details can be found at the `ipython documentation page`_."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:47
msgid "If for some reason Mayavi fails with the Qt backend, you can also try using the wxPython backend by doing::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:53
msgid "For more details on using mlab and running scripts, read the section :ref:`running-mlab-scripts`"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:62
msgid "In this section, we first introduce simple plotting functions, to create 3D objects as representations of `numpy` arrays. Then we explain (1) how properties such as color or glyph size can be modified or used to represent data; (2) how the visualization created through `mlab` can be modified interactively with dialogs, (3) how scripts and animations can be ran. Finally, we expose a more advanced use of `mlab` in which full visualization pipeline are built in scripts, and we give some detailed examples of applying these tools to visualizing volumetric scalar and vector data."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:74
msgid "Section contents"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:4
msgid "A demo"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:6
msgid "To get you started, here is a pretty example showing a spherical harmonic as a surface::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:24
msgid "Bulk of the code in the above example is to create the data.  One line suffices to visualize it.  This produces the following visualization:"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:30
msgid "The visualization is created by the single function :func:`mesh` in the above."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:32
msgid "Several examples of this kind are provided with mlab (see `test_contour3d`, `test_points3d`, `test_plot3d_anim` etc.).  The above demo is available as `test_mesh`.  Under IPython these may be found by tab completing on `mlab.test`.  You can also inspect the source in IPython via the handy `mlab.test_contour3d??`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:4
msgid "3D Plotting functions for numpy arrays"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:6
msgid "Visualization can be created in `mlab` by a set of functions operating on numpy arrays."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:9
msgid "The mlab plotting functions take numpy arrays as input, describing the ``x``, ``y``, and ``z`` coordinates of the data. They build full-blown visualizations: they create the data source, filters if necessary, and add the visualization modules. Their behavior, and thus the visualization created, can be fine-tuned through keyword arguments, similarly to pylab. In addition, they all return the visualization module created, thus visualization can also be modified by changing the attributes of this module."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:20
msgid "In this section, we only list the different functions. Each function is described in detail in the :ref:`mlab-reference`, at the end of the user guide, with figures and examples. Please follow the links."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:26
msgid "0D and 1D data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
msgid "<br>"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:35
msgid "|points3d|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:51
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:51
msgid "points3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:35
msgid ":func:`points3d` |hack| Plots glyphs (like points) at the position of the supplied data, described by ``x``, ``y``, ``z`` numpy arrays of the same shape."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:41
msgid "|plot3d|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:48
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:48
msgid "plot3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:41
msgid ":func:`plot3d` |hack| Plots line between the supplied data, described by ``x``, ``y``, ``z`` 1D numpy arrays of the same length."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:55
msgid "2D data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:59
msgid "|imshow|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:127
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:127
msgid "imshow"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:59
msgid ":func:`imshow` |hack| View a 2D array as an image."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:63
msgid "|surf|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:136
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:136
msgid "surf"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:63
msgid ":func:`surf` |hack| View a 2D array as a carpet plot, with the z axis representation through elevation the value of the array points."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:69
msgid "|contour_surf|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:130
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:130
msgid "contour_surf"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:69
msgid ":func:`contour_surf` |hack| View a 2D array as line contours, elevated according to the value of the array points."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:74
msgid "|mesh|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:139
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:139
msgid "mesh"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:74
msgid ":func:`mesh` |hack| Plot a surface described by three 2D arrays, ``x``, ``y``, ``z`` giving the coordinates of the data points as a grid. |hack| Unlike :func:`surf`, the surface is defined by its ``x``, ``y`` and ``z`` coordinates with no privileged direction. More complex surfaces can be created."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:84
msgid "|barchart|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:142
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:142
msgid "barchart"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:84
msgid ":func:`barchart` |hack| Plot an array ``s``, or a set of points with explicit coordinates arrays, ``x``, ``y`` and ``z``, as a bar chart, eg for histograms. |hack| This function is very versatile and will accept 2D or 3D arrays, but also clouds of points, to position the bars."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:94
msgid "|triangular_mesh|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:133
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:133
msgid "triangular_mesh"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:94
msgid ":func:`triangular_mesh` |hack| Plot a triangular mesh, fully specified by ``x``, ``y`` and ``z`` coordinates of its vertices, and the (n, 3) array of the indices of the triangles."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:None
msgid "Vertical scale of  :func:`surf` and :func:`contour_surf`"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:105
msgid ":func:`surf` and :func:`contour_surf` can be used as 3D representation of 2D data. By default the z-axis is supposed to be in the same units as the x and y axis, but it can be auto-scaled to give a 2/3 aspect ratio. This behavior can be controlled by specifying the \"warp_scale='auto'\"."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:None
msgid "From data points to surfaces."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:113
msgid "Knowing the positions of data points is not enough to define a surface, connectivity information is also required. With the functions :func:`surf` and :func:`mesh`, this connectivity information is implicitly extracted from the shape of the input arrays: neighboring data points in the 2D input arrays are connected, and the data lies on a grid. With the function :func:`triangular_mesh`, connectivity is explicitly specified. Quite often, the connectivity is not regular, but is not known in advance either. The data points lie on a surface, and we want to plot the surface implicitly defined. The `delaunay2d` filter does the required nearest-neighbor matching, and interpolation, as shown in the (:ref:`example_surface_from_irregular_data`)."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:146
msgid "3D data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:150
msgid "|contour3d|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:182
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:182
msgid "contour3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:150
msgid ":func:`contour3d` |hack| Plot iso-surfaces of volumetric data defined as a 3D array."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:155
msgid "|quiver3d|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:185
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:185
msgid "quiver3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:155
msgid ":func:`quiver3d` |hack| Plot arrows to represent vectors at data points. The ``x``, ``y``, ``z`` position are specified by numpy arrays, as well as the ``u``, ``v``, ``w`` components of the vectors."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:162
msgid "|flow|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:188
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:188
msgid "flow"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:162
msgid ":func:`flow` |hack| Plot a trajectory of particles along a vector field described by three 3D arrays giving the ``u``, ``v``, ``w`` components on a grid."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:168
msgid "|slice|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:191
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:191
msgid "slice"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:168
msgid ":func:`volume_slice` |hack| Plots an interactive image plane sliced through volumetric data."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:None
msgid "Structured or unstructured data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:177
msgid ":func:`contour3d`, :func:`volume_slice` and :func:`flow` require ordered data (to be able to interpolate between the points), whereas :func:`quiver3d` works with any set of points. The required structure is detailed in the functions' documentation."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:197
msgid "Many richer visualizations can be created by assembling data sources filters and modules. See the :ref:`controlling-the-pipeline-with-mlab-scripts` and the :ref:`mlab-case-studies` sections."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:2
msgid "Changing the looks of the visual objects created"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:5
msgid "Adding color or size variations"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "Color"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:8
msgid "The color of the objects created by a plotting function can be specified explicitly using the 'color' keyword argument of the function. This color is then applied uniformly to all the objects created."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:12
msgid "If you want to vary the color across your visualization, you need to specify scalar information for each data point. Some functions try to guess this information: these scalars default to the norm of the vectors, for functions with vectors, or to the z elevation for functions where it is meaningful, such as :func:`surf` or :func:`barchart`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:18
msgid "This scalar information is converted into colors using the colormap, or also called LUT, for Look Up Table. The list of possible colormaps is::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:34
msgid "The easiest way to choose the colormap, most adapted to your visualization is to use the GUI (as described in the next paragraph). The dialog to set the colormap can be found in the `Colors and legends` node."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:38
msgid "To use a custom-defined colormap, for the time being, you need to write specific code, as show in :ref:`example_custom_colormap`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "Size of the glyph"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:42
msgid "The scalar information can also be displayed in many different ways. For instance it can be used to adjust the size of glyphs positioned at the data points."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:46
msgid "**A caveat: Clamping: relative or absolute scaling** Given six points positioned on a line with interpoint spacing 1::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:53
msgid "If we represent a scalar varying from 0.5 to 1 on this dataset::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:57
msgid "We represent the dataset as spheres, using :func:`points3d`, and the scalar is mapped to diameter of the spheres::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:63
msgid "By default the diameter of the spheres is not 'clamped', in other words, the smallest value of the scalar data is represented as a null diameter, and the largest is proportional to inter-point distance. The scaling is only relative, as can be seen on the resulting figure:"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:71
msgid "This behavior gives visible points for all datasets, but may not be desired if the scalar represents the size of the glyphs in the same unit as the positions specified."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:75
msgid "In this case, you shoud turn auto-scaling off by specifying the desired scale factor::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:84
msgid "In earlier versions of Mayavi (up to 3.1.0 included), the glyphs are not auto-scaled, and as a result the visualization can seem empty due to the glyphs being very small. In addition the minimum diameter of the glyphs is clamped to zero, and thus the glyph are not scaled absolutely, unless you specify::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "More representations of the attached scalars or vectors"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:93
msgid "There are many more ways to represent the scalar or vector information attached to the data. For instance, scalar data can be 'warped' into a displacement, e.g. using a `WarpScalar` filter, or the norm of scalar data can be extracted to a scalar component that can be visualized using iso-surfaces with the `ExtractVectorNorm` filter."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "Displaying more than one quantity"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:100
msgid "You may want to display color related to one scalar quantity while using a second for the iso-contours, or the elevation. This is possible but requires a bit of work: see :ref:`example_atomic_orbital`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:104
msgid "If you simply want to display points with a size given by one quantity, and a color by a second, you can use a simple trick: add the size information using the norm of vectors, add the color information using scalars, create a :func:`quiver3d` plot choosing the glyphs to symmetric glyphs, and use scalars to represent the color::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:119
msgid "Changing the scale and position of objects"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:121
msgid "Each mlab function takes an `extent` keyword argument, that allows to set its (x, y, z) extents. This give both control on the scaling in the different directions and the displacement of the center. Beware that when you are using this functionality, it can be useful to pass the same extents to other modules visualizing the same data. If you don't, they will not share the same displacement and scale."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:128
msgid "The :func:`surf`, :func:`contour_surf`, and :func:`barchart` functions, which display 2D arrays by converting the values in height, also take a `warp_scale` parameter, to control the vertical scaling."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:135
msgid "Changing object properties interactively"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:137
msgid "Mayavi, and thus mlab, allows you to interactively modify your visualization."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:140
msgid "The Mayavi pipeline tree can be displayed by clicking on the mayavi icon in the figure's toolbar, or by using :func:`show_pipeline` mlab command. One can now change the visualization using this dialog by double-clicking on each object to edit its properties, as described in other parts of this manual, or add new modules or filters by using this icons on the pipeline, or through the right-click menus on the objects in the pipeline."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:None
msgid "The record feature"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:155
msgid "A **very useful feature** of this dialog can be found by pressing the red round button of the toolbar of the pipeline view. This opens up a recorder that tracks the changes made interactively to the visualization via the dialogs, and generates valid lines of Python code. To find out about navigating through a program in the pipeline, see :ref:`organisation_mayavi_visualisations`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:162
msgid "In addition, for every object returned by a mlab function, ``this_object.edit_traits()`` brings up a dialog that can be used to interactively edit the object's properties. If the dialog doesn't show up when you enter this command, please see :ref:`running-mlab-scripts`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:None
msgid "Using ``mlab`` with the full Envisage UI"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:170
msgid "Sometimes it is convenient to write an mlab script but still use the full envisage application so you can click on the menus and use other modules etc.  To do this you may do the following before you create an mlab figure::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:180
msgid "This will give you the full-fledged UI instead of the default simple window."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:3
msgid "Figures, legends, camera and decorations"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:6
msgid "Handling several figures"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:8
msgid "All mlab functions operate on the current scene, that we also call :func:`figure`, for compatibility with matlab and pylab. The different figures are indexed by key that can be an integer or a string. A call to the :func:`figure` function giving a key will either return the corresponding figure, if it exists, or create a new one. The current figure can be retrieved with the :func:`gcf` function. It can be refreshed using the :func:`draw` function, saved to a picture file using :func:`savefig` and cleared using :func:`clf`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:19
msgid "Figure decorations"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:21
msgid "Axes can be added around a visualization object with the :func:`axes` function, and the labels can be set using the :func:`xlabel`, :func:`ylabel` and :func:`zlabel` functions. Similarly, :func:`outline` creates an outline around an object. :func:`title` adds a title to the figure."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:26
msgid "Color bars can be used to reflect the color maps used to display values (LUT, or lookup tables, in VTK parlance). :func:`colorbar` creates a color bar for the last object created, trying to guess whether to use the vector data or the scalar data color maps. The :func:`scalarbar` and :func:`vectorbar` function scan be used to create color bars specifically for scalar or vector data."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:33
msgid "A small *xyz* triad can be added to the figure using :func:`orientation_axes`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:36
msgid "The :func:`orientation_axes` was named `orientationaxes` before release 3.2."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:40
msgid "Moving the camera"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:42
msgid "The position and direction of the camera can be set using the :func:`view` function. They are described in terms of Euler angles and distance to a focal point. The :func:`view` function tries to guess the right roll angle of the camera for a pleasing view, but it sometimes fails. The :func:`roll` explicitly sets the roll angle of the camera (this can be achieve interactively in the scene by pressing down the control key, while dragging the mouse, see :ref:`interaction-with-the-scene`)."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:50
msgid "The :func:`view` and :func:`roll` functions return the current values of the different angles and distances they take as arguments. As a result, the view point obtained interactively can be stored and reset using::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:None
msgid "Rotating the camera around itself"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:64
msgid "You can also rotate the camera around itself using the `roll`, `yaw` and `pitch` methods of the camera object. This moves the focal point::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:71
msgid "Unlike the :func:`view` and :func:`roll` function, the angles are incremental, and not absolute."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:None
msgid "Modifying zoom and view angle"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:76
msgid "The camera is entirely defined by its position, its focal point, and its view angle (attributes 'position', 'focal_point', 'view_angle'). The camera method 'zoom' changes the view angle incrementally by the specify ratio, where as the method 'dolly' translates the camera along its axis while keeping the focal point constant. The :func:`move` function can also be useful in these regards."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:83
msgid "Camera parallel scale"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:85
msgid "In addition to the information returned and set by mlab.view and mlab.roll, a last parameter is needed to fully define the view point: the parallel scale of the camera, that control its view angle. It can be read (or set) with the following code::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:4
msgid "Running mlab scripts"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:6
msgid "Mlab, like the rest of Mayavi, is an interactive application. If you are not already in an interactive environment (see next paragraph), to interact with the figures or the rest of the drawing elements, you need to use the :func:`show` function. For instance, if you are writing a script, you need to call :func:`show` each time you want to display one or more figures and allow the user to interact with them."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:14
msgid "Using mlab interactively"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:16
msgid "Using IPython_, mlab instructions can be run interactively, or in scripts using IPython_'s ``%run`` command::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:21
msgid "You need to start IPython_ with the `--gui=qt` option. In this environment, the plotting commands are interactive: they have an immediate effect on the figure, alleviating the need to use the :func:`show` function."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:28
msgid "Mlab can also be used interactively in the Python shell of the mayavi2 application, or in any interactive Python shell of wxPython-based application (such as other Envisage-based applications, or SPE, Stani's Python Editor)."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:34
msgid "Using together with Matplotlib"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:36
msgid "If you want to use Matplotlib's interactive plotting with Mayavi's mlab in IPython you should:"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:39
msgid "start IPython with::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:43
msgid "alternatively, start IPython with the `--gui=qt` option::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:47
msgid "and **before** importing any matplotlib modules, enter the following Python commands::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:54
msgid "one could also use the ``--pylab`` option to IPython as follows::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:60
msgid "If you want matplotlib and mlab to work together by default in IPython, you can change you default matplotlib backend, by editing the `~/.matplotlib/matplotlibrc` to add the following line::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:66
msgid "If for some reason, the Qt backend does not work, you can use the wx backend.  To do this you may do::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:72
msgid "Note that as far as Mayavi is concerned, it chooses the appropriate toolkit using the ``ETS_TOOLKIT`` environment variable.  If this is not set, the supported toolkits are tried in a version-dependent order until one succeeds.  With recent releases of traitsui_, the default is Qt.  The possible options for ``ETS_TOOLKIT`` are:"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:78
msgid "`qt4`: to use the Qt backend (either PySide or PyQt4),"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:79
msgid "`wx`: to use wxPython,"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:80
msgid "`null`: to use no UI toolkit."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:None
msgid "Capturing mlab plots to integrate in pylab"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:86
msgid "Starting from Mayavi version 3.4.0, the mlab :func:`screenshot` can be used to take a screenshot of the current figure, to integrate in a matplotlib plot."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:91
msgid "In scripts"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:93
msgid "Mlab commands can be written to a file, to form a script. This script can be loaded in the Mayavi application using the *File->Open file* menu entry, and executed using the *File->Refresh code* menu entry or by pressing ``Control-r``.  It can also be executed during the start of the Mayavi application using the ``-x`` command line switch."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:99
msgid "As mentioned above, when running outside of an interactive environment, for instance with `python myscript.py`, you need to call the :func:`show` function (as shown in the demo_ above) to pause your script and have the user interact with the figure."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:107
msgid "You can also use :func:`show` to decorate a function, and have it run in the event-loop, which gives you more flexibility::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:117
msgid "With this decorator, each time the `image` function is called, `mlab` makes sure an interactive environment is running before executing the `image` function. If an interactive environment is not running, `mlab` will start one and the image function will not return until it is closed."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:5
msgid "Animating the data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:7
msgid "Often it isn't sufficient to just plot the data.  You may also want to change the data of the plot and update the plot without having to recreate the entire visualization, for instance to do animations, or in an interactive application. Indeed, recreating the entire visualization is very inefficient and leads to very jerky looking animations. To do this, mlab provides a very convenient way to change the data of an existing mlab visualization.  Consider a very simple example.  The `mlab.test_simple_surf_anim` function has this code::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:24
msgid "The first two lines define a simple plane and view that.  The next three lines animate that data by changing the scalars producing a plane that rotates about the origin.  The key here is that the `s` object above has a special attribute called `mlab_source`.  This sub-object allows us to manipulate the points and scalars.  If we wanted to change the `x` values we could set that too by::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:33
msgid "The only thing to keep in mind here is that the shape of `x` should not be changed."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:36
msgid "Note that many of the examples discussed here may not appear to be animated at all and you may just see the final state of the animation. If you save a screenshot of the image at each stage of the animation, you would get the correct result.  However, you will not get the visual effect on screen.  See the section :ref:`animating_a_visualization` to learn more on the use of the `@animate` decorator (:func:`mayavi.mlab.animate`) to achieve this. We show a small example here, where we rewrite the above to animate nicely::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:61
msgid "In the above, note that we wrap the iteration in a function which is a generator and decorate it with the `@mlab.animate` decorator."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:64
msgid "If multiple values have to be changed, you can use the `set` method of the `mlab_source` to set them as shown in the more complicated example below::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:89
msgid "Notice the use of the `set` method above. With this method, the visualization is recomputed only once.  In this case, the shape of the new arrays has not changed, only their values have.  If the shape of the array changes then one should use the `reset` method as shown below::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:106
msgid "Many standard examples for animating data are provided with mlab.  Try the examples with the name `mlab.test_<name>_anim`, i.e. where the name ends with an `_anim` to see how these work and run."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:114
msgid "It is important to remember distinction between `set` and `reset`. Use `set` or directly set the attributes (`x`, `y`, `scalars` etc.) when you are not changing the shape of the data but only the values. Use `reset` when the arrays are changing shape and size.  Reset usually regenerates all the data and can be inefficient when compared to `set` or directly setting the traits."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:123
msgid "When creating a Mayavi pipeline, as explained in the following subsection, instead of using ready-made plotting function, the `mlab_source` attribute is created only on sources created via `mlab`. Pipeline created entirely using `mlab` will present this attribute."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:131
msgid "If you are animating several plot objects, each time you modify the data with there `mlab_source` attribute, Mayavi will trigger a refresh of the scene. This operation might take time, and thus slow your animation. In this case, the tip :ref:`acceleration_mayavi_scripts` may come in handy."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:4
msgid "Assembling pipelines with `mlab`"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:7
msgid "The plotting functions reviewed above explore only a small fraction of the visualization possibilities of Mayavi. The full power of Mayavi can only be unleashed through the control of the pipeline itself. As described in the :ref:`an-overview-of-mayavi` section, a visualization in Mayavi is created by loading the data in Mayavi with `data source` object, optionally transforming the data through :ref:`filters`, and visualizing it with :ref:`modules`. The mlab functions build complex pipelines for you in one function, making the right choice of sources, filters, and modules, but they cannot explore all the possible combinations."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:18
msgid "Mlab provides a sub-module `pipeline` which contains functions to populate the pipeline easily from scripts. This module is accessible in `mlab`: `mlab.pipeline`, or can be imported from `mayavi.tools.pipeline`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:23
msgid "When using an `mlab` plotting function, a pipeline is created: first a source is created from `numpy` arrays, then modules, and possibly filters, are added. The resulting pipeline can be seen for instance with the `mlab.show_pipeline` command. This information can be used to create the very same pipeline directly using the `pipeline` scripting module, as the names of the functions required to create each step of the pipeline are directly linked to the default names of the objects created by `mlab` on the pipeline. As an example, let us create a visualization using :func:`surf`::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:39
msgid "The following pipeline is created::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:47
msgid "The same pipeline can be created using the following code::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:57
msgid "Data sources"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:61
msgid "The `mlab.pipeline` module contains functions for creating various data sources from arrays. They are fully documented in details in the :ref:`mlab-pipeline-reference`. We give a small summary of the possibilities here."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:66
msgid "Mayavi distinguishes sources with **scalar data**, and sources with **vector data**, but more important, it has different functions to create sets of **unconnected points**, with data attached to them, or **connected data points** describing continuously varying quantities that can be interpolated between data points, often called `fields` in physics or engineering."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "Unconnected sources"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:77
msgid ":func:`scalar_scatter` (creates a :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:82
msgid ":func:`vector_scatter` (creates an :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "implicitly-connected sources"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:91
msgid ":func:`scalar_field` (creates an :ref:`image_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:96
msgid ":func:`vector_field` (creates an :ref:`image_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:101
msgid ":func:`array2d_source` (creates an :ref:`image_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "Explicitly-connected sources"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:110
msgid ":func:`line_source` (creates an :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:115
msgid ":func:`triangular_mesh_source` (creates an :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:120
msgid "All the `mlab.pipline` source factories are functions that take numpy arrays and return the Mayavi source object that was added to the pipeline. However, the implicitly-connected sources require well-shaped arrays as arguments: the data is supposed to lie on a regular, orthogonal, grid of the same shape as the shape of the input array, in other words, the array describes an image, possibly 3 dimensional."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:129
msgid "More complicated data structures can be created, such as irregular grids or non-orthogonal grid. See :ref:`the section on data structures <data-structures-used-by-mayavi>`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:135
msgid "Modules and filters"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:137
msgid "For each Mayavi module or filter (see :ref:`modules` and :ref:`filters`), there is a corresponding `mlab.pipeline` function. The name of this function is created by replacing the alternating capitals in the module or filter name by underscores. Thus `ScalarCutPlane` corresponds to `scalar_cut_plane`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:143
msgid "In general, the `mlab.pipeline` module and filter factory functions simply create and connect the corresponding object. However they can also contain addition logic, exposed as keyword arguments. For instance they allow to set up easily a colormap, or to specify the color of the module, when relevant. In accordance with the goal of the `mlab` interface to make frequent operations simple, they use the keyword arguments to choose the properties of the created object to suit the requirements. It can be thus easier to use the keyword arguments, when available, than to set the attributes of the objects created. For more information, please check out the docstrings. Full, detailed, usage examples are given in the next subsection."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:4
msgid "Case studies of some visualizations"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:7
msgid "Visualizing volumetric scalar data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:11
msgid "There are three main ways of visualizing a 3D scalar field. Given the following field::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Iso-Surfaces"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:21
msgid "To display iso surfaces of the field, the simplest solution is simply to use the ``mlab`` :func:`contour3d` function::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:26
msgid "|volumetric_contour3d|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:121
#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:121
msgid "volumetric_contour3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:28
msgid "The problem with this method is that the outer iso-surfaces tend to hide inner ones. As a result, quite often only one iso-surface can be visible."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Volume rendering"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:34
msgid "Volume rendering is an advanced technique in which each voxel is given a partly transparent color. This can be achieved with `mlab.pipeline` using the :func:`scalar_field` source, and the `volume` module::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:41
msgid "|volumetric_volume|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:123
#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:123
msgid "volumetric_volume"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:43
msgid "For such a visualization, tweaking the opacity transfer function is critical to achieve a good effect. Typically, it can be useful to limit the lower and upper values to the 20 and 80 percentiles of the data, in order to have a reasonable fraction of the volume transparent::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:51
msgid "|volumetric_volume_tweaked|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:125
#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:125
msgid "volumetric_volume_tweaked"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:53
msgid "It is useful to open the module's dialog (eg through the pipeline interface, or using it's `edit_traits()` method) and tweak the color transfer function to render the transparent low-intensity regions of the image. **For this module, the LUT as defined in the** `Colors and legends` **node are not used.**"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:59
msgid "The limitations of volume rendering is that, while it is often very pretty, it can be difficult to analyze the details of the field with it."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Cut planes"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:66
msgid "While less impressive, cut planes are a very informative way of visualizing the details of a scalar field::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:79
msgid "Image plane widgets can also being created from NumPy arrays using the ``mlab`` :func:`volume_slice` function::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:84
msgid "|volumetric_cut_plane|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:127
#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:127
msgid "volumetric_cut_plane"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:86
msgid "The image plane widget can only be used on regular-spaced data, as created by `mlab.pipeline.scalar_field`, but it is very fast. It should thus be prefered to the scalar cut plane, when possible."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:90
msgid "Clicking and dragging the cut plane is an excellent way of exploring the field."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "A combination of techniques"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:94
msgid "Finally, it can be interesting to combine cut planes with iso-surfaces and thresholding to give a view of the peak areas using the iso-surfaces, visualize the details of the field with the cut plane, and the global mass with a large iso-surface::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:108
msgid "|volumetric_combination|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:129
#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:129
msgid "volumetric_combination"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:111
msgid "In the above example, we have used the pipeline syntax of mayavi instead of using :func:`contour3d` and :func:`volume_slice` in order to use a single scalar field as data source."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:115
msgid "In some cases, though not in our example, it might be usable to insert a threshold filter before the cut plane, eg:to remove area with values below 's.min()+0.1*s.ptp()'. In this case, the cut plane needs to be implemented with `mlab.pipeline.scalar_cut_plane` as the data looses its structure after thresholding."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:132
msgid "Visualizing a vector field"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:140
msgid "A vector field, i.e., vectors continuously defined in a volume, can be difficult to visualize, as it contains a lot of information. Let us explore different visualizations for the velocity field of a multi-axis convection cell [1]_, in hydrodynamics, as defined by its components sampled on a grid, `u`, `v`, `w`::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Quiver"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:156
msgid "The simplest visualization of a set of vectors, is using the `mlab` function `quiver3d`::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:164
msgid "The main limitation of this visualization is that it positions an arrow for each sampling point on the grid. As a result the visualization is very busy."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Masking vectors"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:169
msgid "We can use the fact that we are visualizing a vector field, and not just a bunch of vectors, to reduce the amount of arrows displayed. For this we need to build a `vector_field` source, and apply to it the `vectors` module, with some masking parameters (here we keep only one point out of 20)::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "A cut plane"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:181
msgid "If we are interested in displaying the vectors along a cut, we can use a cut plane. In particular, we can inspect interactively the vector field by moving the cut plane along: clicking on it and dragging it can give a very clear understanding of the vector field::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Iso-Surfaces of the magnitude"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:191
msgid "An important parameter of the vector field is its magnitude. It can be interesting to display iso-surfaces of the normal of the vectors. For this we can create a scalar field from the vector field using the ExtractVectorNorm filter, and use the Iso-Surface module on it. When working interactively, a good understanding of the magnitude of the field can be gained by changing the values of the contours in the object's property dialog. ::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "The Flow, or the field lines"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:205
msgid "For certain vector fields, the line of flow along the field can have an interesting meaning. For instance this can be interpreted as a trajectory in hydrodynamics, or field lines in electro-magnetism. We can display the flow lines originating for a certain seed surface using the `streamline` module, or the mlab :func:`flow` function, which relies on `streamline` internally::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:221
msgid "Giving a meaningful visualization of a vector field is a hard task, and one must use all the tools at hand to illustrate his purposes. It is important to choose the message conveyed. No one visualization will tell all about a vector field. Here is an example of a visualization made by combining the different tools above::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:257
msgid "Although most of this section has been centered on snippets of code to create visualization objects, it is important to remember that Mayavi is an interactive program, and that the properties of these objects can be modified interactively, as described in :ref:`mlab-changing-objects-interactively`. It is often impossible to choose the best parameters for a visualization before hand. Colors, contour values, colormap, view angle, etc... should be chosen interactively. If reproducibiles are required, the chosen values can be added in the original script."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:267
msgid "Moreover, the `mlab` functions expose only a small fraction of the possibilities of the visualization objects. The dialogs expose more of these functionalities, that are entirely controlled by the attributes of the objects returned by the mlab functions. These objects are very rich, as they are built from VTK objects. It can be hard to find the right attribute to modify when exploring them, or in the VTK documentation, thus the easiest way is to modify them interactively using the pipeline view dialog and use the :ref:`record feature <record_feature>` to find out the corresponding lines of code. See :ref:`organisation_mayavi_visualisations` to understand better the link between the lines of code generated by the record feature and `mlab`. ."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:284
msgid "Toussaint, V.; Carriere, P. & Raynal, F. A numerical Eulerian approach to mixing by chaotic advection Phys. Fluids, 1995, 7, 2587"
msgstr ""
