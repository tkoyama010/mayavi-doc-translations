# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.4.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-17 00:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:2
msgid "Using Mayavi with scipy"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:4
msgid "This tutorial example shows you how you can use Mayavi interactively to visualize `numpy`_ arrays while doing numerical work with `scipy`_. It assumes that you are familiar with numerical Python tools, and shows you how to use Mayavi in combination with these tools."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:9
msgid "Let us study the trajectories of a particle in a potential. This is a very common problem in physics and engineering, and visualization of the potential and the trajectories is key to developing an understanding of the problem."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:14
msgid "The potential we are interested is a periodic lattice, immersed in a parabolic confinement. We will shake this potential and see how the particle jumps from a hole of the lattice to another. The parabolic confinement is there to limit the excursions of the particle::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:25
msgid "Now that we have defined the potential, we would like to see what it looks like in 3D. To do this we can create a 3D grid of points, and sample it on these points::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:32
msgid "We are going to use the `mlab` module (see :ref:`simple-scripting-with-mlab`) to interactively visualize this volumetric data. For this it is best to type the commands in an interactive Python shell, either using the built-in shell of the Mayavi2 application, on in `ipython --gui=qt`. Let us visualize the 3D isosurfaces of the potential::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:41
msgid "We can interact with the visualization created by the above command by rotating the view, but to get a good understanding of the structure of the potential, it is useful to vary the iso-surfaces. We can do this by double-clicking on the `IsoSurface` in the Mayavi pipeline tree (if you are running from `ipython`, you need to click on the Mayavi icon on the scene to pop up the pipeline). This opens a dialog which lets us select the values of the contours used. A good view of the potential can be achieved by turning off auto contours and choosing -0.5 as a first contour value (eg by entering it in the text box on the right, and pressing `tab`). A second contour can be added by clicking on the blue arrow and selecting \"Add after\". Using a value of 15 gives a nice result."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:54
msgid "Note that the \"Add after\" UI formerly crashed on Linux with the wxPython backend for versions of Mayavi up to 3.2.0 (see :ref:`known_bugs` for all know bugs)."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:59
msgid "We can now click on the `Colors and legends` on the pipeline and change the colors used, by selecting a different LUT (Look Up Table). Let us select 'Paired' as it separates well levels."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:65
msgid "To get a better view of the potential, we would like to display more contours, but the problem with this approach is that closed contours hide their interior. On solution is to use a cut plane. Right-click on the `IsoSurface` node and add a `ScalarCutPlane` through the \"Add module\" sub menu. You can move the cut plane by clicking on it and dragging."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:71
msgid "To make the link between our numpy arrays and the visualization, we can use the same menu to add an Axes and an Outline. Finally, let us add a colorbar. We can do this by typing::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:77
msgid "Or using the options in the LUT dialog visited earlier."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:81
msgid "We want to study the motion of a particle in this potential. For this we need to derive the corresponding force, given by the gradient of the potential. We create a gradient function::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:95
msgid "To check that our gradient function works well, let us visualize the vector field it creates. To avoid displaying too many vectors, we will evaluate the gradient only along a cut for X=50, and every three points on our grid::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:106
msgid "Now we can use `scipy` to integrate the trajectories. We first have to define a dynamical flow, the function that returns the derivative of the different parameters as a function of these parameters and of time. The flow is used by every ODE_ (ordinary differential equation) solver, it give the dynamic of the system. The dynamics we are interested in is made of the force deriving from the potential, which we shake with time in the three directions, as well as a damping force. The damping coefficient and the amount and frequency of shaking have been tuned to give an interesting dynamic. ::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:122
msgid "Now we can integrate the trajectory::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_using_with_scipy.rst:132
msgid "And we can now plot the trajectories, after removing the cut plane and the vector field by right-clicking on the corresponding pipeline node and selecting delete. We also turn the first color bar off in the corresponding `Colors and legends` node. We plot the trajectories with extra scalar information attached to it, to display the time via the colormap::"
msgstr ""
