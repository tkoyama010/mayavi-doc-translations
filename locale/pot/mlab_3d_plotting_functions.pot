# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.1.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-18 02:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:4
msgid "3D Plotting functions for numpy arrays"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:6
msgid "Visualization can be created in `mlab` by a set of functions operating on numpy arrays."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:9
msgid "The mlab plotting functions take numpy arrays as input, describing the ``x``, ``y``, and ``z`` coordinates of the data. They build full-blown visualizations: they create the data source, filters if necessary, and add the visualization modules. Their behavior, and thus the visualization created, can be fine-tuned through keyword arguments, similarly to pylab. In addition, they all return the visualization module created, thus visualization can also be modified by changing the attributes of this module."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:20
msgid "In this section, we only list the different functions. Each function is described in detail in the :ref:`mlab-reference`, at the end of the user guide, with figures and examples. Please follow the links."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:26
msgid "0D and 1D data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
msgid "<br>"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:35
msgid "|points3d|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:51
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:51
msgid "points3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:35
msgid ":func:`points3d` |hack| Plots glyphs (like points) at the position of the supplied data, described by ``x``, ``y``, ``z`` numpy arrays of the same shape."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:41
msgid "|plot3d|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:48
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:48
msgid "plot3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:41
msgid ":func:`plot3d` |hack| Plots line between the supplied data, described by ``x``, ``y``, ``z`` 1D numpy arrays of the same length."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:55
msgid "2D data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:59
msgid "|imshow|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:127
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:127
msgid "imshow"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:59
msgid ":func:`imshow` |hack| View a 2D array as an image."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:63
msgid "|surf|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:136
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:136
msgid "surf"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:63
msgid ":func:`surf` |hack| View a 2D array as a carpet plot, with the z axis representation through elevation the value of the array points."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:69
msgid "|contour_surf|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:130
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:130
msgid "contour_surf"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:69
msgid ":func:`contour_surf` |hack| View a 2D array as line contours, elevated according to the value of the array points."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:74
msgid "|mesh|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:139
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:139
msgid "mesh"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:74
msgid ":func:`mesh` |hack| Plot a surface described by three 2D arrays, ``x``, ``y``, ``z`` giving the coordinates of the data points as a grid. |hack| Unlike :func:`surf`, the surface is defined by its ``x``, ``y`` and ``z`` coordinates with no privileged direction. More complex surfaces can be created."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:84
msgid "|barchart|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:142
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:142
msgid "barchart"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:84
msgid ":func:`barchart` |hack| Plot an array ``s``, or a set of points with explicit coordinates arrays, ``x``, ``y`` and ``z``, as a bar chart, eg for histograms. |hack| This function is very versatile and will accept 2D or 3D arrays, but also clouds of points, to position the bars."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:94
msgid "|triangular_mesh|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:133
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:133
msgid "triangular_mesh"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:94
msgid ":func:`triangular_mesh` |hack| Plot a triangular mesh, fully specified by ``x``, ``y`` and ``z`` coordinates of its vertices, and the (n, 3) array of the indices of the triangles."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:None
msgid "Vertical scale of  :func:`surf` and :func:`contour_surf`"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:105
msgid ":func:`surf` and :func:`contour_surf` can be used as 3D representation of 2D data. By default the z-axis is supposed to be in the same units as the x and y axis, but it can be auto-scaled to give a 2/3 aspect ratio. This behavior can be controlled by specifying the \"warp_scale='auto'\"."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:None
msgid "From data points to surfaces."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:113
msgid "Knowing the positions of data points is not enough to define a surface, connectivity information is also required. With the functions :func:`surf` and :func:`mesh`, this connectivity information is implicitly extracted from the shape of the input arrays: neighboring data points in the 2D input arrays are connected, and the data lies on a grid. With the function :func:`triangular_mesh`, connectivity is explicitly specified. Quite often, the connectivity is not regular, but is not known in advance either. The data points lie on a surface, and we want to plot the surface implicitly defined. The `delaunay2d` filter does the required nearest-neighbor matching, and interpolation, as shown in the (:ref:`example_surface_from_irregular_data`)."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:146
msgid "3D data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:150
msgid "|contour3d|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:182
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:182
msgid "contour3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:150
msgid ":func:`contour3d` |hack| Plot iso-surfaces of volumetric data defined as a 3D array."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:155
msgid "|quiver3d|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:185
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:185
msgid "quiver3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:155
msgid ":func:`quiver3d` |hack| Plot arrows to represent vectors at data points. The ``x``, ``y``, ``z`` position are specified by numpy arrays, as well as the ``u``, ``v``, ``w`` components of the vectors."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:162
msgid "|flow|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:188
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:188
msgid "flow"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:162
msgid ":func:`flow` |hack| Plot a trajectory of particles along a vector field described by three 3D arrays giving the ``u``, ``v``, ``w`` components on a grid."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:168
msgid "|slice|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:191
#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:191
msgid "slice"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:168
msgid ":func:`volume_slice` |hack| Plots an interactive image plane sliced through volumetric data."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:None
msgid "Structured or unstructured data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:177
msgid ":func:`contour3d`, :func:`volume_slice` and :func:`flow` require ordered data (to be able to interpolate between the points), whereas :func:`quiver3d` works with any set of points. The required structure is detailed in the functions' documentation."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:197
msgid "Many richer visualizations can be created by assembling data sources filters and modules. See the :ref:`controlling-the-pipeline-with-mlab-scripts` and the :ref:`mlab-case-studies` sections."
msgstr ""
