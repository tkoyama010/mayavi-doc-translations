# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.4.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-24 00:37+0000\n"
"PO-Revision-Date: 2019-04-27 07:30+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/tkoyama010/teams/98399/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../mayavi/docs/source/mayavi/example_exploring_a_vector_field.rst:3
msgid "Exploring a vector field"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_exploring_a_vector_field.rst:5
msgid ""
"In this example, we create a vector field from the gradient of a scalar "
"field and explore it interactively. This example shows you how to do some "
"operations similar to the previous example, but interactively, using the "
"filters and modules. This approach requires a better knowledge of Mayavi and"
" the VTK filters than the previous example, in which `numpy` is used for "
"most of the operations. The big gain is that the resulting visualization can"
" be explored interactively."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_exploring_a_vector_field.rst:13
msgid ""
"First, let us create the same scalar field as the previous example:. We open"
" Mayavi and enter the following code in the Python shell::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_exploring_a_vector_field.rst:25
msgid ""
"As in the previous example, we can change the color map and the values "
"chosen in the isosurfaces."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_exploring_a_vector_field.rst:28
msgid ""
"We want to take the gradient of the scalar field, to create a vector field. "
"To do this we are going to use the `CellDerivatives` filter, that takes "
"derivatives of the data located in the cells (that is, between the points, "
"see :ref:`data-structures-used-by-mayavi`). For this, we first need to "
"interpolate the data from the points where it is located to the cells, using"
" a `PointToCellData` filter. We can then apply our `CellDerivatives` filter,"
" and then a `CellToPointData` filter to get point data back."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_exploring_a_vector_field.rst:37
msgid ""
"To visualize the vector field, we can use a `VectorCutPlane` module. The "
"resulting vectors are too large, and we can go to the `Glyph` tab, (and the "
"`Glyph` tab in this tab), to reduce the scale factor to 0.2. The vector "
"field is still too dense, therefore we go to the `Masking` tab to enable "
"masking, mask with an `on ratio` of 6 (one arrow out of 6 is masked) and "
"turn off the random mode."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_exploring_a_vector_field.rst:48
msgid ""
"To have nice colors, we also changed the color map of the vector field by "
"going to the `Colors and legend` node just above the `VectorCutPlane`, and "
"choosing a look up table **in the VectorLUT** tab, as there can be different"
" color maps for vector data and scalar data."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_exploring_a_vector_field.rst:53
msgid ""
"Unlike the previous example, we can play with all the parameters in the "
"dialog box, like masking, or select `color_by_scalar` in the `Glyph` tab, to"
" display the value of the potential. We can also move the cut plane used to "
"display the vectors by dragging it."
msgstr ""

#: ../../mayavi/docs/source/mayavi/example_exploring_a_vector_field.rst:58
msgid ""
"Now that we have a 3D vector field, we can also use Mayavi to integrate the "
"trajectory of a particle in it. For this we can use the streamline module. "
"It displays trajectories starting from the vertices of a seed surface. We "
"choose (in the `Seed` tab) a `Point Widget` as a seed. We can then move the "
"seed point by dragging it along in the 3D scene. This allows us to explore "
"the trajectories in the potential created by the initial scalar field. In "
"our case, all the trajectories end up in a local potential minimum, and "
"moving the seed point along lets us see in which minimum each point will "
"fall into, in other world the basin of attraction of each local minimum."
msgstr ""
