# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Mayavii <1444742843@qq.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.2.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-19 02:52+0000\n"
"PO-Revision-Date: 2019-04-27 07:30+0000\n"
"Last-Translator: Mayavii <1444742843@qq.com>, 2021\n"
"Language-Team: Chinese (China) (https://app.transifex.com/tkoyama010/teams/98399/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../mayavi/docs/source/mayavi/building_applications.rst:5
msgid "Building applications using Mayavi"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst-1
msgid "Section summary"
msgstr "分节概述"

#: ../../mayavi/docs/source/mayavi/building_applications.rst:9
msgid ""
"This section describes how Mayavi can be used as a scientific data "
"visualization and 3D plotting tool in interactive application."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:12
msgid ""
"Mayavi can be used as a fully integrated and interactive 3D plotting tool in"
" a GUI application. Using the event model behind Traits and TVTK, all the "
"different properties of a visualization can be changed dynamically, "
"including the data visualized itself."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:17
msgid ""
"In this section, we first show how an interactive dialog embedding a Mayavi "
"scene can be built, using `Traits`. Then we show how to integrate this "
"dialog in a WxPython or a PyQt (or PySide) application."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:22
msgid "Custom interactive dialogs"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:24
msgid ""
"Mayavi and TVTK are entirely built using the Traits library which provides "
"easy callbacks and visualization for objects attribute. All the different "
"properties of the pipeline and pipeline objects are expressed as Traits, "
"i.e. special attributes that can be visualized in dialogs and that fire "
"callbacks when they are modified. In particular this means that when a "
"visualization object is modified, the scene can update automatically."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:31
msgid ""
"We strongly suggest that you refer to the `Traits` `documentation "
"<http://docs.enthought.com/traits>`_ for more details.  There are also a "
"list of introductory `materials <https://support.enthought.com/hc/en-"
"us/articles/204469620-Introductory-materials-for-Traits-and-Traits-UI>` for "
"learning Traits and Traits UI."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:40
msgid "Embedding a Mayavi scene in a Traits dialog"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:42
msgid ""
"To build a custom dialog with a Mayavi scene, the best option is to create a"
" class deriving from the base `Traits` class. A special attribute, called "
"SceneModel can be used as an attribute to represent a Mayavi scene that can "
"accept objects. This defines the `model`, i.e. the main `HasTraits` object "
"in which the application logics is contained."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:48
msgid ""
"A view of this object, as a dialog, can be created using the "
"`.configure_traits` method of this object. If a view is explicitly specified"
" the embedded Mayavi scene can be represented with the usual widget for "
"scene by specifying for it the `SceneEditor`::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:66
msgid ""
"A `Mayavi` button to pop up the pipeline dialog can be added on the toolbar "
"by specifying a different scene view to the `SceneEditor`::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:75
msgid ""
"If, on the contrary, you want a view with no toolbar, you can replace the "
"`MayaviView` by a raw tvtk view::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:84
msgid ""
"The :ref:`example_mayavi_traits_ui` is a fairly comprehensive example that "
"demonstrates how you can embed almost the entire Mayavi UI into your traits "
"based UI."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:89
msgid "A scene, with `mlab` embedded"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:91
msgid ""
"An object representing a scene is interesting only if you can visualize data"
" with the scene. For this we can instanciate an `Engine` and assign it to "
"the scene. Having an `Engine` only for one scene allows us to confine action"
" and visualization objects only to this scene."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:96
msgid ""
"We can also use an `MlabSceneModel` instance, rather than a `SceneModel`, "
"imported from `mayavi.tools.mlab_scene_model`. This scene model registers "
"the figure in `mlab` (:ref:`simple-scripting-with-mlab`). It has an embedded"
" mlab attribute, that exposes the mlab commands (see "
":ref:`mlab_plotting_functions`). For instance plotting 3D points can be "
"achieved with `self.scene.mlab.points3d(x, y, z, s)`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:103
msgid "Embedding several scenes in an application"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:105
msgid ""
"When using several 'MlabSceneModel' in an application, there is an ambiguity"
" regarding which scene mlab should use to plot to. This is why relying on "
"using the current figure, as mlab most often does, is dangerous."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:110
msgid ""
"The solution to this, is explicitly pass in the Mayavi figure to mlab's "
"figure keyword argument::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:115
msgid "However, this functionality is new in Mayavi 3.2.1."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:117
msgid ""
"A full example with two embedded scenes is given on "
":ref:`example_multiple_mlab_scene_models`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:120
msgid ""
"Another way of creating isolation between scene is to explicitly insert them"
" in different engines. This is demonstrated in "
":ref:`example_multiple_engines`"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:125
msgid "Making the visualization live"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:127
msgid ""
"Having an interactive application is interesting only if you can do custom, "
"domain-specific, interaction with the visualization."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:130
msgid ""
"An important use case is modifying the data visualized as a parameter is "
"changed interactively. For this we can use the inplace modification of the "
"data of an mlab object, as for animation of an mlab plot (see :ref:`mlab-"
"animating-data`). Suppose we are plotting a line curve defined by a function"
" of two parameters::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:145
msgid "Using `mlab`, we could plot the curve with `plot3d`::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:151
msgid "Modifying the plot for new parameters could be written::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:156
msgid "In a dialog, this would be::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:195
msgid "This code creates the following dialog:"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:200
msgid ""
"A complete, runnable, code based on the above comments is given in the "
":ref:`example_mlab_interactive_dialog`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:203
msgid ""
"Visualization objects and properties created before a scene is available"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:205
msgid ""
"When creating a traited object with an embedded scene, the scene can be "
"created and populated before a view on it is actually open. However, some "
"VTK objects or properties require a scene with a camera and interaction to "
"be open to work properly, mainly because either they orient themselves to "
"the camera, or deal with interaction with keyboard or mouse (such as "
"interactors, eg an implicit plane). As a result some property changes on VTK"
" objects will raise warnings or simply not work when applied without a "
"dialog opened. When embedding a scene in a Traits object, the best option is"
" to create and modify these objects only when the scene is activated, by "
"listening to changes on the 'scene.activated' traits::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:222
msgid "The :ref:`example_lorenz_ui` shows a good example of this situation."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:125
msgid "Learning by examples"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:226
msgid ""
"Several full-featured examples can be used to learn more about how to "
"develop an application with visualization and data processing with Traits "
"and Mayavi:"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:230
msgid ""
":ref:`example_lorenz_ui`: A didactic and simple example that shows how the "
"lorenz model can be integrated and visualized interactively while changing "
"the model parameters."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:234
msgid ""
":ref:`example_mayavi_traits_ui`: An example showing how you can mimic the UI"
" of the Mayavi application with simple code using Traits."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:237
msgid ""
":ref:`example_multiple_engines`: An example showing how you can isolate "
"different scenes by affecting them to different engines."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:240
msgid ""
":ref:`example_coil_design_application`: A full-blown and elaborate "
"application enabling specification of a current-loop description for a coil,"
" and integration of the resulting magnetic field with real-time "
"visualization of the field and the coil structure."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:247
msgid "Integrating in a WxPython application"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:249
msgid "Using the `Visualization` class defined above::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:265
msgid ""
"Two examples of integrating Mayavi visualization with Wx applications are "
"given:"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:268
msgid ":ref:`example_wx_embedding`: a simple example, as above."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:269
msgid ""
":ref:`example_wx_mayavi_embed_in_notebook`: a more complexe example, showing"
" 2 different Mayavi views embedded in a Wx notebook."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:275
msgid "Integrating in a Qt application"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:277
msgid "Mayavi dialogs can also be integrated in a PyQt or PySide application."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:279
msgid ""
"Before defining the `Visualization` class, you should set the toolkit used "
"by Traits to the Qt backend::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:285
msgid ""
"Also, as Traits runs with PyQt and PySide, if you use PyQt, you must make "
"sure that you switch its binding in a mode that is compatible with PySide "
"(internal string representation mode), **before you import any PyQt code**::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:293
msgid ""
"By default, with modern versions of the Enthought Tool Suite, Traits will "
"use PySide. To force the use of PyQt, you must set the QT_API environment "
"variable::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:299
msgid "Then using the visualization class defined above::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:315
msgid ""
"For a full-blown example of embedding in Qt, see "
":ref:`example_qt_embedding`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:320
msgid ""
"On definition of the model (and thus previous to the start of the event "
"loop), Traits sets up some hooks on the main QApplication. As a result if "
"you instanciate a new one, using for instance::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/building_applications.rst:326
msgid "Your Traits application will not work."
msgstr ""
