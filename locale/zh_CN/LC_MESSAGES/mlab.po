# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Mayavii <1444742843@qq.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.3.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-24 00:23+0000\n"
"PO-Revision-Date: 2019-04-27 07:28+0000\n"
"Last-Translator: Mayavii <1444742843@qq.com>, 2021\n"
"Language-Team: Chinese (China) (https://app.transifex.com/tkoyama010/teams/98399/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../mayavi/docs/source/mayavi/mlab.rst:4
msgid "``mlab``: Python scripting for 3D plotting"
msgstr "mlab：用Python脚本进行3D绘图"

#: ../../mayavi/docs/source/mayavi/mlab.rst-1
msgid "Section summary"
msgstr "分节概述"

#: ../../mayavi/docs/source/mayavi/mlab.rst:8
msgid ""
"This section describes the `mlab` API, for use of Mayavi as a simple "
"plotting in scripts or interactive sessions. This is the main entry point "
"for people interested in doing 3D plotting à la Matlab or IDL in Python. If "
"you are interested in a list of all the functions exposed in mlab, see the "
":ref:`mlab-reference`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab.rst:16
msgid ""
"The :mod:`mayavi.mlab` module, that we call mlab, provides an easy way to "
"visualize data in a script or from an interactive prompt with one-liners as "
"done in the matplotlib_ ``pylab`` interface but with an emphasis on 3D "
"visualization using Mayavi2. This allows users to perform quick 3D "
"visualization while being able to use Mayavi's powerful features."
msgstr ""
"我们简称`mayavi.mlab`模块为mlab，就像我们在 matplotlib 中寥寥几行代码的 `pylab` "
"一样，mayavi2提供了一种简单的方式进行数据可视化。用户可以在Mayavi强大的性能下快速3D可视化。"

#: ../../mayavi/docs/source/mayavi/mlab.rst:23
msgid ""
"Mayavi's mlab is designed to be used in a manner well-suited to scripting "
"and does not present a fully object-oriented API. It is can be used "
"interactively with IPython_."
msgstr "在设计层面，Mayavi的mlab模块是很适合脚本语言的。并且它不完全是一个面向对象的API，它可以和IPython进行交互。"

#: ../../mayavi/docs/source/mayavi/mlab.rst:29
msgid ""
"When using IPython with mlab, as in the following examples, IPython must be "
"invoked with the ``--gui=qt`` command line option like this::"
msgstr ""
"接下来的例子将演示，在Ipython中使用mlab的情形。\n"
"IPython需要使用——“$ ipython --gui=qt”命令行选项来调用，如下所示:"

#: ../../mayavi/docs/source/mayavi/mlab.rst:34
msgid ""
"On recent versions of IPython, this can be turned on from within IPython "
"itself by::"
msgstr "最新版本的IPython我们也可以用这种方式："

#: ../../mayavi/docs/source/mayavi/mlab.rst:39
msgid "If the following exception is raised::"
msgstr "如果提示异常信息："

#: ../../mayavi/docs/source/mayavi/mlab.rst:43
msgid ""
"This is the result of incompatible setups between PyQt and PySide. The "
"solution is to run ``QT_API=pyqt ETS_TOOLKIT=qt4 ipython``. More details can"
" be found at the `ipython documentation page`_."
msgstr ""
"这是由于PyQt和PySide不兼容造成的。解决方法是运行：``QT_API=pyqt ETS_TOOLKIT=qt4 "
"ipython``。更多的内容请参考`ipython documentation page` 页面。"

#: ../../mayavi/docs/source/mayavi/mlab.rst:47
msgid ""
"If for some reason Mayavi fails with the Qt backend, you can also try using "
"the wxPython backend by doing::"
msgstr ""
"如果一些其他原因导致Mayavi的Qt后端错误，您也可以通过以下方式使用wxPython后端：\n"
"$ ETS_TOOLKIT=wx\n"
"$ ipython --gui=wx"

#: ../../mayavi/docs/source/mayavi/mlab.rst:53
msgid ""
"For more details on using mlab and running scripts, read the section "
":ref:`running-mlab-scripts`"
msgstr "关于mlab的更多细节，请参考`Running mlab scripts`章节。"

#: ../../mayavi/docs/source/mayavi/mlab.rst:62
msgid ""
"In this section, we first introduce simple plotting functions, to create 3D "
"objects as representations of `numpy` arrays. Then we explain (1) how "
"properties such as color or glyph size can be modified or used to represent "
"data; (2) how the visualization created through `mlab` can be modified "
"interactively with dialogs, (3) how scripts and animations can be ran. "
"Finally, we expose a more advanced use of `mlab` in which full visualization"
" pipeline are built in scripts, and we give some detailed examples of "
"applying these tools to visualizing volumetric scalar and vector data."
msgstr ""
"这一节，我们仅介绍 mlab 简单的绘图函数，以numpy数组的方式创建3D对象。现在我们要介绍：\n"
"(1).如何修改颜色和字体大小\n"
"(2).如何使用`mlab`进行可视化以及通过可交互的图形界面进行修改\n"
"(3).如何书写脚本以及运行动画\n"
"最后，我们将展示\"mlab\"的高级用法，它将以完整的pipeline管线方式进行脚本搭建。在这里我们将给出一些具体的案例，对标量数据和矢量数据进行可视化。"

#: ../../mayavi/docs/source/mayavi/mlab.rst:74
msgid "Section contents"
msgstr "分节目录"

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:4
msgid "A demo"
msgstr "一个案例"

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:6
msgid ""
"To get you started, here is a pretty example showing a spherical harmonic as"
" a surface::"
msgstr "我们将以球谐函数的面绘制作为一个案例开始："

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:24
msgid ""
"Bulk of the code in the above example is to create the data.  One line "
"suffices to visualize it.  This produces the following visualization:"
msgstr "以上案例的代码是为了创建数据，一行代码就足以对它进行可视化。其可视化的图像如下所示："

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:30
msgid ""
"The visualization is created by the single function :func:`mesh` in the "
"above."
msgstr "可视化由一个函数完成：mesh"

#: ../../mayavi/docs/source/mayavi/mlab_demo.rst:32
msgid ""
"Several examples of this kind are provided with mlab (see `test_contour3d`, "
"`test_points3d`, `test_plot3d_anim` etc.).  The above demo is available as "
"`test_mesh`.  Under IPython these may be found by tab completing on "
"`mlab.test`.  You can also inspect the source in IPython via the handy "
"`mlab.test_contour3d??`."
msgstr ""
"这类案例mlab都有所提供（详见：`test_contour3d`, `test_points3d`, `test_plot3d_anim` "
"等）。上面演示的`test_mesh`。在IPyhon中可以通过在`mlab.test`用tab键的自动补全找到。您也可以在IPython中通过手动输入`mlab.test_contour3d??`查看代码。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:4
msgid "3D Plotting functions for numpy arrays"
msgstr "关于numpy数组的3D可视化"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:6
msgid ""
"Visualization can be created in `mlab` by a set of functions operating on "
"numpy arrays."
msgstr "通过`mlab`的一系列函数，可以对numpy进行数据可视化。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:9
msgid ""
"The mlab plotting functions take numpy arrays as input, describing the "
"``x``, ``y``, and ``z`` coordinates of the data. They build full-blown "
"visualizations: they create the data source, filters if necessary, and add "
"the visualization modules. Their behavior, and thus the visualization "
"created, can be fine-tuned through keyword arguments, similarly to pylab. In"
" addition, they all return the visualization module created, thus "
"visualization can also be modified by changing the attributes of this "
"module."
msgstr ""
"`mlab`函数将numpy数组作为输入，描述数据的``x``, ``y``, ``z`` "
"坐标，并以此构建成熟的可视化：如果有需要，它们可以完成data source数据源层级、filter滤波层级以及visualization "
"module可视化模块层级的创建。与matplotlib的pylab类似，它们的创建过程可以通过关键字参数进行调整。此外，它们都可以返回所创建的可视化模块对应的对象，因此可以通过修改它们的属性对可视化进行修改。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:20
msgid ""
"In this section, we only list the different functions. Each function is "
"described in detail in the :ref:`mlab-reference`, at the end of the user "
"guide, with figures and examples. Please follow the links."
msgstr "这一节，我们仅列出不同的函数。对于每一个函数的具体用法请参考`mlab-reference`，在这份指南的最后，我们将附上图像和案例。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:26
msgid "0D and 1D data"
msgstr "0D数据 和 1D数据"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:35
msgid "|points3d|"
msgstr "points3d 方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:51
msgid "points3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:35
msgid ""
":func:`points3d` |hack| Plots glyphs (like points) at the position of the "
"supplied data, described by ``x``, ``y``, ``z`` numpy arrays of the same "
"shape."
msgstr ""
"`points3d`方法\n"
"它将显示数据所给位置的图形（如点状，可以是其他形状），其位置信息由numpy数组给定，坐标由``x``, ``y``, ``z`` 表示，三个坐标的长度必须一致。译者注：除了坐标信息之外，这个函数是可以赋标量信息的。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:29
msgid "<br>"
msgstr "<br>"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:41
msgid "|plot3d|"
msgstr "plot3d 方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:48
msgid "plot3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:41
msgid ""
":func:`plot3d` |hack| Plots line between the supplied data, described by "
"``x``, ``y``, ``z`` 1D numpy arrays of the same length."
msgstr "`plot3d`方法将绘制线，数据``x``, ``y``, ``z`` 坐标由1D的numpy数组给定，并且三个坐标的长度必须一致。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:55
msgid "2D data"
msgstr "2D数据"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:59
msgid "|imshow|"
msgstr "imshow方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:127
msgid "imshow"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:59
msgid ":func:`imshow` |hack| View a 2D array as an image."
msgstr "imshow 可以将2D数组可视化成一张图像。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:63
msgid "|surf|"
msgstr "surf 方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:136
msgid "surf"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:63
msgid ""
":func:`surf` |hack| View a 2D array as a carpet plot, with the z axis "
"representation through elevation the value of the array points."
msgstr "surf方法将2D数组平铺成一张毯子，并用z坐标表示高度。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:69
msgid "|contour_surf|"
msgstr "contour_surf 方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:130
msgid "contour_surf"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:69
msgid ""
":func:`contour_surf` |hack| View a 2D array as line contours, elevated "
"according to the value of the array points."
msgstr "`contour_surf`将使用2D数组绘制等高线，并用一个坐标表示等高线的高度。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:74
msgid "|mesh|"
msgstr "mesh 方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:139
msgid "mesh"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:74
msgid ""
":func:`mesh` |hack| Plot a surface described by three 2D arrays, ``x``, "
"``y``, ``z`` giving the coordinates of the data points as a grid. |hack| "
"Unlike :func:`surf`, the surface is defined by its ``x``, ``y`` and ``z`` "
"coordinates with no privileged direction. More complex surfaces can be "
"created."
msgstr ""
"`mesh`方法用于绘制面绘制，由3个2D数组给定， ``x``, ``y``, ``z`` "
"将坐标以网格形式绘出。与`surf`方法不同，2D数组``x``, ``y`` ,``z`` "
"所给定的网格连接方式不是默认给出的，它需要特别指定，因此能创建更复杂的网格连接形式。译者注：surf更多是正交网格，mesh的自由度更高但是也相对更复杂。更多细节读者请阅读`Data"
" representation in Mayavi`"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:84
msgid "|barchart|"
msgstr "barchart方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:142
msgid "barchart"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:84
msgid ""
":func:`barchart` |hack| Plot an array ``s``, or a set of points with "
"explicit coordinates arrays, ``x``, ``y`` and ``z``, as a bar chart, eg for "
"histograms. |hack| This function is very versatile and will accept 2D or 3D "
"arrays, but also clouds of points, to position the bars."
msgstr ""
"`barchart`方法将对数组或者对一系列给定的坐标点进行可视化。例如，柱状图中，x,y,z表示坐标，s表示高度。该函数通用性较强，可以接受2D或3D数据，也接受空间点云。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:94
msgid "|triangular_mesh|"
msgstr "triangular_mesh 方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:133
msgid "triangular_mesh"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:94
msgid ""
":func:`triangular_mesh` |hack| Plot a triangular mesh, fully specified by "
"``x``, ``y`` and ``z`` coordinates of its vertices, and the (n, 3) array of "
"the indices of the triangles."
msgstr "triangular_mesh 用于绘制三角形网格，其顶点由``x``, ``y``,``z``坐标给定，坐标的维度为 (n, 3)。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst-1
msgid "Vertical scale of  :func:`surf` and :func:`contour_surf`"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:105
msgid ""
":func:`surf` and :func:`contour_surf` can be used as 3D representation of 2D"
" data. By default the z-axis is supposed to be in the same units as the x "
"and y axis, but it can be auto-scaled to give a 2/3 aspect ratio. This "
"behavior can be controlled by specifying the \"warp_scale='auto'\"."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst-1
msgid "From data points to surfaces."
msgstr "从点构建面。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:113
msgid ""
"Knowing the positions of data points is not enough to define a surface, "
"connectivity information is also required. With the functions :func:`surf` "
"and :func:`mesh`, this connectivity information is implicitly extracted from"
" the shape of the input arrays: neighboring data points in the 2D input "
"arrays are connected, and the data lies on a grid. With the function "
":func:`triangular_mesh`, connectivity is explicitly specified. Quite often, "
"the connectivity is not regular, but is not known in advance either. The "
"data points lie on a surface, and we want to plot the surface implicitly "
"defined. The `delaunay2d` filter does the required nearest-neighbor "
"matching, and interpolation, as shown in the "
"(:ref:`example_surface_from_irregular_data`)."
msgstr ""
"仅仅知道数据的点的位置是不足以定义网格的，我们还需要知道点之间的连接方式。`surf` 和 `mesh`，它们的连接方式隐含在所加载的数据里，即数据的组织方式决定了它们的网格连接方式，相邻的2D数组彼此之间最近的点相互连接。对于，`triangular_mesh`其连接方式同样是隐含在数据中。比较常见的情形是，所要构建的连接方式并非正交网格。而面绘制的数据都基于网格，因此我们需要特别指定网格的组织形式。如果添加`delaunay2d` filter滤波层级就会匹配相邻的点进行连接，并且进行插值。(请参考：`example_surface_from_irregular_data`)\n"
"译者注：如果采用pipeline管线搭建，`delaunay2d`只是filter层级的其中一种，还有其他选择，比如`delaunay3d`，它们的区别是，前者在“二维的平面最近”进行匹配的，而后者是“三维的空间最近”进行匹配。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:146
msgid "3D data"
msgstr "3D数据"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:150
msgid "|contour3d|"
msgstr "coutour3d方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:182
msgid "contour3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:150
msgid ""
":func:`contour3d` |hack| Plot iso-surfaces of volumetric data defined as a "
"3D array."
msgstr "`contour3d` 方法用于绘制3D体数据的等值面。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:155
msgid "|quiver3d|"
msgstr "quiver3d 方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:185
msgid "quiver3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:155
msgid ""
":func:`quiver3d` |hack| Plot arrows to represent vectors at data points. The"
" ``x``, ``y``, ``z`` position are specified by numpy arrays, as well as the "
"``u``, ``v``, ``w`` components of the vectors."
msgstr ""
"quiver3d 方法将为数据绘制箭头。``x``, ``y``, ``z``为位置坐标，``u``, ``v``, ``w``为方向，均由numpy数组给定。\n"
"译者注：矢量可视化可采用quiver3d，需要传入6个参数，样式也可由参数传入，注意箭头大小和方向均由uvw控制。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:162
msgid "|flow|"
msgstr "flow 方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:188
msgid "flow"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:162
msgid ""
":func:`flow` |hack| Plot a trajectory of particles along a vector field "
"described by three 3D arrays giving the ``u``, ``v``, ``w`` components on a "
"grid."
msgstr "flow方法用于绘制粒子的轨迹，它由三个3D数组给定。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:168
msgid "|slice|"
msgstr "slice 方法"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:191
msgid "slice"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:168
msgid ""
":func:`volume_slice` |hack| Plots an interactive image plane sliced through "
"volumetric data."
msgstr ""
"volume_slice 方法用于绘制一个可交互的平面，它可以对体数据进行切片。\n"
"译者注：volume_slice 更多是一种可视化的辅助手段，如医学影像，体数据核磁等的可视化，生成一个可灵活控制的组织切面方便观察。"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst-1
msgid "Structured or unstructured data"
msgstr "结构化与非结构化的数据"

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:177
msgid ""
":func:`contour3d`, :func:`volume_slice` and :func:`flow` require ordered "
"data (to be able to interpolate between the points), whereas "
":func:`quiver3d` works with any set of points. The required structure is "
"detailed in the functions' documentation."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_3d_plotting_functions.rst:197
msgid ""
"Many richer visualizations can be created by assembling data sources filters"
" and modules. See the :ref:`controlling-the-pipeline-with-mlab-scripts` and "
"the :ref:`mlab-case-studies` sections."
msgstr ""
"如果要对可视化有更多要求，丰富其细节则需要自己配置pipeline管线：从data "
"source数据源层级到filter滤波层级，再到module可视化模块层级进行逐层搭建。相关内容请参考下面的章节，`controlling-the-"
"pipeline-with-mlab-scripts`和`mlab-case-studies`。"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:2
msgid "Changing the looks of the visual objects created"
msgstr "修改创建的可视化对象"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:5
msgid "Adding color or size variations"
msgstr "添加颜色以及对图形大小的调整"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "Color"
msgstr "颜色"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:8
msgid ""
"The color of the objects created by a plotting function can be specified "
"explicitly using the 'color' keyword argument of the function. This color is"
" then applied uniformly to all the objects created."
msgstr ""
"可视化对象由绘图函数进行创建，图像的颜色可以用 "
"'color'关键字给定。如果用此方法，它将会把颜色无差别地匹配图像的所有内容。译者注：这里绘图函数指的是.mlab方法创建，管线搭建方法是类似的。"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:12
msgid ""
"If you want to vary the color across your visualization, you need to specify"
" scalar information for each data point. Some functions try to guess this "
"information: these scalars default to the norm of the vectors, for functions"
" with vectors, or to the z elevation for functions where it is meaningful, "
"such as :func:`surf` or :func:`barchart`."
msgstr ""
"如果您想根据您的可视化结果让可视化的图形颜色不同，您需要将scalar标量数据传入赋给每一个数据点。默认情况下，绘制矢量图时候，它用矢量信息的范数来作为标量值的大小；对于另外一些情况是采用的z值作为其标量值。\n"
"译者注：如quiver3d绘制的矢量箭头颜色的深浅是由所给数据uvw进行欧氏距离计算得到的。对于非矢量绘图的数据，采用的是传入的z值，也就是高度信息作为颜色深浅。"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:18
msgid ""
"This scalar information is converted into colors using the colormap, or also"
" called LUT, for Look Up Table. The list of possible colormaps is::"
msgstr "将标量信息转化成颜色会用到下面的配色表，简称LUT，Look Up Table。以下列举的是配色方案："

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:34
msgid ""
"The easiest way to choose the colormap, most adapted to your visualization "
"is to use the GUI (as described in the next paragraph). The dialog to set "
"the colormap can be found in the `Colors and legends` node."
msgstr ""
"选择配色表最简单的方法是使用GUI图形界面（这将会在下一段进行介绍）。设置颜色的选项在 `Colors and legends`节点里面。\n"
"译者注：使用图像界面可以调整配色方案，手动选择需要修改的管线层级即可。"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:38
msgid ""
"To use a custom-defined colormap, for the time being, you need to write "
"specific code, as show in :ref:`example_custom_colormap`."
msgstr "如果使用自定义的配色方案，您需要自行编写代码，详细请参考`example_custom_colormap`。"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "Size of the glyph"
msgstr "图形的大小"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:42
msgid ""
"The scalar information can also be displayed in many different ways. For "
"instance it can be used to adjust the size of glyphs positioned at the data "
"points."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:46
msgid ""
"**A caveat: Clamping: relative or absolute scaling** Given six points "
"positioned on a line with interpoint spacing 1::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:53
msgid "If we represent a scalar varying from 0.5 to 1 on this dataset::"
msgstr "如果我们将数据的标量范围设定为0.5到1："

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:57
msgid ""
"We represent the dataset as spheres, using :func:`points3d`, and the scalar "
"is mapped to diameter of the spheres::"
msgstr "使用`points3d`方法，我们将数据集可视化成球状，标量数据会和数据集进行一一匹配。"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:63
msgid ""
"By default the diameter of the spheres is not 'clamped', in other words, the"
" smallest value of the scalar data is represented as a null diameter, and "
"the largest is proportional to inter-point distance. The scaling is only "
"relative, as can be seen on the resulting figure:"
msgstr ""
"默认情况下，小球的直径不是严格的。事实上，标量最小的值它的直径是空值null，最大的值所对应的球，其直径正比于点与点之间的距离。这个比例是相对的，如下面的结果："

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:71
msgid ""
"This behavior gives visible points for all datasets, but may not be desired "
"if the scalar represents the size of the glyphs in the same unit as the "
"positions specified."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:75
msgid ""
"In this case, you shoud turn auto-scaling off by specifying the desired "
"scale factor::"
msgstr "这时候您可以通过指定scale_factor控制放缩系数，从而关闭auto-scaling自动放缩。"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:84
msgid ""
"In earlier versions of Mayavi (up to 3.1.0 included), the glyphs are not "
"auto-scaled, and as a result the visualization can seem empty due to the "
"glyphs being very small. In addition the minimum diameter of the glyphs is "
"clamped to zero, and thus the glyph are not scaled absolutely, unless you "
"specify::"
msgstr ""
"在Mayavi的早期版本（包括3.1.0之前），图形的放缩并不是自动的。由于可视化的图形尺寸偏小，导致可视化看起来很空旷。而数据中的最小值其图形直径是严格为0的，除非您指定，其导致图形无法放缩。"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "More representations of the attached scalars or vectors"
msgstr "标量和矢量可视化的更多表现"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:93
msgid ""
"There are many more ways to represent the scalar or vector information "
"attached to the data. For instance, scalar data can be 'warped' into a "
"displacement, e.g. using a `WarpScalar` filter, or the norm of scalar data "
"can be extracted to a scalar component that can be visualized using iso-"
"surfaces with the `ExtractVectorNorm` filter."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:0
msgid "Displaying more than one quantity"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:100
msgid ""
"You may want to display color related to one scalar quantity while using a "
"second for the iso-contours, or the elevation. This is possible but requires"
" a bit of work: see :ref:`example_atomic_orbital`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:104
msgid ""
"If you simply want to display points with a size given by one quantity, and "
"a color by a second, you can use a simple trick: add the size information "
"using the norm of vectors, add the color information using scalars, create a"
" :func:`quiver3d` plot choosing the glyphs to symmetric glyphs, and use "
"scalars to represent the color::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:119
msgid "Changing the scale and position of objects"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:121
msgid ""
"Each mlab function takes an `extent` keyword argument, that allows to set "
"its (x, y, z) extents. This give both control on the scaling in the "
"different directions and the displacement of the center. Beware that when "
"you are using this functionality, it can be useful to pass the same extents "
"to other modules visualizing the same data. If you don't, they will not "
"share the same displacement and scale."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:128
msgid ""
"The :func:`surf`, :func:`contour_surf`, and :func:`barchart` functions, "
"which display 2D arrays by converting the values in height, also take a "
"`warp_scale` parameter, to control the vertical scaling."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:135
msgid "Changing object properties interactively"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:137
msgid ""
"Mayavi, and thus mlab, allows you to interactively modify your "
"visualization."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:140
msgid ""
"The Mayavi pipeline tree can be displayed by clicking on the mayavi icon in "
"the figure's toolbar, or by using :func:`show_pipeline` mlab command. One "
"can now change the visualization using this dialog by double-clicking on "
"each object to edit its properties, as described in other parts of this "
"manual, or add new modules or filters by using this icons on the pipeline, "
"or through the right-click menus on the objects in the pipeline."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst-1
msgid "The record feature"
msgstr "录制功能"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:155
msgid ""
"A **very useful feature** of this dialog can be found by pressing the red "
"round button of the toolbar of the pipeline view. This opens up a recorder "
"that tracks the changes made interactively to the visualization via the "
"dialogs, and generates valid lines of Python code. To find out about "
"navigating through a program in the pipeline, see "
":ref:`organisation_mayavi_visualisations`."
msgstr ""
"这是一个非常有用的功能，它位于管线配置界面上，点击红色圆按钮即可。通过一个对话框，它将记录界面交互过程中的变化，并生成Python代码。如果想了解pipeline搭建的更多细节，请参考`Organisation"
" of Mayavi visualizations: the pipeline`。"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:162
msgid ""
"In addition, for every object returned by a mlab function, "
"``this_object.edit_traits()`` brings up a dialog that can be used to "
"interactively edit the object's properties. If the dialog doesn't show up "
"when you enter this command, please see :ref:`running-mlab-scripts`."
msgstr ""
"除此之外，每一个生成的对象都会有返回值，它将返回mlab函数。``this_object.edit_traits()``将启动一个对话框，您可以用交互的方式对对象的属性进行编辑。如果您没能成功开启对话框，请参考`running-"
"mlab-scripts`。"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst-1
msgid "Using ``mlab`` with the full Envisage UI"
msgstr "使用Envisage界面的mlab"

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:170
msgid ""
"Sometimes it is convenient to write an mlab script but still use the full "
"envisage application so you can click on the menus and use other modules "
"etc.  To do this you may do the following before you create an mlab figure::"
msgstr "有时候使用envisage应用编写mlab脚本很方便，您可以点击菜单栏使用其他的模块。则您需要在创建图像之前进行下面的操作："

#: ../../mayavi/docs/source/mayavi/mlab_changing_object_looks.rst:180
msgid ""
"This will give you the full-fledged UI instead of the default simple window."
msgstr "这将为您提供完整成熟的界面，而不是简单的默认窗口。"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:3
msgid "Figures, legends, camera and decorations"
msgstr "图像，图例，相机设置及图像修饰"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:6
msgid "Handling several figures"
msgstr "对多个图像进行处理"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:8
msgid ""
"All mlab functions operate on the current scene, that we also call "
":func:`figure`, for compatibility with matlab and pylab. The different "
"figures are indexed by key that can be an integer or a string. A call to the"
" :func:`figure` function giving a key will either return the corresponding "
"figure, if it exists, or create a new one. The current figure can be "
"retrieved with the :func:`gcf` function. It can be refreshed using the "
":func:`draw` function, saved to a picture file using :func:`savefig` and "
"cleared using :func:`clf`."
msgstr ""
"所有的mlab函数仅对当前的scene层级有效，这与matlab和pyplot是一样的，因此我们使用figure函数进行不同scene之间的切换。如果我们要切换不同的图像，可以使用键值对进行索引，键接受整形integer和字符串string的类型。使用figure函数匹配其键值对，它会返回相应的图像；如果键对应的scene层级不存在，它会创建一个。\n"
"使用gcf函数恢复当前绘制的图像；\n"
"使用draw函数对图像进行更新；\n"
"使用savefig函数保存当前的图像。"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:19
msgid "Figure decorations"
msgstr "图像修饰函数"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:21
msgid ""
"Axes can be added around a visualization object with the :func:`axes` "
"function, and the labels can be set using the :func:`xlabel`, :func:`ylabel`"
" and :func:`zlabel` functions. Similarly, :func:`outline` creates an outline"
" around an object. :func:`title` adds a title to the figure."
msgstr ""
"使用axes函数可以为可视化对象添加坐标轴。\n"
"使用xlabel，ylabel，zxlabel函数可以为图像添加坐标轴标签。\n"
"相似的用法，outline函数可以为可视化图像创建外框。\n"
"title函数可以为图像添加标题。"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:26
msgid ""
"Color bars can be used to reflect the color maps used to display values "
"(LUT, or lookup tables, in VTK parlance). :func:`colorbar` creates a color "
"bar for the last object created, trying to guess whether to use the vector "
"data or the scalar data color maps. The :func:`scalarbar` and "
":func:`vectorbar` function scan be used to create color bars specifically "
"for scalar or vector data."
msgstr ""
"Color "
"bar颜色条或比色卡是其数据的映射（其配色方案在LUT中设定），默认情况下`colorbar`函数创建的是最后一个数据的映射，如果数据是标量则创建为标量比色卡，矢量也是如此。也可以指定scalarbar和vectorbar创建相应的比色卡。"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:33
msgid ""
"A small *xyz* triad can be added to the figure using "
":func:`orientation_axes`."
msgstr "也可以使用orientation_axes同时添加三个坐标轴的标签。"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:36
msgid ""
"The :func:`orientation_axes` was named `orientationaxes` before release 3.2."
msgstr "在版本3.2之前，orientation_axes函数为orientationaxes"

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:40
msgid "Moving the camera"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:42
msgid ""
"The position and direction of the camera can be set using the :func:`view` "
"function. They are described in terms of Euler angles and distance to a "
"focal point. The :func:`view` function tries to guess the right roll angle "
"of the camera for a pleasing view, but it sometimes fails. The :func:`roll` "
"explicitly sets the roll angle of the camera (this can be achieve "
"interactively in the scene by pressing down the control key, while dragging "
"the mouse, see :ref:`interaction-with-the-scene`)."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:50
msgid ""
"The :func:`view` and :func:`roll` functions return the current values of the"
" different angles and distances they take as arguments. As a result, the "
"view point obtained interactively can be stored and reset using::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst-1
msgid "Rotating the camera around itself"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:64
msgid ""
"You can also rotate the camera around itself using the `roll`, `yaw` and "
"`pitch` methods of the camera object. This moves the focal point::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:71
msgid ""
"Unlike the :func:`view` and :func:`roll` function, the angles are "
"incremental, and not absolute."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst-1
msgid "Modifying zoom and view angle"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:76
msgid ""
"The camera is entirely defined by its position, its focal point, and its "
"view angle (attributes 'position', 'focal_point', 'view_angle'). The camera "
"method 'zoom' changes the view angle incrementally by the specify ratio, "
"where as the method 'dolly' translates the camera along its axis while "
"keeping the focal point constant. The :func:`move` function can also be "
"useful in these regards."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:83
msgid "Camera parallel scale"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_figures_decorations.rst:85
msgid ""
"In addition to the information returned and set by mlab.view and mlab.roll, "
"a last parameter is needed to fully define the view point: the parallel "
"scale of the camera, that control its view angle. It can be read (or set) "
"with the following code::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:4
msgid "Running mlab scripts"
msgstr "运行mlab脚本"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:6
msgid ""
"Mlab, like the rest of Mayavi, is an interactive application. If you are not"
" already in an interactive environment (see next paragraph), to interact "
"with the figures or the rest of the drawing elements, you need to use the "
":func:`show` function. For instance, if you are writing a script, you need "
"to call :func:`show` each time you want to display one or more figures and "
"allow the user to interact with them."
msgstr ""
"Mlab和Mayavi的其他部分一样，是一个交互性的应用。如果当前不是集成环境（见下一节），您需要使用show函数开启交互。假设您在编写脚本，您每次都需要调用show显示图像。"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:14
msgid "Using mlab interactively"
msgstr "使用mlab交互"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:16
msgid ""
"Using IPython_, mlab instructions can be run interactively, or in scripts "
"using IPython_'s ``%run`` command::"
msgstr "使用IPython，mlab指令可以交互式进行，或者也可以使用IPython执行 %run command："

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:21
msgid ""
"You need to start IPython_ with the `--gui=qt` option. In this environment, "
"the plotting commands are interactive: they have an immediate effect on the "
"figure, alleviating the need to use the :func:`show` function."
msgstr "您需要使用 –gui=qt 开启Qt界面选项。在这个环境下，绘图命令是可交互的：不用show函数也能呈现即时效果。"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:28
msgid ""
"Mlab can also be used interactively in the Python shell of the mayavi2 "
"application, or in any interactive Python shell of wxPython-based "
"application (such as other Envisage-based applications, or SPE, Stani's "
"Python Editor)."
msgstr ""
"Mlab也能在Mayavi2应用中进行交互，确切来说，所有以wxPython为基础的Python脚本都可以进行（比如其他的Envisage基础的应用，如SPE）。"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:34
msgid "Using together with Matplotlib"
msgstr "与Matplotlib一起使用"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:36
msgid ""
"If you want to use Matplotlib's interactive plotting with Mayavi's mlab in "
"IPython you should:"
msgstr "如果您想在IPython中使用同时使用Matplotlib和Mayavi进行交互，您应该："

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:39
msgid "start IPython with::"
msgstr "打开IPython："

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:43
msgid "alternatively, start IPython with the `--gui=qt` option::"
msgstr "相应地，打开IPython的图像界面：`--gui=qt` "

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:47
msgid ""
"and **before** importing any matplotlib modules, enter the following Python "
"commands::"
msgstr "在调用任何matplotlib的模块之前，需要先输入以下Python命令："

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:54
msgid "one could also use the ``--pylab`` option to IPython as follows::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:60
msgid ""
"If you want matplotlib and mlab to work together by default in IPython, you "
"can change you default matplotlib backend, by editing the "
"`~/.matplotlib/matplotlibrc` to add the following line::"
msgstr ""
"如果您想要默认情况下让mlab和matplotlib在IPython一起工作，您可以修改matplotlib的后端配置：编辑`~/.matplotlib/matplotlibrc`配置文件，添加下面内容："

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:66
msgid ""
"If for some reason, the Qt backend does not work, you can use the wx "
"backend.  To do this you may do::"
msgstr "如果因为某些原因，Qt后端无法正常使用，您可以使用wx后端。您可以这样做："

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:72
msgid ""
"Note that as far as Mayavi is concerned, it chooses the appropriate toolkit "
"using the ``ETS_TOOLKIT`` environment variable.  If this is not set, the "
"supported toolkits are tried in a version-dependent order until one "
"succeeds.  With recent releases of traitsui_, the default is Qt.  The "
"possible options for ``ETS_TOOLKIT`` are:"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:78
msgid "`qt4`: to use the Qt backend (either PySide or PyQt4),"
msgstr "`qt4`: 使用Qt后端（PySide 或 PyQt4）"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:79
msgid "`wx`: to use wxPython,"
msgstr "wx：使用wxPython"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:80
msgid "`null`: to use no UI toolkit."
msgstr "`null`:使用无界面的工具箱"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst-1
msgid "Capturing mlab plots to integrate in pylab"
msgstr "将mlab绘图集成到pylab中"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:86
msgid ""
"Starting from Mayavi version 3.4.0, the mlab :func:`screenshot` can be used "
"to take a screenshot of the current figure, to integrate in a matplotlib "
"plot."
msgstr "从Mayavi的3.4.0的版本开始，mlab函数可以捕获当前图像的截图，该功能已经集成到matplotlib中。"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:91
msgid "In scripts"
msgstr "脚本"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:93
msgid ""
"Mlab commands can be written to a file, to form a script. This script can be"
" loaded in the Mayavi application using the *File->Open file* menu entry, "
"and executed using the *File->Refresh code* menu entry or by pressing "
"``Control-r``.  It can also be executed during the start of the Mayavi "
"application using the ``-x`` command line switch."
msgstr ""
"Mlab绘图命令可以写入文件做成一个脚本。脚本的加载方式可以通过*File->Refresh "
"code*菜单栏进入，也可以通过键盘``Control-r``的方式。当然也可以由Mayavi应用通过``-x``开启。"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:99
msgid ""
"As mentioned above, when running outside of an interactive environment, for "
"instance with `python myscript.py`, you need to call the :func:`show` "
"function (as shown in the demo_ above) to pause your script and have the "
"user interact with the figure."
msgstr ""
"前面提到过集成环境，但当使用`python "
"myscript.py`的命令运行在非集成环境时，需要调用show函数（这里有一个案例），它会开启交互并显示您的图像。"

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:107
msgid ""
"You can also use :func:`show` to decorate a function, and have it run in the"
" event-loop, which gives you more flexibility::"
msgstr ""
"您也可以使用装饰器的方法，将被调用的mlab函数放在一个定义的函数体中会使其变得更加灵活，然后它将开启事件循环event-loop的交互界面："

#: ../../mayavi/docs/source/mayavi/mlab_running_scripts.rst:117
msgid ""
"With this decorator, each time the `image` function is called, `mlab` makes "
"sure an interactive environment is running before executing the `image` "
"function. If an interactive environment is not running, `mlab` will start "
"one and the image function will not return until it is closed."
msgstr ""
"在这个装饰器的作用下，每次调用绘图函数，mlab都会确保交互开启。如果交互没能启动，mlab会打开它直到关闭交互之前都不会直接返回其函数对象。"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:5
msgid "Animating the data"
msgstr "将数据做成动画"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:7
msgid ""
"Often it isn't sufficient to just plot the data.  You may also want to "
"change the data of the plot and update the plot without having to recreate "
"the entire visualization, for instance to do animations, or in an "
"interactive application. Indeed, recreating the entire visualization is very"
" inefficient and leads to very jerky looking animations. To do this, mlab "
"provides a very convenient way to change the data of an existing mlab "
"visualization.  Consider a very simple example.  The "
"`mlab.test_simple_surf_anim` function has this code::"
msgstr ""
"有时数据可视化并不能满足需求，我们希望能改变数据并更新它并重新可视化，比如动画。事实上，重新创建全部的可视化是非常低效的，而且会非常不稳定。为了解决这个问题，mlab提供了非常方便的方法，我们在这里给出一个非常简单的示例。\n"
"请参考：`mlab.test_simple_surf_anim`"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:24
msgid ""
"The first two lines define a simple plane and view that.  The next three "
"lines animate that data by changing the scalars producing a plane that "
"rotates about the origin.  The key here is that the `s` object above has a "
"special attribute called `mlab_source`.  This sub-object allows us to "
"manipulate the points and scalars.  If we wanted to change the `x` values we"
" could set that too by::"
msgstr ""
"代码的前两行绘制了一个简单的平面。定义的函数体内部通过循环的方式,不断改变标量值使平面绕原点旋转。这里的关键之处在于传标量数据的`s`对象，它有一个特殊的属性`.mlab_source`，我们可以对它的子对象`.scalars`进行修改。如果我们相对坐标信息进行修改，我们同样可以这样做。"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:33
msgid ""
"The only thing to keep in mind here is that the shape of `x` should not be "
"changed."
msgstr "我们仅需记住，不应该改变x的数组维度"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:36
msgid ""
"Note that many of the examples discussed here may not appear to be animated "
"at all and you may just see the final state of the animation. If you save a "
"screenshot of the image at each stage of the animation, you would get the "
"correct result.  However, you will not get the visual effect on screen.  See"
" the section :ref:`animating_a_visualization` to learn more on the use of "
"the `@animate` decorator (:func:`mayavi.mlab.animate`) to achieve this. We "
"show a small example here, where we rewrite the above to animate nicely::"
msgstr ""
"需要引起注意的是，这里所讨论的一些案例不一定是动画，仅仅是动画的最后一帧。如果将图像的每帧截图都保存下来，虽然您也将会得到相应的结果，但是您无法得到想要的效果。参考`animating_a_visualization`（`mayavi.mlab.animate`），学习`@animate`装饰器的用法来完成它。我们在这里展示一个简单的案例重写上面的动画。"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:61
msgid ""
"In the above, note that we wrap the iteration in a function which is a "
"generator and decorate it with the `@mlab.animate` decorator."
msgstr "如上面的案例，我们对生成器进行装饰，并将迭代封装在函数体中。"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:64
msgid ""
"If multiple values have to be changed, you can use the `set` method of the "
"`mlab_source` to set them as shown in the more complicated example below::"
msgstr "如果有多个值需要更新，您可以使用mlab的属性`mlab_source`，调用该属性的`set`方法，从而完成更加复杂的动画，案例如下："

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:89
msgid ""
"Notice the use of the `set` method above. With this method, the "
"visualization is recomputed only once.  In this case, the shape of the new "
"arrays has not changed, only their values have.  If the shape of the array "
"changes then one should use the `reset` method as shown below::"
msgstr ""
"需要注意的是`set`方法使用的场合，使用该方法，渲染智慧重新计算一次。在这个案例中，数组的维度并没有发生变化，仅仅是其数值的更新。当数值的维度也发生变化的时候，我们需要用"
" `reset`方法，案例如下："

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:106
msgid ""
"Many standard examples for animating data are provided with mlab.  Try the "
"examples with the name `mlab.test_<name>_anim`, i.e. where the name ends "
"with an `_anim` to see how these work and run."
msgstr ""
"Mayavi提供了许多使用mlab动画的标准案例。您可以运行mlab.test_<name>_anim\n"
"说明：案例的名字都以anim结尾，这些例子用以说明是它们如何工作的。"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:114
msgid ""
"It is important to remember distinction between `set` and `reset`. Use `set`"
" or directly set the attributes (`x`, `y`, `scalars` etc.) when you are not "
"changing the shape of the data but only the values. Use `reset` when the "
"arrays are changing shape and size.  Reset usually regenerates all the data "
"and can be inefficient when compared to `set` or directly setting the "
"traits."
msgstr ""
"需要引起重视的是，set 和 reset 方法是有所差别的。当你没有改变数据的维度仅仅是对数值进行修改，使用 set 方法可以直接定义属性 (`x`, "
"`y`, `scalars` "
"等)。但当数组的维度发生变化时候，则需要使用`reset`方法，它的行为通常是重新生成是所有的数据，相比`set`方法和设置特性而言，这种做法效率更低。"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:123
msgid ""
"When creating a Mayavi pipeline, as explained in the following subsection, "
"instead of using ready-made plotting function, the `mlab_source` attribute "
"is created only on sources created via `mlab`. Pipeline created entirely "
"using `mlab` will present this attribute."
msgstr ""
"如果不直接使用预制好的绘图函数，而是要配置Mayavi的pipeline管线，则`mlab_source` "
"属性只能先从sources数据源，经由mlab进行创建，更多细节将在子章节进行介绍。完全由mlab创建的管线，将提供这个属性。"

#: ../../mayavi/docs/source/mayavi/mlab_animating.rst:131
msgid ""
"If you are animating several plot objects, each time you modify the data "
"with there `mlab_source` attribute, Mayavi will trigger a refresh of the "
"scene. This operation might take time, and thus slow your animation. In this"
" case, the tip :ref:`acceleration_mayavi_scripts` may come in handy."
msgstr ""
"如果您有多个动画对象，每次您使用`mlab_source`属性进行修改，Mayavi都会对当前的scene层级弹出一个refresh用于更新的对话框。这个操作会耗费一定时间，会使您的动画变慢。下面这个案例能帮到您：`acceleration_mayavi_scripts`"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:4
msgid "Assembling pipelines with `mlab`"
msgstr "使用mlab配置pipeline管线"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:7
msgid ""
"The plotting functions reviewed above explore only a small fraction of the "
"visualization possibilities of Mayavi. The full power of Mayavi can only be "
"unleashed through the control of the pipeline itself. As described in the "
":ref:`an-overview-of-mayavi` section, a visualization in Mayavi is created "
"by loading the data in Mayavi with `data source` object, optionally "
"transforming the data through :ref:`filters`, and visualizing it with "
":ref:`modules`. The mlab functions build complex pipelines for you in one "
"function, making the right choice of sources, filters, and modules, but they"
" cannot explore all the possible combinations."
msgstr ""
"前面使用的绘图函数仅仅是Mayavi的一小部分，它还有更大的空间和可能性。Mayavi的全部威力需要配合pipeline管线才能完全释放出来。关于使用`data"
" source`对象加载数据进行可视化可以参考章节`an-overview-of-"
"mayavi`。其中有一个数据变换的环节是可选的：它通过`filters`滤波层级和`module`可视化层级完成。而mlab函数仅通过1行代码就能完成复杂的管线配置，完成sources数据源层级，filters层级以及module层级的搭建。其弊端是分化过于完全无法做更多的延伸，以及探索可能的结合方式。"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:18
msgid ""
"Mlab provides a sub-module `pipeline` which contains functions to populate "
"the pipeline easily from scripts. This module is accessible in `mlab`: "
"`mlab.pipeline`, or can be imported from `mayavi.tools.pipeline`."
msgstr ""
"Mlab所包含的子模块`pipeline` 可以使脚本能轻松配置管线。这个模块可以使用 `mlab`调用：`mlab.pipeline，或者直接以 "
"`mayavi.tools.pipeline`方式引入环境。"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:23
msgid ""
"When using an `mlab` plotting function, a pipeline is created: first a "
"source is created from `numpy` arrays, then modules, and possibly filters, "
"are added. The resulting pipeline can be seen for instance with the "
"`mlab.show_pipeline` command. This information can be used to create the "
"very same pipeline directly using the `pipeline` scripting module, as the "
"names of the functions required to create each step of the pipeline are "
"directly linked to the default names of the objects created by `mlab` on the"
" pipeline. As an example, let us create a visualization using :func:`surf`::"
msgstr ""
"当我们使用`mlab`绘图函数的时候，管线已会自动完成搭建：首先是来自`numpy`数组的数据创建source数据源层级，然后是module可视化模块层级，在两者之间可能带有filter滤波层级。对于已经配置好的管线，我们可以使用 `mlab.show_pipeline`进行查看。利用它的层级配置信息，我们可以使用`pipeline`的配置方法对其进行复现。在这里我们需要各个层级的配置函数的信息，其所使用的函数名默认也是pipeline管线的函数名。下面我们演示一个案例，使用`surf`函数构建可视化：\n"
"译者注：这是两种绘图的方式，前者是直接使用高度预制好的surf绘图函数，后者使用pipeline按层搭建，旨在说明两者具有相同的效果。比如Array2DSource数据源层级的名称，也是pipeline的方法名pipeline.array2d_source。"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:39
msgid "The following pipeline is created::"
msgstr "以下是所创建的管线："

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:47
msgid "The same pipeline can be created using the following code::"
msgstr "相同的pipeline管线也可以用下面的代码进行搭建："

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:57
msgid "Data sources"
msgstr "Data sources数据源层级"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:61
msgid ""
"The `mlab.pipeline` module contains functions for creating various data "
"sources from arrays. They are fully documented in details in the :ref:`mlab-"
"pipeline-reference`. We give a small summary of the possibilities here."
msgstr ""
" `mlab.pipeline` 模块包含不同的函数用以创建不同的数据源层级。在这里我们仅做一个可能性的总结，更详细的文档请参考：`mlab-"
"pipeline-reference`。"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:66
msgid ""
"Mayavi distinguishes sources with **scalar data**, and sources with **vector"
" data**, but more important, it has different functions to create sets of "
"**unconnected points**, with data attached to them, or **connected data "
"points** describing continuously varying quantities that can be interpolated"
" between data points, often called `fields` in physics or engineering."
msgstr ""
"Mayavi将数据区分为**scalar data 标量数据**和**vector data "
"矢量数据**。有一点尤为重要，他们用不同的方法创建**unconnected points 离散点**，或具有连续变化的**connected data"
" points 连续点** 。后者会在点与点时间采用插值，在物理和工程上是`fields 场`的概念。"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "Unconnected sources"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:77
msgid ":func:`scalar_scatter` (creates a :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:82
msgid ":func:`vector_scatter` (creates an :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "implicitly-connected sources"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:91
msgid ":func:`scalar_field` (creates an :ref:`image_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:96
msgid ":func:`vector_field` (creates an :ref:`image_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:101
msgid ":func:`array2d_source` (creates an :ref:`image_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "Explicitly-connected sources"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:110
msgid ":func:`line_source` (creates an :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:115
msgid ":func:`triangular_mesh_source` (creates an :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:120
msgid ""
"All the `mlab.pipline` source factories are functions that take numpy arrays"
" and return the Mayavi source object that was added to the pipeline. "
"However, the implicitly-connected sources require well-shaped arrays as "
"arguments: the data is supposed to lie on a regular, orthogonal, grid of the"
" same shape as the shape of the input array, in other words, the array "
"describes an image, possibly 3 dimensional."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:129
msgid ""
"More complicated data structures can be created, such as irregular grids or "
"non-orthogonal grid. See :ref:`the section on data structures <data-"
"structures-used-by-mayavi>`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:135
msgid "Modules and filters"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:137
msgid ""
"For each Mayavi module or filter (see :ref:`modules` and :ref:`filters`), "
"there is a corresponding `mlab.pipeline` function. The name of this function"
" is created by replacing the alternating capitals in the module or filter "
"name by underscores. Thus `ScalarCutPlane` corresponds to "
"`scalar_cut_plane`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:143
msgid ""
"In general, the `mlab.pipeline` module and filter factory functions simply "
"create and connect the corresponding object. However they can also contain "
"addition logic, exposed as keyword arguments. For instance they allow to set"
" up easily a colormap, or to specify the color of the module, when relevant."
" In accordance with the goal of the `mlab` interface to make frequent "
"operations simple, they use the keyword arguments to choose the properties "
"of the created object to suit the requirements. It can be thus easier to use"
" the keyword arguments, when available, than to set the attributes of the "
"objects created. For more information, please check out the docstrings. "
"Full, detailed, usage examples are given in the next subsection."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:4
msgid "Case studies of some visualizations"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:7
msgid "Visualizing volumetric scalar data"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:11
msgid ""
"There are three main ways of visualizing a 3D scalar field. Given the "
"following field::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Iso-Surfaces"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:21
msgid ""
"To display iso surfaces of the field, the simplest solution is simply to use"
" the ``mlab`` :func:`contour3d` function::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:26
msgid "|volumetric_contour3d|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:121
msgid "volumetric_contour3d"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:28
msgid ""
"The problem with this method is that the outer iso-surfaces tend to hide "
"inner ones. As a result, quite often only one iso-surface can be visible."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Volume rendering"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:34
msgid ""
"Volume rendering is an advanced technique in which each voxel is given a "
"partly transparent color. This can be achieved with `mlab.pipeline` using "
"the :func:`scalar_field` source, and the `volume` module::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:41
msgid "|volumetric_volume|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:123
msgid "volumetric_volume"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:43
msgid ""
"For such a visualization, tweaking the opacity transfer function is critical"
" to achieve a good effect. Typically, it can be useful to limit the lower "
"and upper values to the 20 and 80 percentiles of the data, in order to have "
"a reasonable fraction of the volume transparent::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:51
msgid "|volumetric_volume_tweaked|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:125
msgid "volumetric_volume_tweaked"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:53
msgid ""
"It is useful to open the module's dialog (eg through the pipeline interface,"
" or using it's `edit_traits()` method) and tweak the color transfer function"
" to render the transparent low-intensity regions of the image. **For this "
"module, the LUT as defined in the** `Colors and legends` **node are not "
"used.**"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:59
msgid ""
"The limitations of volume rendering is that, while it is often very pretty, "
"it can be difficult to analyze the details of the field with it."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Cut planes"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:66
msgid ""
"While less impressive, cut planes are a very informative way of visualizing "
"the details of a scalar field::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:79
msgid ""
"Image plane widgets can also being created from NumPy arrays using the "
"``mlab`` :func:`volume_slice` function::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:84
msgid "|volumetric_cut_plane|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:127
msgid "volumetric_cut_plane"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:86
msgid ""
"The image plane widget can only be used on regular-spaced data, as created "
"by `mlab.pipeline.scalar_field`, but it is very fast. It should thus be "
"prefered to the scalar cut plane, when possible."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:90
msgid ""
"Clicking and dragging the cut plane is an excellent way of exploring the "
"field."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "A combination of techniques"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:94
msgid ""
"Finally, it can be interesting to combine cut planes with iso-surfaces and "
"thresholding to give a view of the peak areas using the iso-surfaces, "
"visualize the details of the field with the cut plane, and the global mass "
"with a large iso-surface::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:108
msgid "|volumetric_combination|"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:129
msgid "volumetric_combination"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:111
msgid ""
"In the above example, we have used the pipeline syntax of mayavi instead of "
"using :func:`contour3d` and :func:`volume_slice` in order to use a single "
"scalar field as data source."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:115
msgid ""
"In some cases, though not in our example, it might be usable to insert a "
"threshold filter before the cut plane, eg:to remove area with values below "
"'s.min()+0.1*s.ptp()'. In this case, the cut plane needs to be implemented "
"with `mlab.pipeline.scalar_cut_plane` as the data looses its structure after"
" thresholding."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:132
msgid "Visualizing a vector field"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:140
msgid ""
"A vector field, i.e., vectors continuously defined in a volume, can be "
"difficult to visualize, as it contains a lot of information. Let us explore "
"different visualizations for the velocity field of a multi-axis convection "
"cell [1]_, in hydrodynamics, as defined by its components sampled on a grid,"
" `u`, `v`, `w`::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Quiver"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:156
msgid ""
"The simplest visualization of a set of vectors, is using the `mlab` function"
" `quiver3d`::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:164
msgid ""
"The main limitation of this visualization is that it positions an arrow for "
"each sampling point on the grid. As a result the visualization is very busy."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Masking vectors"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:169
msgid ""
"We can use the fact that we are visualizing a vector field, and not just a "
"bunch of vectors, to reduce the amount of arrows displayed. For this we need"
" to build a `vector_field` source, and apply to it the `vectors` module, "
"with some masking parameters (here we keep only one point out of 20)::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "A cut plane"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:181
msgid ""
"If we are interested in displaying the vectors along a cut, we can use a cut"
" plane. In particular, we can inspect interactively the vector field by "
"moving the cut plane along: clicking on it and dragging it can give a very "
"clear understanding of the vector field::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "Iso-Surfaces of the magnitude"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:191
msgid ""
"An important parameter of the vector field is its magnitude. It can be "
"interesting to display iso-surfaces of the normal of the vectors. For this "
"we can create a scalar field from the vector field using the "
"ExtractVectorNorm filter, and use the Iso-Surface module on it. When working"
" interactively, a good understanding of the magnitude of the field can be "
"gained by changing the values of the contours in the object's property "
"dialog. ::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:0
msgid "The Flow, or the field lines"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:205
msgid ""
"For certain vector fields, the line of flow along the field can have an "
"interesting meaning. For instance this can be interpreted as a trajectory in"
" hydrodynamics, or field lines in electro-magnetism. We can display the flow"
" lines originating for a certain seed surface using the `streamline` module,"
" or the mlab :func:`flow` function, which relies on `streamline` "
"internally::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:221
msgid ""
"Giving a meaningful visualization of a vector field is a hard task, and one "
"must use all the tools at hand to illustrate his purposes. It is important "
"to choose the message conveyed. No one visualization will tell all about a "
"vector field. Here is an example of a visualization made by combining the "
"different tools above::"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:257
msgid ""
"Although most of this section has been centered on snippets of code to "
"create visualization objects, it is important to remember that Mayavi is an "
"interactive program, and that the properties of these objects can be "
"modified interactively, as described in :ref:`mlab-changing-objects-"
"interactively`. It is often impossible to choose the best parameters for a "
"visualization before hand. Colors, contour values, colormap, view angle, "
"etc... should be chosen interactively. If reproducibiles are required, the "
"chosen values can be added in the original script."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:267
msgid ""
"Moreover, the `mlab` functions expose only a small fraction of the "
"possibilities of the visualization objects. The dialogs expose more of these"
" functionalities, that are entirely controlled by the attributes of the "
"objects returned by the mlab functions. These objects are very rich, as they"
" are built from VTK objects. It can be hard to find the right attribute to "
"modify when exploring them, or in the VTK documentation, thus the easiest "
"way is to modify them interactively using the pipeline view dialog and use "
"the :ref:`record feature <record_feature>` to find out the corresponding "
"lines of code. See :ref:`organisation_mayavi_visualisations` to understand "
"better the link between the lines of code generated by the record feature "
"and `mlab`. ."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_case_studies.rst:284
msgid ""
"Toussaint, V.; Carriere, P. & Raynal, F. A numerical Eulerian approach to "
"mixing by chaotic advection Phys. Fluids, 1995, 7, 2587"
msgstr ""
