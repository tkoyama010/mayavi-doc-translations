# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Enthought Inc.
# This file is distributed under the same license as the mayavi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Mayavii <1444742843@qq.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mayavi 4.8.4.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-22 00:38+0000\n"
"PO-Revision-Date: 2019-04-27 07:30+0000\n"
"Last-Translator: Mayavii <1444742843@qq.com>, 2021\n"
"Language-Team: Chinese (China) (https://app.transifex.com/tkoyama010/teams/98399/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:4
msgid "Assembling pipelines with `mlab`"
msgstr "使用mlab配置pipeline管线"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:7
msgid ""
"The plotting functions reviewed above explore only a small fraction of the "
"visualization possibilities of Mayavi. The full power of Mayavi can only be "
"unleashed through the control of the pipeline itself. As described in the "
":ref:`an-overview-of-mayavi` section, a visualization in Mayavi is created "
"by loading the data in Mayavi with `data source` object, optionally "
"transforming the data through :ref:`filters`, and visualizing it with "
":ref:`modules`. The mlab functions build complex pipelines for you in one "
"function, making the right choice of sources, filters, and modules, but they"
" cannot explore all the possible combinations."
msgstr ""
"前面使用的绘图函数仅仅是Mayavi的一小部分，它还有更大的空间和可能性。Mayavi的全部威力需要配合pipeline管线才能完全释放出来。关于使用`data"
" source`对象加载数据进行可视化可以参考章节`an-overview-of-"
"mayavi`。其中有一个数据变换的环节是可选的：它通过`filters`滤波层级和`module`可视化层级完成。而mlab函数仅通过1行代码就能完成复杂的管线配置，完成sources数据源层级，filters层级以及module层级的搭建。其弊端是分化过于完全无法做更多的延伸，以及探索可能的结合方式。"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:18
msgid ""
"Mlab provides a sub-module `pipeline` which contains functions to populate "
"the pipeline easily from scripts. This module is accessible in `mlab`: "
"`mlab.pipeline`, or can be imported from `mayavi.tools.pipeline`."
msgstr ""
"Mlab所包含的子模块`pipeline` 可以使脚本能轻松配置管线。这个模块可以使用 `mlab`调用：`mlab.pipeline，或者直接以 "
"`mayavi.tools.pipeline`方式引入环境。"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:23
msgid ""
"When using an `mlab` plotting function, a pipeline is created: first a "
"source is created from `numpy` arrays, then modules, and possibly filters, "
"are added. The resulting pipeline can be seen for instance with the "
"`mlab.show_pipeline` command. This information can be used to create the "
"very same pipeline directly using the `pipeline` scripting module, as the "
"names of the functions required to create each step of the pipeline are "
"directly linked to the default names of the objects created by `mlab` on the"
" pipeline. As an example, let us create a visualization using :func:`surf`::"
msgstr ""
"当我们使用`mlab`绘图函数的时候，管线已会自动完成搭建：首先是来自`numpy`数组的数据创建source数据源层级，然后是module可视化模块层级，在两者之间可能带有filter滤波层级。对于已经配置好的管线，我们可以使用 `mlab.show_pipeline`进行查看。利用它的层级配置信息，我们可以使用`pipeline`的配置方法对其进行复现。在这里我们需要各个层级的配置函数的信息，其所使用的函数名默认也是pipeline管线的函数名。下面我们演示一个案例，使用`surf`函数构建可视化：\n"
"译者注：这是两种绘图的方式，前者是直接使用高度预制好的surf绘图函数，后者使用pipeline按层搭建，旨在说明两者具有相同的效果。比如Array2DSource数据源层级的名称，也是pipeline的方法名pipeline.array2d_source。"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:39
msgid "The following pipeline is created::"
msgstr "以下是所创建的管线："

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:47
msgid "The same pipeline can be created using the following code::"
msgstr "相同的pipeline管线也可以用下面的代码进行搭建："

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:57
msgid "Data sources"
msgstr "Data sources数据源层级"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:61
msgid ""
"The `mlab.pipeline` module contains functions for creating various data "
"sources from arrays. They are fully documented in details in the :ref:`mlab-"
"pipeline-reference`. We give a small summary of the possibilities here."
msgstr ""
" `mlab.pipeline` 模块包含不同的函数用以创建不同的数据源层级。在这里我们仅做一个可能性的总结，更详细的文档请参考：`mlab-"
"pipeline-reference`。"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:66
msgid ""
"Mayavi distinguishes sources with **scalar data**, and sources with **vector"
" data**, but more important, it has different functions to create sets of "
"**unconnected points**, with data attached to them, or **connected data "
"points** describing continuously varying quantities that can be interpolated"
" between data points, often called `fields` in physics or engineering."
msgstr ""
"Mayavi将数据区分为**scalar data 标量数据**和**vector data "
"矢量数据**。有一点尤为重要，他们用不同的方法创建**unconnected points 离散点**，或具有连续变化的**connected data"
" points 连续点** 。后者会在点与点时间采用插值，在物理和工程上是`fields 场`的概念。"

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "Unconnected sources"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:77
msgid ":func:`scalar_scatter` (creates a :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:82
msgid ":func:`vector_scatter` (creates an :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "implicitly-connected sources"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:91
msgid ":func:`scalar_field` (creates an :ref:`image_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:96
msgid ":func:`vector_field` (creates an :ref:`image_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:101
msgid ":func:`array2d_source` (creates an :ref:`image_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:0
msgid "Explicitly-connected sources"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:110
msgid ":func:`line_source` (creates an :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:115
msgid ":func:`triangular_mesh_source` (creates an :ref:`poly_data`)"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:120
msgid ""
"All the `mlab.pipline` source factories are functions that take numpy arrays"
" and return the Mayavi source object that was added to the pipeline. "
"However, the implicitly-connected sources require well-shaped arrays as "
"arguments: the data is supposed to lie on a regular, orthogonal, grid of the"
" same shape as the shape of the input array, in other words, the array "
"describes an image, possibly 3 dimensional."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:129
msgid ""
"More complicated data structures can be created, such as irregular grids or "
"non-orthogonal grid. See :ref:`the section on data structures <data-"
"structures-used-by-mayavi>`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:135
msgid "Modules and filters"
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:137
msgid ""
"For each Mayavi module or filter (see :ref:`modules` and :ref:`filters`), "
"there is a corresponding `mlab.pipeline` function. The name of this function"
" is created by replacing the alternating capitals in the module or filter "
"name by underscores. Thus `ScalarCutPlane` corresponds to "
"`scalar_cut_plane`."
msgstr ""

#: ../../mayavi/docs/source/mayavi/mlab_pipeline.rst:143
msgid ""
"In general, the `mlab.pipeline` module and filter factory functions simply "
"create and connect the corresponding object. However they can also contain "
"addition logic, exposed as keyword arguments. For instance they allow to set"
" up easily a colormap, or to specify the color of the module, when relevant."
" In accordance with the goal of the `mlab` interface to make frequent "
"operations simple, they use the keyword arguments to choose the properties "
"of the created object to suit the requirements. It can be thus easier to use"
" the keyword arguments, when available, than to set the attributes of the "
"objects created. For more information, please check out the docstrings. "
"Full, detailed, usage examples are given in the next subsection."
msgstr ""
